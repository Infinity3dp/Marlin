!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABL_PROBE_PT_1_X	Configuration.h	510;"	d
ABL_PROBE_PT_1_Y	Configuration.h	511;"	d
ABL_PROBE_PT_2_X	Configuration.h	512;"	d
ABL_PROBE_PT_2_Y	Configuration.h	513;"	d
ABL_PROBE_PT_3_X	Configuration.h	514;"	d
ABL_PROBE_PT_3_Y	Configuration.h	515;"	d
ABS_PREHEAT_FAN_SPEED	Configuration.h	714;"	d
ABS_PREHEAT_HOTEND_TEMP	Configuration.h	712;"	d
ABS_PREHEAT_HPB_TEMP	Configuration.h	713;"	d
ACMD23	SdInfo.h	/^uint8_t const ACMD23 = 0X17;$/;"	v
ACMD41	SdInfo.h	/^uint8_t const ACMD41 = 0X29;$/;"	v
AIO0_DDR	fastio.h	2311;"	d
AIO0_DDR	fastio.h	2990;"	d
AIO0_DDR	fastio.h	679;"	d
AIO0_PIN	fastio.h	2307;"	d
AIO0_PIN	fastio.h	2986;"	d
AIO0_PIN	fastio.h	676;"	d
AIO0_PWM	fastio.h	2310;"	d
AIO0_PWM	fastio.h	2989;"	d
AIO0_PWM	fastio.h	680;"	d
AIO0_RPORT	fastio.h	2308;"	d
AIO0_RPORT	fastio.h	2987;"	d
AIO0_RPORT	fastio.h	677;"	d
AIO0_WPORT	fastio.h	2309;"	d
AIO0_WPORT	fastio.h	2988;"	d
AIO0_WPORT	fastio.h	678;"	d
AIO1_DDR	fastio.h	2317;"	d
AIO1_DDR	fastio.h	2996;"	d
AIO1_DDR	fastio.h	685;"	d
AIO1_PIN	fastio.h	2313;"	d
AIO1_PIN	fastio.h	2992;"	d
AIO1_PIN	fastio.h	682;"	d
AIO1_PWM	fastio.h	2316;"	d
AIO1_PWM	fastio.h	2995;"	d
AIO1_PWM	fastio.h	686;"	d
AIO1_RPORT	fastio.h	2314;"	d
AIO1_RPORT	fastio.h	2993;"	d
AIO1_RPORT	fastio.h	683;"	d
AIO1_WPORT	fastio.h	2315;"	d
AIO1_WPORT	fastio.h	2994;"	d
AIO1_WPORT	fastio.h	684;"	d
AIO2_DDR	fastio.h	2323;"	d
AIO2_DDR	fastio.h	3002;"	d
AIO2_DDR	fastio.h	691;"	d
AIO2_PIN	fastio.h	2319;"	d
AIO2_PIN	fastio.h	2998;"	d
AIO2_PIN	fastio.h	688;"	d
AIO2_PWM	fastio.h	2322;"	d
AIO2_PWM	fastio.h	3001;"	d
AIO2_PWM	fastio.h	692;"	d
AIO2_RPORT	fastio.h	2320;"	d
AIO2_RPORT	fastio.h	2999;"	d
AIO2_RPORT	fastio.h	689;"	d
AIO2_WPORT	fastio.h	2321;"	d
AIO2_WPORT	fastio.h	3000;"	d
AIO2_WPORT	fastio.h	690;"	d
AIO3_DDR	fastio.h	2329;"	d
AIO3_DDR	fastio.h	3008;"	d
AIO3_DDR	fastio.h	697;"	d
AIO3_PIN	fastio.h	2325;"	d
AIO3_PIN	fastio.h	3004;"	d
AIO3_PIN	fastio.h	694;"	d
AIO3_PWM	fastio.h	2328;"	d
AIO3_PWM	fastio.h	3007;"	d
AIO3_PWM	fastio.h	698;"	d
AIO3_RPORT	fastio.h	2326;"	d
AIO3_RPORT	fastio.h	3005;"	d
AIO3_RPORT	fastio.h	695;"	d
AIO3_WPORT	fastio.h	2327;"	d
AIO3_WPORT	fastio.h	3006;"	d
AIO3_WPORT	fastio.h	696;"	d
AIO4_DDR	fastio.h	2335;"	d
AIO4_DDR	fastio.h	3014;"	d
AIO4_DDR	fastio.h	703;"	d
AIO4_PIN	fastio.h	2331;"	d
AIO4_PIN	fastio.h	3010;"	d
AIO4_PIN	fastio.h	700;"	d
AIO4_PWM	fastio.h	2334;"	d
AIO4_PWM	fastio.h	3013;"	d
AIO4_PWM	fastio.h	704;"	d
AIO4_RPORT	fastio.h	2332;"	d
AIO4_RPORT	fastio.h	3011;"	d
AIO4_RPORT	fastio.h	701;"	d
AIO4_WPORT	fastio.h	2333;"	d
AIO4_WPORT	fastio.h	3012;"	d
AIO4_WPORT	fastio.h	702;"	d
AIO5_DDR	fastio.h	2341;"	d
AIO5_DDR	fastio.h	3020;"	d
AIO5_DDR	fastio.h	709;"	d
AIO5_PIN	fastio.h	2337;"	d
AIO5_PIN	fastio.h	3016;"	d
AIO5_PIN	fastio.h	706;"	d
AIO5_PWM	fastio.h	2340;"	d
AIO5_PWM	fastio.h	3019;"	d
AIO5_PWM	fastio.h	710;"	d
AIO5_RPORT	fastio.h	2338;"	d
AIO5_RPORT	fastio.h	3017;"	d
AIO5_RPORT	fastio.h	707;"	d
AIO5_WPORT	fastio.h	2339;"	d
AIO5_WPORT	fastio.h	3018;"	d
AIO5_WPORT	fastio.h	708;"	d
AIO6_DDR	fastio.h	2347;"	d
AIO6_DDR	fastio.h	3026;"	d
AIO6_DDR	fastio.h	715;"	d
AIO6_PIN	fastio.h	2343;"	d
AIO6_PIN	fastio.h	3022;"	d
AIO6_PIN	fastio.h	712;"	d
AIO6_PWM	fastio.h	2346;"	d
AIO6_PWM	fastio.h	3025;"	d
AIO6_PWM	fastio.h	716;"	d
AIO6_RPORT	fastio.h	2344;"	d
AIO6_RPORT	fastio.h	3023;"	d
AIO6_RPORT	fastio.h	713;"	d
AIO6_WPORT	fastio.h	2345;"	d
AIO6_WPORT	fastio.h	3024;"	d
AIO6_WPORT	fastio.h	714;"	d
AIO7_DDR	fastio.h	2353;"	d
AIO7_DDR	fastio.h	3032;"	d
AIO7_DDR	fastio.h	721;"	d
AIO7_PIN	fastio.h	2349;"	d
AIO7_PIN	fastio.h	3028;"	d
AIO7_PIN	fastio.h	718;"	d
AIO7_PWM	fastio.h	2352;"	d
AIO7_PWM	fastio.h	3031;"	d
AIO7_PWM	fastio.h	722;"	d
AIO7_RPORT	fastio.h	2350;"	d
AIO7_RPORT	fastio.h	3029;"	d
AIO7_RPORT	fastio.h	719;"	d
AIO7_WPORT	fastio.h	2351;"	d
AIO7_WPORT	fastio.h	3030;"	d
AIO7_WPORT	fastio.h	720;"	d
ALLOW_DEPRECATED_FUNCTIONS	SdFatConfig.h	71;"	d
ANALOG_SELECT	temperature.cpp	1071;"	d	file:
ARRAY_BY_EXTRUDERS	Conditionals.h	545;"	d
ARRAY_BY_EXTRUDERS	Conditionals.h	547;"	d
ARRAY_BY_EXTRUDERS	Conditionals.h	549;"	d
ARRAY_BY_EXTRUDERS	Conditionals.h	551;"	d
ARRAY_BY_EXTRUDERS1	Conditionals.h	554;"	d
AUTOTEMP_OLDWEIGHT	Configuration_adv.h	114;"	d
AUTO_BED_LEVELING_FEATURE	Configuration.h	470;"	d
AUTO_BED_LEVELING_GRID	Configuration.h	489;"	d
AUTO_BED_LEVELING_GRID_POINTS	Configuration.h	504;"	d
AUTO_FILAMENT_CHANGE	Configuration_adv.h	517;"	d
AUTO_FILAMENT_CHANGE_FEEDRATE	Configuration_adv.h	519;"	d
AUTO_FILAMENT_CHANGE_LENGTH	Configuration_adv.h	518;"	d
AXIS_INIT	stepper.cpp	1022;"	d	file:
AXIS_RELATIVE_MODES	Configuration_adv.h	276;"	d
A_AXIS	Marlin.h	/^enum AxisEnum {X_AXIS = 0, A_AXIS = 0, Y_AXIS = 1, B_AXIS = 1, Z_AXIS = 2, C_AXIS = 2, E_AXIS = 3, X_HEAD = 4, Y_HEAD = 5, Z_HEAD = 5};$/;"	e	enum:AxisEnum
AxisEnum	Marlin.h	/^enum AxisEnum {X_AXIS = 0, A_AXIS = 0, Y_AXIS = 1, B_AXIS = 1, Z_AXIS = 2, C_AXIS = 2, E_AXIS = 3, X_HEAD = 4, Y_HEAD = 5, Z_HEAD = 5};$/;"	g
BABYSTEP_AXIS	stepper.cpp	1202;"	d	file:
BABYSTEP_INVERT_Z	Configuration_adv.h	426;"	d
BABYSTEP_MULTIPLICATOR	Configuration_adv.h	427;"	d
BABYSTEP_XY	Configuration_adv.h	424;"	d
BACK_PROBE_BED_POSITION	Configuration.h	497;"	d
BANG_MAX	Configuration.h	200;"	d
BAUDRATE	Configuration.h	73;"	d
BEDTEMPTABLE	thermistortables.h	1379;"	d
BEDTEMPTABLE_LEN	thermistortables.h	1380;"	d
BED_CHECK_INTERVAL	Configuration_adv.h	45;"	d
BED_HYSTERESIS	Configuration_adv.h	47;"	d
BED_MAXTEMP	Conditionals.h	529;"	d
BED_MAXTEMP	Configuration.h	187;"	d
BED_MINTEMP	Conditionals.h	528;"	d
BED_MINTEMP	Configuration.h	178;"	d
BED_USES_AD595	Conditionals.h	526;"	d
BED_USES_THERMISTOR	Conditionals.h	532;"	d
BEEPER_PIN	pins_RAMPS_14.h	174;"	d
BEEPER_PIN	pins_RAMPS_14.h	203;"	d
BEEPER_PIN	pins_RAMPS_14.h	208;"	d
BEEPER_PIN	pins_RAMPS_14.h	231;"	d
BEEPER_PIN	pins_RAMPS_14.h	260;"	d
BIN	MarlinSerial.h	77;"	d
BLEN_A	ultralcd_implementation_hitachi_HD44780.h	45;"	d
BLEN_B	ultralcd_implementation_hitachi_HD44780.h	44;"	d
BLEN_C	ultralcd_implementation_hitachi_HD44780.h	52;"	d
BLEN_REPRAPWORLD_KEYPAD_DOWN	ultralcd.h	100;"	d
BLEN_REPRAPWORLD_KEYPAD_F1	ultralcd.h	99;"	d
BLEN_REPRAPWORLD_KEYPAD_F2	ultralcd.h	98;"	d
BLEN_REPRAPWORLD_KEYPAD_F3	ultralcd.h	97;"	d
BLEN_REPRAPWORLD_KEYPAD_LEFT	ultralcd.h	104;"	d
BLEN_REPRAPWORLD_KEYPAD_MIDDLE	ultralcd.h	102;"	d
BLEN_REPRAPWORLD_KEYPAD_RIGHT	ultralcd.h	101;"	d
BLEN_REPRAPWORLD_KEYPAD_UP	ultralcd.h	103;"	d
BLOCK_BUFFER_SIZE	Configuration_adv.h	468;"	d
BLOCK_BUFFER_SIZE	Configuration_adv.h	470;"	d
BLOCK_MOD	planner.h	98;"	d
BL_DW	ultralcd_implementation_hitachi_HD44780.h	116;"	d
BL_LE	ultralcd_implementation_hitachi_HD44780.h	113;"	d
BL_MI	ultralcd_implementation_hitachi_HD44780.h	115;"	d
BL_RI	ultralcd_implementation_hitachi_HD44780.h	117;"	d
BL_ST	ultralcd_implementation_hitachi_HD44780.h	118;"	d
BL_UP	ultralcd_implementation_hitachi_HD44780.h	114;"	d
BOARD_RAMPS_14_EEB	pins.h	41;"	d
BOARD_RAMPS_14_EEF	pins.h	43;"	d
BOARD_RAMPS_14_EFB	pins.h	40;"	d
BOARD_RAMPS_14_EFF	pins.h	42;"	d
BOARD_RAMPS_14_SF	pins.h	44;"	d
BOOTSIG0	SdFatStructs.h	/^uint8_t const BOOTSIG0 = 0X55;$/;"	v
BOOTSIG1	SdFatStructs.h	/^uint8_t const BOOTSIG1 = 0XAA;$/;"	v
BTN_EN1	pins_RAMPS_14.h	176;"	d
BTN_EN1	pins_RAMPS_14.h	182;"	d
BTN_EN1	pins_RAMPS_14.h	189;"	d
BTN_EN1	pins_RAMPS_14.h	197;"	d
BTN_EN1	pins_RAMPS_14.h	223;"	d
BTN_EN1	pins_RAMPS_14.h	235;"	d
BTN_EN1	pins_RAMPS_14.h	242;"	d
BTN_EN1	pins_RAMPS_14.h	246;"	d
BTN_EN2	pins_RAMPS_14.h	177;"	d
BTN_EN2	pins_RAMPS_14.h	183;"	d
BTN_EN2	pins_RAMPS_14.h	190;"	d
BTN_EN2	pins_RAMPS_14.h	198;"	d
BTN_EN2	pins_RAMPS_14.h	224;"	d
BTN_EN2	pins_RAMPS_14.h	236;"	d
BTN_EN2	pins_RAMPS_14.h	243;"	d
BTN_EN2	pins_RAMPS_14.h	247;"	d
BTN_ENC	pins_RAMPS_14.h	178;"	d
BTN_ENC	pins_RAMPS_14.h	184;"	d
BTN_ENC	pins_RAMPS_14.h	193;"	d
BTN_ENC	pins_RAMPS_14.h	199;"	d
BTN_ENC	pins_RAMPS_14.h	225;"	d
BTN_ENC	pins_RAMPS_14.h	237;"	d
BTN_ENC	pins_RAMPS_14.h	244;"	d
BTN_ENC	pins_RAMPS_14.h	248;"	d
BUFSIZE	Configuration_adv.h	477;"	d
BUTTON_EXISTS	ultralcd.h	32;"	d
BUTTON_PRESSED	ultralcd.h	33;"	d
BUZZER_H	buzzer.h	24;"	d
BYTE	MarlinSerial.h	78;"	d
B_AXIS	Marlin.h	/^enum AxisEnum {X_AXIS = 0, A_AXIS = 0, Y_AXIS = 1, B_AXIS = 1, Z_AXIS = 2, C_AXIS = 2, E_AXIS = 3, X_HEAD = 4, Y_HEAD = 5, Z_HEAD = 5};$/;"	e	enum:AxisEnum
B_DW	ultralcd.h	143;"	d
B_DW	ultralcd_implementation_hitachi_HD44780.h	124;"	d
B_DW	ultralcd_implementation_hitachi_HD44780.h	66;"	d
B_I2C_BTN_OFFSET	ultralcd_implementation_hitachi_HD44780.h	60;"	d
B_I2C_BTN_OFFSET	ultralcd_implementation_hitachi_HD44780.h	91;"	d
B_LE	ultralcd.h	140;"	d
B_LE	ultralcd_implementation_hitachi_HD44780.h	121;"	d
B_LE	ultralcd_implementation_hitachi_HD44780.h	63;"	d
B_MI	ultralcd.h	142;"	d
B_MI	ultralcd_implementation_hitachi_HD44780.h	123;"	d
B_MI	ultralcd_implementation_hitachi_HD44780.h	65;"	d
B_MI	ultralcd_implementation_hitachi_HD44780.h	93;"	d
B_RI	ultralcd.h	144;"	d
B_RI	ultralcd_implementation_hitachi_HD44780.h	125;"	d
B_RI	ultralcd_implementation_hitachi_HD44780.h	67;"	d
B_ST	ultralcd.h	145;"	d
B_ST	ultralcd_implementation_hitachi_HD44780.h	126;"	d
B_ST	ultralcd_implementation_hitachi_HD44780.h	71;"	d
B_UP	ultralcd.h	141;"	d
B_UP	ultralcd_implementation_hitachi_HD44780.h	122;"	d
B_UP	ultralcd_implementation_hitachi_HD44780.h	64;"	d
CACHE_FOR_READ	SdVolume.h	/^  static bool const CACHE_FOR_READ = false;$/;"	m	class:SdVolume
CACHE_FOR_WRITE	SdVolume.h	/^  static bool const CACHE_FOR_WRITE = true;$/;"	m	class:SdVolume
CALC_FAN_SPEED	planner.cpp	485;"	d	file:
CARDREADER_H	cardreader.h	24;"	d
CBI	macros.h	33;"	d
CENTER_OR_SCROLL	ultralcd_implementation_hitachi_HD44780.h	647;"	d
CHDK_DELAY	Configuration_adv.h	348;"	d
CID	SdInfo.h	/^typedef struct CID {$/;"	s
CMD0	SdInfo.h	/^uint8_t const CMD0 = 0X00;$/;"	v
CMD10	SdInfo.h	/^uint8_t const CMD10 = 0X0A;$/;"	v
CMD12	SdInfo.h	/^uint8_t const CMD12 = 0X0C;$/;"	v
CMD13	SdInfo.h	/^uint8_t const CMD13 = 0X0D;$/;"	v
CMD17	SdInfo.h	/^uint8_t const CMD17 = 0X11;$/;"	v
CMD18	SdInfo.h	/^uint8_t const CMD18 = 0X12;$/;"	v
CMD24	SdInfo.h	/^uint8_t const CMD24 = 0X18;$/;"	v
CMD25	SdInfo.h	/^uint8_t const CMD25 = 0X19;$/;"	v
CMD32	SdInfo.h	/^uint8_t const CMD32 = 0X20;$/;"	v
CMD33	SdInfo.h	/^uint8_t const CMD33 = 0X21;$/;"	v
CMD38	SdInfo.h	/^uint8_t const CMD38 = 0X26;$/;"	v
CMD55	SdInfo.h	/^uint8_t const CMD55 = 0X37;$/;"	v
CMD58	SdInfo.h	/^uint8_t const CMD58 = 0X3A;$/;"	v
CMD8	SdInfo.h	/^uint8_t const CMD8 = 0X08;$/;"	v
CMD9	SdInfo.h	/^uint8_t const CMD9 = 0X09;$/;"	v
CONDITIONALS_H	Conditionals.h	271;"	d
CONFIGURATION_ADV_H	Configuration_adv.h	34;"	d
CONFIGURATION_H	Configuration.h	39;"	d
CONFIGURATION_LCD	Conditionals.h	47;"	d
CONFIGURATION_STORE_H	configuration_store.h	24;"	d
CONFIG_ECHO_START	configuration_store.cpp	683;"	d	file:
CONTROLLERFAN_PIN	Configuration_adv.h	142;"	d
CONTROLLERFAN_PIN	pins_RAMPS_14.h	110;"	d
CONTROLLERFAN_SECS	Configuration_adv.h	143;"	d
CONTROLLERFAN_SPEED	Configuration_adv.h	144;"	d
COPY_BIT	stepper.cpp	359;"	d	file:
CORE_AXIS_2	Conditionals.h	319;"	d
CORE_AXIS_2	Conditionals.h	322;"	d
CORE_AXIS_3	Conditionals.h	320;"	d
CORE_AXIS_3	Conditionals.h	323;"	d
COS_60	Marlin_main.cpp	411;"	d	file:
COUNT	macros.h	56;"	d
CRC_CCITT	Sd2Card.cpp	/^static uint16_t CRC_CCITT(const uint8_t* data, size_t n) {$/;"	f	file:
CRITICAL_SECTION_END	Marlin.h	263;"	d
CRITICAL_SECTION_END	MarlinSerial.h	36;"	d
CRITICAL_SECTION_START	Marlin.h	262;"	d
CRITICAL_SECTION_START	MarlinSerial.h	35;"	d
CSDV1	SdInfo.h	/^typedef struct CSDV1 {$/;"	s
CSDV2	SdInfo.h	/^typedef struct CSDV2 {$/;"	s
CUSTOM_M_CODES	Configuration.h	663;"	d
CUSTOM_M_CODE_SET_Z_PROBE_OFFSET	Configuration.h	666;"	d
C_AXIS	Marlin.h	/^enum AxisEnum {X_AXIS = 0, A_AXIS = 0, Y_AXIS = 1, B_AXIS = 1, Z_AXIS = 2, C_AXIS = 2, E_AXIS = 3, X_HEAD = 4, Y_HEAD = 5, Z_HEAD = 5};$/;"	e	enum:AxisEnum
CardReader	cardreader.cpp	/^CardReader::CardReader() {$/;"	f	class:CardReader
CardReader	cardreader.h	/^class CardReader {$/;"	c
ChangeFilamenTempSet	Marlin_main.cpp	/^int ChangeFilamenTempSet = 200;$/;"	v
Channel	servo.cpp	/^static volatile int8_t Channel[_Nbr_16timers ];             \/\/ counter for the servo being pulsed for each timer (or -1 if refresh interval)$/;"	v	file:
Config_PrintSettings	configuration_store.cpp	/^void Config_PrintSettings(bool forReplay) {$/;"	f
Config_PrintSettings	configuration_store.h	/^  FORCE_INLINE void Config_PrintSettings(bool forReplay=false) {}$/;"	f
Config_ResetDefault	configuration_store.cpp	/^void Config_ResetDefault() {$/;"	f
Config_RetrieveSettings	configuration_store.cpp	/^void Config_RetrieveSettings() {$/;"	f
Config_RetrieveSettings	configuration_store.h	/^  FORCE_INLINE void Config_RetrieveSettings() { Config_ResetDefault(); Config_PrintSettings(); }$/;"	f
Config_StoreSettings	configuration_store.cpp	/^void Config_StoreSettings()  {$/;"	f
Config_StoreSettings	configuration_store.h	/^  FORCE_INLINE void Config_StoreSettings() {}$/;"	f
DATA_RES_ACCEPTED	SdInfo.h	/^uint8_t const DATA_RES_ACCEPTED = 0X05;$/;"	v
DATA_RES_MASK	SdInfo.h	/^uint8_t const DATA_RES_MASK = 0X1F;$/;"	v
DATA_START_BLOCK	SdInfo.h	/^uint8_t const DATA_START_BLOCK = 0XFE;$/;"	v
DEACTIVATE_SERVOS_AFTER_MOVE	Configuration.h	1047;"	d
DEBUGGING	Marlin.h	241;"	d
DEBUG_COMMUNICATION	Marlin.h	/^  DEBUG_COMMUNICATION = _BV(4), \/\/\/< Not implemented$/;"	e	enum:DebugFlags
DEBUG_DRYRUN	Marlin.h	/^  DEBUG_DRYRUN        = _BV(3), \/\/\/< Ignore temperature setting and E movement commands$/;"	e	enum:DebugFlags
DEBUG_ECHO	Marlin.h	/^  DEBUG_ECHO          = _BV(0), \/\/\/< Echo commands in order as they are processed$/;"	e	enum:DebugFlags
DEBUG_ERRORS	Marlin.h	/^  DEBUG_ERRORS        = _BV(2), \/\/\/< Not implemented$/;"	e	enum:DebugFlags
DEBUG_INFO	Marlin.h	/^  DEBUG_INFO          = _BV(1), \/\/\/< Print messages for code that has debug output$/;"	e	enum:DebugFlags
DEBUG_LED	fastio.h	139;"	d
DEBUG_LED	fastio.h	2057;"	d
DEBUG_LED	fastio.h	3374;"	d
DEBUG_LED	fastio.h	479;"	d
DEBUG_LED	fastio.h	987;"	d
DEBUG_LEVELING	Marlin.h	/^  DEBUG_LEVELING      = _BV(5)  \/\/\/< Print detailed output for homing and leveling$/;"	e	enum:DebugFlags
DEBUG_LEVELING_FEATURE	Configuration.h	471;"	d
DEBUG_NONE	Marlin.h	/^  DEBUG_NONE          = 0,$/;"	e	enum:DebugFlags
DEBUG_POS	Marlin_main.cpp	554;"	d	file:
DEC	MarlinSerial.h	74;"	d
DEFAULT_ACCELERATION	Configuration.h	620;"	d
DEFAULT_ACCELERATION	Configuration.h	639;"	d
DEFAULT_AXIS_STEPS_PER_UNIT	Configuration.h	616;"	d
DEFAULT_AXIS_STEPS_PER_UNIT	Configuration.h	635;"	d
DEFAULT_DUAL_X_CARRIAGE_MODE	Configuration_adv.h	251;"	d
DEFAULT_DUPLICATION_X_OFFSET	Configuration_adv.h	258;"	d
DEFAULT_EJERK	Configuration.h	627;"	d
DEFAULT_EJERK	Configuration.h	646;"	d
DEFAULT_KEEPALIVE_INTERVAL	Configuration.h	697;"	d
DEFAULT_Kc	Configuration_adv.h	97;"	d
DEFAULT_Kd	Configuration.h	216;"	d
DEFAULT_Ki	Configuration.h	215;"	d
DEFAULT_Kp	Configuration.h	214;"	d
DEFAULT_LCD_CONTRAST	Conditionals.h	128;"	d
DEFAULT_LCD_CONTRAST	Conditionals.h	256;"	d
DEFAULT_LCD_CONTRAST	Conditionals.h	51;"	d
DEFAULT_LCD_CONTRAST	Conditionals.h	62;"	d
DEFAULT_LCD_CONTRAST	Conditionals.h	64;"	d
DEFAULT_LCD_CONTRAST	Conditionals.h	66;"	d
DEFAULT_MACHINE_UUID	planner.cpp	/^char DEFAULT_MACHINE_UUID[7];$/;"	v
DEFAULT_MAX_ACCELERATION	Configuration.h	618;"	d
DEFAULT_MAX_ACCELERATION	Configuration.h	637;"	d
DEFAULT_MAX_FEEDRATE	Configuration.h	617;"	d
DEFAULT_MAX_FEEDRATE	Configuration.h	636;"	d
DEFAULT_MEASURED_FILAMENT_DIA	Configuration.h	1080;"	d
DEFAULT_MINIMUMFEEDRATE	Configuration_adv.h	295;"	d
DEFAULT_MINSEGMENTTIME	Configuration_adv.h	308;"	d
DEFAULT_MINTRAVELFEEDRATE	Configuration_adv.h	296;"	d
DEFAULT_NOMINAL_FILAMENT_DIA	Configuration.h	1070;"	d
DEFAULT_PULSE_WIDTH	servo.h	122;"	d
DEFAULT_RETRACT_ACCELERATION	Configuration.h	621;"	d
DEFAULT_RETRACT_ACCELERATION	Configuration.h	640;"	d
DEFAULT_STEPPER_DEACTIVE_TIME	Configuration_adv.h	289;"	d
DEFAULT_TRAVEL_ACCELERATION	Configuration.h	622;"	d
DEFAULT_TRAVEL_ACCELERATION	Configuration.h	641;"	d
DEFAULT_XYJERK	Configuration.h	625;"	d
DEFAULT_XYJERK	Configuration.h	644;"	d
DEFAULT_ZJERK	Configuration.h	626;"	d
DEFAULT_ZJERK	Configuration.h	645;"	d
DEFAULT_bedKd	Configuration.h	252;"	d
DEFAULT_bedKi	Configuration.h	251;"	d
DEFAULT_bedKp	Configuration.h	250;"	d
DEFINE_PGM_READ_ANY	Marlin_main.cpp	1230;"	d	file:
DEGREES	macros.h	38;"	d
DELTA_DIAGONAL_ROD_TRIM_TOWER_1	Marlin.h	290;"	d
DELTA_DIAGONAL_ROD_TRIM_TOWER_2	Marlin.h	293;"	d
DELTA_DIAGONAL_ROD_TRIM_TOWER_3	Marlin.h	296;"	d
DELTA_RADIUS_TRIM_TOWER_1	Marlin.h	281;"	d
DELTA_RADIUS_TRIM_TOWER_2	Marlin.h	284;"	d
DELTA_RADIUS_TRIM_TOWER_3	Marlin.h	287;"	d
DIGIPOT_I2C_MOTOR_CURRENTS	Configuration_adv.h	337;"	d
DIGIPOT_I2C_NUM_CHANNELS	Configuration_adv.h	335;"	d
DIGIPOT_MOTOR_CURRENT	Configuration_adv.h	327;"	d
DIO0_DDR	fastio.h	148;"	d
DIO0_DDR	fastio.h	2070;"	d
DIO0_DDR	fastio.h	2714;"	d
DIO0_DDR	fastio.h	3382;"	d
DIO0_DDR	fastio.h	487;"	d
DIO0_DDR	fastio.h	995;"	d
DIO0_PIN	fastio.h	145;"	d
DIO0_PIN	fastio.h	2066;"	d
DIO0_PIN	fastio.h	2710;"	d
DIO0_PIN	fastio.h	3379;"	d
DIO0_PIN	fastio.h	484;"	d
DIO0_PIN	fastio.h	992;"	d
DIO0_PWM	fastio.h	149;"	d
DIO0_PWM	fastio.h	2069;"	d
DIO0_PWM	fastio.h	2713;"	d
DIO0_PWM	fastio.h	3383;"	d
DIO0_PWM	fastio.h	488;"	d
DIO0_PWM	fastio.h	996;"	d
DIO0_RPORT	fastio.h	146;"	d
DIO0_RPORT	fastio.h	2067;"	d
DIO0_RPORT	fastio.h	2711;"	d
DIO0_RPORT	fastio.h	3380;"	d
DIO0_RPORT	fastio.h	485;"	d
DIO0_RPORT	fastio.h	993;"	d
DIO0_WPORT	fastio.h	147;"	d
DIO0_WPORT	fastio.h	2068;"	d
DIO0_WPORT	fastio.h	2712;"	d
DIO0_WPORT	fastio.h	3381;"	d
DIO0_WPORT	fastio.h	486;"	d
DIO0_WPORT	fastio.h	994;"	d
DIO10_DDR	fastio.h	1055;"	d
DIO10_DDR	fastio.h	208;"	d
DIO10_DDR	fastio.h	2130;"	d
DIO10_DDR	fastio.h	2774;"	d
DIO10_DDR	fastio.h	3442;"	d
DIO10_DDR	fastio.h	547;"	d
DIO10_PIN	fastio.h	1052;"	d
DIO10_PIN	fastio.h	205;"	d
DIO10_PIN	fastio.h	2126;"	d
DIO10_PIN	fastio.h	2770;"	d
DIO10_PIN	fastio.h	3439;"	d
DIO10_PIN	fastio.h	544;"	d
DIO10_PWM	fastio.h	1056;"	d
DIO10_PWM	fastio.h	209;"	d
DIO10_PWM	fastio.h	2129;"	d
DIO10_PWM	fastio.h	2773;"	d
DIO10_PWM	fastio.h	3443;"	d
DIO10_PWM	fastio.h	548;"	d
DIO10_RPORT	fastio.h	1053;"	d
DIO10_RPORT	fastio.h	206;"	d
DIO10_RPORT	fastio.h	2127;"	d
DIO10_RPORT	fastio.h	2771;"	d
DIO10_RPORT	fastio.h	3440;"	d
DIO10_RPORT	fastio.h	545;"	d
DIO10_WPORT	fastio.h	1054;"	d
DIO10_WPORT	fastio.h	207;"	d
DIO10_WPORT	fastio.h	2128;"	d
DIO10_WPORT	fastio.h	2772;"	d
DIO10_WPORT	fastio.h	3441;"	d
DIO10_WPORT	fastio.h	546;"	d
DIO11_DDR	fastio.h	1061;"	d
DIO11_DDR	fastio.h	2136;"	d
DIO11_DDR	fastio.h	214;"	d
DIO11_DDR	fastio.h	2780;"	d
DIO11_DDR	fastio.h	3448;"	d
DIO11_DDR	fastio.h	553;"	d
DIO11_PIN	fastio.h	1058;"	d
DIO11_PIN	fastio.h	211;"	d
DIO11_PIN	fastio.h	2132;"	d
DIO11_PIN	fastio.h	2776;"	d
DIO11_PIN	fastio.h	3445;"	d
DIO11_PIN	fastio.h	550;"	d
DIO11_PWM	fastio.h	1062;"	d
DIO11_PWM	fastio.h	2135;"	d
DIO11_PWM	fastio.h	215;"	d
DIO11_PWM	fastio.h	2779;"	d
DIO11_PWM	fastio.h	3449;"	d
DIO11_PWM	fastio.h	554;"	d
DIO11_RPORT	fastio.h	1059;"	d
DIO11_RPORT	fastio.h	212;"	d
DIO11_RPORT	fastio.h	2133;"	d
DIO11_RPORT	fastio.h	2777;"	d
DIO11_RPORT	fastio.h	3446;"	d
DIO11_RPORT	fastio.h	551;"	d
DIO11_WPORT	fastio.h	1060;"	d
DIO11_WPORT	fastio.h	2134;"	d
DIO11_WPORT	fastio.h	213;"	d
DIO11_WPORT	fastio.h	2778;"	d
DIO11_WPORT	fastio.h	3447;"	d
DIO11_WPORT	fastio.h	552;"	d
DIO12_DDR	fastio.h	1067;"	d
DIO12_DDR	fastio.h	2142;"	d
DIO12_DDR	fastio.h	220;"	d
DIO12_DDR	fastio.h	2786;"	d
DIO12_DDR	fastio.h	3454;"	d
DIO12_DDR	fastio.h	559;"	d
DIO12_PIN	fastio.h	1064;"	d
DIO12_PIN	fastio.h	2138;"	d
DIO12_PIN	fastio.h	217;"	d
DIO12_PIN	fastio.h	2782;"	d
DIO12_PIN	fastio.h	3451;"	d
DIO12_PIN	fastio.h	556;"	d
DIO12_PWM	fastio.h	1068;"	d
DIO12_PWM	fastio.h	2141;"	d
DIO12_PWM	fastio.h	221;"	d
DIO12_PWM	fastio.h	2785;"	d
DIO12_PWM	fastio.h	3455;"	d
DIO12_PWM	fastio.h	560;"	d
DIO12_RPORT	fastio.h	1065;"	d
DIO12_RPORT	fastio.h	2139;"	d
DIO12_RPORT	fastio.h	218;"	d
DIO12_RPORT	fastio.h	2783;"	d
DIO12_RPORT	fastio.h	3452;"	d
DIO12_RPORT	fastio.h	557;"	d
DIO12_WPORT	fastio.h	1066;"	d
DIO12_WPORT	fastio.h	2140;"	d
DIO12_WPORT	fastio.h	219;"	d
DIO12_WPORT	fastio.h	2784;"	d
DIO12_WPORT	fastio.h	3453;"	d
DIO12_WPORT	fastio.h	558;"	d
DIO13_DDR	fastio.h	1073;"	d
DIO13_DDR	fastio.h	2148;"	d
DIO13_DDR	fastio.h	226;"	d
DIO13_DDR	fastio.h	2792;"	d
DIO13_DDR	fastio.h	3460;"	d
DIO13_DDR	fastio.h	565;"	d
DIO13_PIN	fastio.h	1070;"	d
DIO13_PIN	fastio.h	2144;"	d
DIO13_PIN	fastio.h	223;"	d
DIO13_PIN	fastio.h	2788;"	d
DIO13_PIN	fastio.h	3457;"	d
DIO13_PIN	fastio.h	562;"	d
DIO13_PWM	fastio.h	1074;"	d
DIO13_PWM	fastio.h	2147;"	d
DIO13_PWM	fastio.h	227;"	d
DIO13_PWM	fastio.h	2791;"	d
DIO13_PWM	fastio.h	3461;"	d
DIO13_PWM	fastio.h	566;"	d
DIO13_RPORT	fastio.h	1071;"	d
DIO13_RPORT	fastio.h	2145;"	d
DIO13_RPORT	fastio.h	224;"	d
DIO13_RPORT	fastio.h	2789;"	d
DIO13_RPORT	fastio.h	3458;"	d
DIO13_RPORT	fastio.h	563;"	d
DIO13_WPORT	fastio.h	1072;"	d
DIO13_WPORT	fastio.h	2146;"	d
DIO13_WPORT	fastio.h	225;"	d
DIO13_WPORT	fastio.h	2790;"	d
DIO13_WPORT	fastio.h	3459;"	d
DIO13_WPORT	fastio.h	564;"	d
DIO14_DDR	fastio.h	1079;"	d
DIO14_DDR	fastio.h	2154;"	d
DIO14_DDR	fastio.h	233;"	d
DIO14_DDR	fastio.h	2798;"	d
DIO14_DDR	fastio.h	3466;"	d
DIO14_DDR	fastio.h	571;"	d
DIO14_PIN	fastio.h	1076;"	d
DIO14_PIN	fastio.h	2150;"	d
DIO14_PIN	fastio.h	230;"	d
DIO14_PIN	fastio.h	2794;"	d
DIO14_PIN	fastio.h	3463;"	d
DIO14_PIN	fastio.h	568;"	d
DIO14_PWM	fastio.h	1080;"	d
DIO14_PWM	fastio.h	2153;"	d
DIO14_PWM	fastio.h	234;"	d
DIO14_PWM	fastio.h	2797;"	d
DIO14_PWM	fastio.h	3467;"	d
DIO14_PWM	fastio.h	572;"	d
DIO14_RPORT	fastio.h	1077;"	d
DIO14_RPORT	fastio.h	2151;"	d
DIO14_RPORT	fastio.h	231;"	d
DIO14_RPORT	fastio.h	2795;"	d
DIO14_RPORT	fastio.h	3464;"	d
DIO14_RPORT	fastio.h	569;"	d
DIO14_WPORT	fastio.h	1078;"	d
DIO14_WPORT	fastio.h	2152;"	d
DIO14_WPORT	fastio.h	232;"	d
DIO14_WPORT	fastio.h	2796;"	d
DIO14_WPORT	fastio.h	3465;"	d
DIO14_WPORT	fastio.h	570;"	d
DIO15_DDR	fastio.h	1085;"	d
DIO15_DDR	fastio.h	2160;"	d
DIO15_DDR	fastio.h	239;"	d
DIO15_DDR	fastio.h	2804;"	d
DIO15_DDR	fastio.h	3472;"	d
DIO15_DDR	fastio.h	577;"	d
DIO15_PIN	fastio.h	1082;"	d
DIO15_PIN	fastio.h	2156;"	d
DIO15_PIN	fastio.h	236;"	d
DIO15_PIN	fastio.h	2800;"	d
DIO15_PIN	fastio.h	3469;"	d
DIO15_PIN	fastio.h	574;"	d
DIO15_PWM	fastio.h	1086;"	d
DIO15_PWM	fastio.h	2159;"	d
DIO15_PWM	fastio.h	240;"	d
DIO15_PWM	fastio.h	2803;"	d
DIO15_PWM	fastio.h	3473;"	d
DIO15_PWM	fastio.h	578;"	d
DIO15_RPORT	fastio.h	1083;"	d
DIO15_RPORT	fastio.h	2157;"	d
DIO15_RPORT	fastio.h	237;"	d
DIO15_RPORT	fastio.h	2801;"	d
DIO15_RPORT	fastio.h	3470;"	d
DIO15_RPORT	fastio.h	575;"	d
DIO15_WPORT	fastio.h	1084;"	d
DIO15_WPORT	fastio.h	2158;"	d
DIO15_WPORT	fastio.h	238;"	d
DIO15_WPORT	fastio.h	2802;"	d
DIO15_WPORT	fastio.h	3471;"	d
DIO15_WPORT	fastio.h	576;"	d
DIO16_DDR	fastio.h	1091;"	d
DIO16_DDR	fastio.h	2166;"	d
DIO16_DDR	fastio.h	245;"	d
DIO16_DDR	fastio.h	2810;"	d
DIO16_DDR	fastio.h	3478;"	d
DIO16_DDR	fastio.h	583;"	d
DIO16_PIN	fastio.h	1088;"	d
DIO16_PIN	fastio.h	2162;"	d
DIO16_PIN	fastio.h	242;"	d
DIO16_PIN	fastio.h	2806;"	d
DIO16_PIN	fastio.h	3475;"	d
DIO16_PIN	fastio.h	580;"	d
DIO16_PWM	fastio.h	1092;"	d
DIO16_PWM	fastio.h	2165;"	d
DIO16_PWM	fastio.h	246;"	d
DIO16_PWM	fastio.h	2809;"	d
DIO16_PWM	fastio.h	3479;"	d
DIO16_PWM	fastio.h	584;"	d
DIO16_RPORT	fastio.h	1089;"	d
DIO16_RPORT	fastio.h	2163;"	d
DIO16_RPORT	fastio.h	243;"	d
DIO16_RPORT	fastio.h	2807;"	d
DIO16_RPORT	fastio.h	3476;"	d
DIO16_RPORT	fastio.h	581;"	d
DIO16_WPORT	fastio.h	1090;"	d
DIO16_WPORT	fastio.h	2164;"	d
DIO16_WPORT	fastio.h	244;"	d
DIO16_WPORT	fastio.h	2808;"	d
DIO16_WPORT	fastio.h	3477;"	d
DIO16_WPORT	fastio.h	582;"	d
DIO17_DDR	fastio.h	1097;"	d
DIO17_DDR	fastio.h	2172;"	d
DIO17_DDR	fastio.h	251;"	d
DIO17_DDR	fastio.h	2816;"	d
DIO17_DDR	fastio.h	3484;"	d
DIO17_DDR	fastio.h	589;"	d
DIO17_PIN	fastio.h	1094;"	d
DIO17_PIN	fastio.h	2168;"	d
DIO17_PIN	fastio.h	248;"	d
DIO17_PIN	fastio.h	2812;"	d
DIO17_PIN	fastio.h	3481;"	d
DIO17_PIN	fastio.h	586;"	d
DIO17_PWM	fastio.h	1098;"	d
DIO17_PWM	fastio.h	2171;"	d
DIO17_PWM	fastio.h	252;"	d
DIO17_PWM	fastio.h	2815;"	d
DIO17_PWM	fastio.h	3485;"	d
DIO17_PWM	fastio.h	590;"	d
DIO17_RPORT	fastio.h	1095;"	d
DIO17_RPORT	fastio.h	2169;"	d
DIO17_RPORT	fastio.h	249;"	d
DIO17_RPORT	fastio.h	2813;"	d
DIO17_RPORT	fastio.h	3482;"	d
DIO17_RPORT	fastio.h	587;"	d
DIO17_WPORT	fastio.h	1096;"	d
DIO17_WPORT	fastio.h	2170;"	d
DIO17_WPORT	fastio.h	250;"	d
DIO17_WPORT	fastio.h	2814;"	d
DIO17_WPORT	fastio.h	3483;"	d
DIO17_WPORT	fastio.h	588;"	d
DIO18_DDR	fastio.h	1103;"	d
DIO18_DDR	fastio.h	2178;"	d
DIO18_DDR	fastio.h	257;"	d
DIO18_DDR	fastio.h	2822;"	d
DIO18_DDR	fastio.h	3490;"	d
DIO18_DDR	fastio.h	595;"	d
DIO18_PIN	fastio.h	1100;"	d
DIO18_PIN	fastio.h	2174;"	d
DIO18_PIN	fastio.h	254;"	d
DIO18_PIN	fastio.h	2818;"	d
DIO18_PIN	fastio.h	3487;"	d
DIO18_PIN	fastio.h	592;"	d
DIO18_PWM	fastio.h	1104;"	d
DIO18_PWM	fastio.h	2177;"	d
DIO18_PWM	fastio.h	258;"	d
DIO18_PWM	fastio.h	2821;"	d
DIO18_PWM	fastio.h	3491;"	d
DIO18_PWM	fastio.h	596;"	d
DIO18_RPORT	fastio.h	1101;"	d
DIO18_RPORT	fastio.h	2175;"	d
DIO18_RPORT	fastio.h	255;"	d
DIO18_RPORT	fastio.h	2819;"	d
DIO18_RPORT	fastio.h	3488;"	d
DIO18_RPORT	fastio.h	593;"	d
DIO18_WPORT	fastio.h	1102;"	d
DIO18_WPORT	fastio.h	2176;"	d
DIO18_WPORT	fastio.h	256;"	d
DIO18_WPORT	fastio.h	2820;"	d
DIO18_WPORT	fastio.h	3489;"	d
DIO18_WPORT	fastio.h	594;"	d
DIO19_DDR	fastio.h	1109;"	d
DIO19_DDR	fastio.h	2184;"	d
DIO19_DDR	fastio.h	263;"	d
DIO19_DDR	fastio.h	2828;"	d
DIO19_DDR	fastio.h	3496;"	d
DIO19_DDR	fastio.h	601;"	d
DIO19_PIN	fastio.h	1106;"	d
DIO19_PIN	fastio.h	2180;"	d
DIO19_PIN	fastio.h	260;"	d
DIO19_PIN	fastio.h	2824;"	d
DIO19_PIN	fastio.h	3493;"	d
DIO19_PIN	fastio.h	598;"	d
DIO19_PWM	fastio.h	1110;"	d
DIO19_PWM	fastio.h	2183;"	d
DIO19_PWM	fastio.h	264;"	d
DIO19_PWM	fastio.h	2827;"	d
DIO19_PWM	fastio.h	3497;"	d
DIO19_PWM	fastio.h	602;"	d
DIO19_RPORT	fastio.h	1107;"	d
DIO19_RPORT	fastio.h	2181;"	d
DIO19_RPORT	fastio.h	261;"	d
DIO19_RPORT	fastio.h	2825;"	d
DIO19_RPORT	fastio.h	3494;"	d
DIO19_RPORT	fastio.h	599;"	d
DIO19_WPORT	fastio.h	1108;"	d
DIO19_WPORT	fastio.h	2182;"	d
DIO19_WPORT	fastio.h	262;"	d
DIO19_WPORT	fastio.h	2826;"	d
DIO19_WPORT	fastio.h	3495;"	d
DIO19_WPORT	fastio.h	600;"	d
DIO1_DDR	fastio.h	1001;"	d
DIO1_DDR	fastio.h	154;"	d
DIO1_DDR	fastio.h	2076;"	d
DIO1_DDR	fastio.h	2720;"	d
DIO1_DDR	fastio.h	3388;"	d
DIO1_DDR	fastio.h	493;"	d
DIO1_PIN	fastio.h	151;"	d
DIO1_PIN	fastio.h	2072;"	d
DIO1_PIN	fastio.h	2716;"	d
DIO1_PIN	fastio.h	3385;"	d
DIO1_PIN	fastio.h	490;"	d
DIO1_PIN	fastio.h	998;"	d
DIO1_PWM	fastio.h	1002;"	d
DIO1_PWM	fastio.h	155;"	d
DIO1_PWM	fastio.h	2075;"	d
DIO1_PWM	fastio.h	2719;"	d
DIO1_PWM	fastio.h	3389;"	d
DIO1_PWM	fastio.h	494;"	d
DIO1_RPORT	fastio.h	152;"	d
DIO1_RPORT	fastio.h	2073;"	d
DIO1_RPORT	fastio.h	2717;"	d
DIO1_RPORT	fastio.h	3386;"	d
DIO1_RPORT	fastio.h	491;"	d
DIO1_RPORT	fastio.h	999;"	d
DIO1_WPORT	fastio.h	1000;"	d
DIO1_WPORT	fastio.h	153;"	d
DIO1_WPORT	fastio.h	2074;"	d
DIO1_WPORT	fastio.h	2718;"	d
DIO1_WPORT	fastio.h	3387;"	d
DIO1_WPORT	fastio.h	492;"	d
DIO20_DDR	fastio.h	1115;"	d
DIO20_DDR	fastio.h	2190;"	d
DIO20_DDR	fastio.h	269;"	d
DIO20_DDR	fastio.h	2834;"	d
DIO20_DDR	fastio.h	3502;"	d
DIO20_DDR	fastio.h	607;"	d
DIO20_PIN	fastio.h	1112;"	d
DIO20_PIN	fastio.h	2186;"	d
DIO20_PIN	fastio.h	266;"	d
DIO20_PIN	fastio.h	2830;"	d
DIO20_PIN	fastio.h	3499;"	d
DIO20_PIN	fastio.h	604;"	d
DIO20_PWM	fastio.h	1116;"	d
DIO20_PWM	fastio.h	2189;"	d
DIO20_PWM	fastio.h	270;"	d
DIO20_PWM	fastio.h	2833;"	d
DIO20_PWM	fastio.h	3503;"	d
DIO20_PWM	fastio.h	608;"	d
DIO20_RPORT	fastio.h	1113;"	d
DIO20_RPORT	fastio.h	2187;"	d
DIO20_RPORT	fastio.h	267;"	d
DIO20_RPORT	fastio.h	2831;"	d
DIO20_RPORT	fastio.h	3500;"	d
DIO20_RPORT	fastio.h	605;"	d
DIO20_WPORT	fastio.h	1114;"	d
DIO20_WPORT	fastio.h	2188;"	d
DIO20_WPORT	fastio.h	268;"	d
DIO20_WPORT	fastio.h	2832;"	d
DIO20_WPORT	fastio.h	3501;"	d
DIO20_WPORT	fastio.h	606;"	d
DIO21_DDR	fastio.h	1121;"	d
DIO21_DDR	fastio.h	2196;"	d
DIO21_DDR	fastio.h	275;"	d
DIO21_DDR	fastio.h	2840;"	d
DIO21_DDR	fastio.h	3508;"	d
DIO21_DDR	fastio.h	613;"	d
DIO21_PIN	fastio.h	1118;"	d
DIO21_PIN	fastio.h	2192;"	d
DIO21_PIN	fastio.h	272;"	d
DIO21_PIN	fastio.h	2836;"	d
DIO21_PIN	fastio.h	3505;"	d
DIO21_PIN	fastio.h	610;"	d
DIO21_PWM	fastio.h	1122;"	d
DIO21_PWM	fastio.h	2195;"	d
DIO21_PWM	fastio.h	276;"	d
DIO21_PWM	fastio.h	2839;"	d
DIO21_PWM	fastio.h	3509;"	d
DIO21_PWM	fastio.h	614;"	d
DIO21_RPORT	fastio.h	1119;"	d
DIO21_RPORT	fastio.h	2193;"	d
DIO21_RPORT	fastio.h	273;"	d
DIO21_RPORT	fastio.h	2837;"	d
DIO21_RPORT	fastio.h	3506;"	d
DIO21_RPORT	fastio.h	611;"	d
DIO21_WPORT	fastio.h	1120;"	d
DIO21_WPORT	fastio.h	2194;"	d
DIO21_WPORT	fastio.h	274;"	d
DIO21_WPORT	fastio.h	2838;"	d
DIO21_WPORT	fastio.h	3507;"	d
DIO21_WPORT	fastio.h	612;"	d
DIO22_DDR	fastio.h	1127;"	d
DIO22_DDR	fastio.h	2202;"	d
DIO22_DDR	fastio.h	2846;"	d
DIO22_DDR	fastio.h	3514;"	d
DIO22_DDR	fastio.h	619;"	d
DIO22_PIN	fastio.h	1124;"	d
DIO22_PIN	fastio.h	2198;"	d
DIO22_PIN	fastio.h	2842;"	d
DIO22_PIN	fastio.h	3511;"	d
DIO22_PIN	fastio.h	616;"	d
DIO22_PWM	fastio.h	1128;"	d
DIO22_PWM	fastio.h	2201;"	d
DIO22_PWM	fastio.h	2845;"	d
DIO22_PWM	fastio.h	3515;"	d
DIO22_PWM	fastio.h	620;"	d
DIO22_RPORT	fastio.h	1125;"	d
DIO22_RPORT	fastio.h	2199;"	d
DIO22_RPORT	fastio.h	2843;"	d
DIO22_RPORT	fastio.h	3512;"	d
DIO22_RPORT	fastio.h	617;"	d
DIO22_WPORT	fastio.h	1126;"	d
DIO22_WPORT	fastio.h	2200;"	d
DIO22_WPORT	fastio.h	2844;"	d
DIO22_WPORT	fastio.h	3513;"	d
DIO22_WPORT	fastio.h	618;"	d
DIO23_DDR	fastio.h	1133;"	d
DIO23_DDR	fastio.h	2208;"	d
DIO23_DDR	fastio.h	2852;"	d
DIO23_DDR	fastio.h	3520;"	d
DIO23_DDR	fastio.h	625;"	d
DIO23_PIN	fastio.h	1130;"	d
DIO23_PIN	fastio.h	2204;"	d
DIO23_PIN	fastio.h	2848;"	d
DIO23_PIN	fastio.h	3517;"	d
DIO23_PIN	fastio.h	622;"	d
DIO23_PWM	fastio.h	1134;"	d
DIO23_PWM	fastio.h	2207;"	d
DIO23_PWM	fastio.h	2851;"	d
DIO23_PWM	fastio.h	3521;"	d
DIO23_PWM	fastio.h	626;"	d
DIO23_RPORT	fastio.h	1131;"	d
DIO23_RPORT	fastio.h	2205;"	d
DIO23_RPORT	fastio.h	2849;"	d
DIO23_RPORT	fastio.h	3518;"	d
DIO23_RPORT	fastio.h	623;"	d
DIO23_WPORT	fastio.h	1132;"	d
DIO23_WPORT	fastio.h	2206;"	d
DIO23_WPORT	fastio.h	2850;"	d
DIO23_WPORT	fastio.h	3519;"	d
DIO23_WPORT	fastio.h	624;"	d
DIO24_DDR	fastio.h	1139;"	d
DIO24_DDR	fastio.h	2214;"	d
DIO24_DDR	fastio.h	2858;"	d
DIO24_DDR	fastio.h	3526;"	d
DIO24_DDR	fastio.h	631;"	d
DIO24_PIN	fastio.h	1136;"	d
DIO24_PIN	fastio.h	2210;"	d
DIO24_PIN	fastio.h	2854;"	d
DIO24_PIN	fastio.h	3523;"	d
DIO24_PIN	fastio.h	628;"	d
DIO24_PWM	fastio.h	1140;"	d
DIO24_PWM	fastio.h	2213;"	d
DIO24_PWM	fastio.h	2857;"	d
DIO24_PWM	fastio.h	3527;"	d
DIO24_PWM	fastio.h	632;"	d
DIO24_RPORT	fastio.h	1137;"	d
DIO24_RPORT	fastio.h	2211;"	d
DIO24_RPORT	fastio.h	2855;"	d
DIO24_RPORT	fastio.h	3524;"	d
DIO24_RPORT	fastio.h	629;"	d
DIO24_WPORT	fastio.h	1138;"	d
DIO24_WPORT	fastio.h	2212;"	d
DIO24_WPORT	fastio.h	2856;"	d
DIO24_WPORT	fastio.h	3525;"	d
DIO24_WPORT	fastio.h	630;"	d
DIO25_DDR	fastio.h	1145;"	d
DIO25_DDR	fastio.h	2220;"	d
DIO25_DDR	fastio.h	2864;"	d
DIO25_DDR	fastio.h	3532;"	d
DIO25_DDR	fastio.h	637;"	d
DIO25_PIN	fastio.h	1142;"	d
DIO25_PIN	fastio.h	2216;"	d
DIO25_PIN	fastio.h	2860;"	d
DIO25_PIN	fastio.h	3529;"	d
DIO25_PIN	fastio.h	634;"	d
DIO25_PWM	fastio.h	1146;"	d
DIO25_PWM	fastio.h	2219;"	d
DIO25_PWM	fastio.h	2863;"	d
DIO25_PWM	fastio.h	3533;"	d
DIO25_PWM	fastio.h	638;"	d
DIO25_RPORT	fastio.h	1143;"	d
DIO25_RPORT	fastio.h	2217;"	d
DIO25_RPORT	fastio.h	2861;"	d
DIO25_RPORT	fastio.h	3530;"	d
DIO25_RPORT	fastio.h	635;"	d
DIO25_WPORT	fastio.h	1144;"	d
DIO25_WPORT	fastio.h	2218;"	d
DIO25_WPORT	fastio.h	2862;"	d
DIO25_WPORT	fastio.h	3531;"	d
DIO25_WPORT	fastio.h	636;"	d
DIO26_DDR	fastio.h	1151;"	d
DIO26_DDR	fastio.h	2226;"	d
DIO26_DDR	fastio.h	2870;"	d
DIO26_DDR	fastio.h	3538;"	d
DIO26_DDR	fastio.h	643;"	d
DIO26_PIN	fastio.h	1148;"	d
DIO26_PIN	fastio.h	2222;"	d
DIO26_PIN	fastio.h	2866;"	d
DIO26_PIN	fastio.h	3535;"	d
DIO26_PIN	fastio.h	640;"	d
DIO26_PWM	fastio.h	1152;"	d
DIO26_PWM	fastio.h	2225;"	d
DIO26_PWM	fastio.h	2869;"	d
DIO26_PWM	fastio.h	3539;"	d
DIO26_PWM	fastio.h	644;"	d
DIO26_RPORT	fastio.h	1149;"	d
DIO26_RPORT	fastio.h	2223;"	d
DIO26_RPORT	fastio.h	2867;"	d
DIO26_RPORT	fastio.h	3536;"	d
DIO26_RPORT	fastio.h	641;"	d
DIO26_WPORT	fastio.h	1150;"	d
DIO26_WPORT	fastio.h	2224;"	d
DIO26_WPORT	fastio.h	2868;"	d
DIO26_WPORT	fastio.h	3537;"	d
DIO26_WPORT	fastio.h	642;"	d
DIO27_DDR	fastio.h	1157;"	d
DIO27_DDR	fastio.h	2232;"	d
DIO27_DDR	fastio.h	2876;"	d
DIO27_DDR	fastio.h	3544;"	d
DIO27_DDR	fastio.h	649;"	d
DIO27_PIN	fastio.h	1154;"	d
DIO27_PIN	fastio.h	2228;"	d
DIO27_PIN	fastio.h	2872;"	d
DIO27_PIN	fastio.h	3541;"	d
DIO27_PIN	fastio.h	646;"	d
DIO27_PWM	fastio.h	1158;"	d
DIO27_PWM	fastio.h	2231;"	d
DIO27_PWM	fastio.h	2875;"	d
DIO27_PWM	fastio.h	3545;"	d
DIO27_PWM	fastio.h	650;"	d
DIO27_RPORT	fastio.h	1155;"	d
DIO27_RPORT	fastio.h	2229;"	d
DIO27_RPORT	fastio.h	2873;"	d
DIO27_RPORT	fastio.h	3542;"	d
DIO27_RPORT	fastio.h	647;"	d
DIO27_WPORT	fastio.h	1156;"	d
DIO27_WPORT	fastio.h	2230;"	d
DIO27_WPORT	fastio.h	2874;"	d
DIO27_WPORT	fastio.h	3543;"	d
DIO27_WPORT	fastio.h	648;"	d
DIO28_DDR	fastio.h	1163;"	d
DIO28_DDR	fastio.h	2238;"	d
DIO28_DDR	fastio.h	2882;"	d
DIO28_DDR	fastio.h	3550;"	d
DIO28_DDR	fastio.h	655;"	d
DIO28_PIN	fastio.h	1160;"	d
DIO28_PIN	fastio.h	2234;"	d
DIO28_PIN	fastio.h	2878;"	d
DIO28_PIN	fastio.h	3547;"	d
DIO28_PIN	fastio.h	652;"	d
DIO28_PWM	fastio.h	1164;"	d
DIO28_PWM	fastio.h	2237;"	d
DIO28_PWM	fastio.h	2881;"	d
DIO28_PWM	fastio.h	3551;"	d
DIO28_PWM	fastio.h	656;"	d
DIO28_RPORT	fastio.h	1161;"	d
DIO28_RPORT	fastio.h	2235;"	d
DIO28_RPORT	fastio.h	2879;"	d
DIO28_RPORT	fastio.h	3548;"	d
DIO28_RPORT	fastio.h	653;"	d
DIO28_WPORT	fastio.h	1162;"	d
DIO28_WPORT	fastio.h	2236;"	d
DIO28_WPORT	fastio.h	2880;"	d
DIO28_WPORT	fastio.h	3549;"	d
DIO28_WPORT	fastio.h	654;"	d
DIO29_DDR	fastio.h	1169;"	d
DIO29_DDR	fastio.h	2244;"	d
DIO29_DDR	fastio.h	2888;"	d
DIO29_DDR	fastio.h	3556;"	d
DIO29_DDR	fastio.h	661;"	d
DIO29_PIN	fastio.h	1166;"	d
DIO29_PIN	fastio.h	2240;"	d
DIO29_PIN	fastio.h	2884;"	d
DIO29_PIN	fastio.h	3553;"	d
DIO29_PIN	fastio.h	658;"	d
DIO29_PWM	fastio.h	1170;"	d
DIO29_PWM	fastio.h	2243;"	d
DIO29_PWM	fastio.h	2887;"	d
DIO29_PWM	fastio.h	3557;"	d
DIO29_PWM	fastio.h	662;"	d
DIO29_RPORT	fastio.h	1167;"	d
DIO29_RPORT	fastio.h	2241;"	d
DIO29_RPORT	fastio.h	2885;"	d
DIO29_RPORT	fastio.h	3554;"	d
DIO29_RPORT	fastio.h	659;"	d
DIO29_WPORT	fastio.h	1168;"	d
DIO29_WPORT	fastio.h	2242;"	d
DIO29_WPORT	fastio.h	2886;"	d
DIO29_WPORT	fastio.h	3555;"	d
DIO29_WPORT	fastio.h	660;"	d
DIO2_DDR	fastio.h	1007;"	d
DIO2_DDR	fastio.h	160;"	d
DIO2_DDR	fastio.h	2082;"	d
DIO2_DDR	fastio.h	2726;"	d
DIO2_DDR	fastio.h	3394;"	d
DIO2_DDR	fastio.h	499;"	d
DIO2_PIN	fastio.h	1004;"	d
DIO2_PIN	fastio.h	157;"	d
DIO2_PIN	fastio.h	2078;"	d
DIO2_PIN	fastio.h	2722;"	d
DIO2_PIN	fastio.h	3391;"	d
DIO2_PIN	fastio.h	496;"	d
DIO2_PWM	fastio.h	1008;"	d
DIO2_PWM	fastio.h	161;"	d
DIO2_PWM	fastio.h	2081;"	d
DIO2_PWM	fastio.h	2725;"	d
DIO2_PWM	fastio.h	3395;"	d
DIO2_PWM	fastio.h	500;"	d
DIO2_RPORT	fastio.h	1005;"	d
DIO2_RPORT	fastio.h	158;"	d
DIO2_RPORT	fastio.h	2079;"	d
DIO2_RPORT	fastio.h	2723;"	d
DIO2_RPORT	fastio.h	3392;"	d
DIO2_RPORT	fastio.h	497;"	d
DIO2_WPORT	fastio.h	1006;"	d
DIO2_WPORT	fastio.h	159;"	d
DIO2_WPORT	fastio.h	2080;"	d
DIO2_WPORT	fastio.h	2724;"	d
DIO2_WPORT	fastio.h	3393;"	d
DIO2_WPORT	fastio.h	498;"	d
DIO30_DDR	fastio.h	1175;"	d
DIO30_DDR	fastio.h	2250;"	d
DIO30_DDR	fastio.h	2894;"	d
DIO30_DDR	fastio.h	3562;"	d
DIO30_DDR	fastio.h	667;"	d
DIO30_PIN	fastio.h	1172;"	d
DIO30_PIN	fastio.h	2246;"	d
DIO30_PIN	fastio.h	2890;"	d
DIO30_PIN	fastio.h	3559;"	d
DIO30_PIN	fastio.h	664;"	d
DIO30_PWM	fastio.h	1176;"	d
DIO30_PWM	fastio.h	2249;"	d
DIO30_PWM	fastio.h	2893;"	d
DIO30_PWM	fastio.h	3563;"	d
DIO30_PWM	fastio.h	668;"	d
DIO30_RPORT	fastio.h	1173;"	d
DIO30_RPORT	fastio.h	2247;"	d
DIO30_RPORT	fastio.h	2891;"	d
DIO30_RPORT	fastio.h	3560;"	d
DIO30_RPORT	fastio.h	665;"	d
DIO30_WPORT	fastio.h	1174;"	d
DIO30_WPORT	fastio.h	2248;"	d
DIO30_WPORT	fastio.h	2892;"	d
DIO30_WPORT	fastio.h	3561;"	d
DIO30_WPORT	fastio.h	666;"	d
DIO31_DDR	fastio.h	1181;"	d
DIO31_DDR	fastio.h	2256;"	d
DIO31_DDR	fastio.h	2900;"	d
DIO31_DDR	fastio.h	3568;"	d
DIO31_DDR	fastio.h	673;"	d
DIO31_PIN	fastio.h	1178;"	d
DIO31_PIN	fastio.h	2252;"	d
DIO31_PIN	fastio.h	2896;"	d
DIO31_PIN	fastio.h	3565;"	d
DIO31_PIN	fastio.h	670;"	d
DIO31_PWM	fastio.h	1182;"	d
DIO31_PWM	fastio.h	2255;"	d
DIO31_PWM	fastio.h	2899;"	d
DIO31_PWM	fastio.h	3569;"	d
DIO31_PWM	fastio.h	674;"	d
DIO31_RPORT	fastio.h	1179;"	d
DIO31_RPORT	fastio.h	2253;"	d
DIO31_RPORT	fastio.h	2897;"	d
DIO31_RPORT	fastio.h	3566;"	d
DIO31_RPORT	fastio.h	671;"	d
DIO31_WPORT	fastio.h	1180;"	d
DIO31_WPORT	fastio.h	2254;"	d
DIO31_WPORT	fastio.h	2898;"	d
DIO31_WPORT	fastio.h	3567;"	d
DIO31_WPORT	fastio.h	672;"	d
DIO32_DDR	fastio.h	1187;"	d
DIO32_DDR	fastio.h	2263;"	d
DIO32_DDR	fastio.h	2906;"	d
DIO32_DDR	fastio.h	3574;"	d
DIO32_PIN	fastio.h	1184;"	d
DIO32_PIN	fastio.h	2259;"	d
DIO32_PIN	fastio.h	2902;"	d
DIO32_PIN	fastio.h	3571;"	d
DIO32_PWM	fastio.h	1188;"	d
DIO32_PWM	fastio.h	2262;"	d
DIO32_PWM	fastio.h	2905;"	d
DIO32_PWM	fastio.h	3575;"	d
DIO32_RPORT	fastio.h	1185;"	d
DIO32_RPORT	fastio.h	2260;"	d
DIO32_RPORT	fastio.h	2903;"	d
DIO32_RPORT	fastio.h	3572;"	d
DIO32_WPORT	fastio.h	1186;"	d
DIO32_WPORT	fastio.h	2261;"	d
DIO32_WPORT	fastio.h	2904;"	d
DIO32_WPORT	fastio.h	3573;"	d
DIO33_DDR	fastio.h	1193;"	d
DIO33_DDR	fastio.h	2269;"	d
DIO33_DDR	fastio.h	2912;"	d
DIO33_DDR	fastio.h	3580;"	d
DIO33_PIN	fastio.h	1190;"	d
DIO33_PIN	fastio.h	2265;"	d
DIO33_PIN	fastio.h	2908;"	d
DIO33_PIN	fastio.h	3577;"	d
DIO33_PWM	fastio.h	1194;"	d
DIO33_PWM	fastio.h	2268;"	d
DIO33_PWM	fastio.h	2911;"	d
DIO33_PWM	fastio.h	3581;"	d
DIO33_RPORT	fastio.h	1191;"	d
DIO33_RPORT	fastio.h	2266;"	d
DIO33_RPORT	fastio.h	2909;"	d
DIO33_RPORT	fastio.h	3578;"	d
DIO33_WPORT	fastio.h	1192;"	d
DIO33_WPORT	fastio.h	2267;"	d
DIO33_WPORT	fastio.h	2910;"	d
DIO33_WPORT	fastio.h	3579;"	d
DIO34_DDR	fastio.h	1199;"	d
DIO34_DDR	fastio.h	2275;"	d
DIO34_DDR	fastio.h	2918;"	d
DIO34_DDR	fastio.h	3586;"	d
DIO34_PIN	fastio.h	1196;"	d
DIO34_PIN	fastio.h	2271;"	d
DIO34_PIN	fastio.h	2914;"	d
DIO34_PIN	fastio.h	3583;"	d
DIO34_PWM	fastio.h	1200;"	d
DIO34_PWM	fastio.h	2274;"	d
DIO34_PWM	fastio.h	2917;"	d
DIO34_PWM	fastio.h	3587;"	d
DIO34_RPORT	fastio.h	1197;"	d
DIO34_RPORT	fastio.h	2272;"	d
DIO34_RPORT	fastio.h	2915;"	d
DIO34_RPORT	fastio.h	3584;"	d
DIO34_WPORT	fastio.h	1198;"	d
DIO34_WPORT	fastio.h	2273;"	d
DIO34_WPORT	fastio.h	2916;"	d
DIO34_WPORT	fastio.h	3585;"	d
DIO35_DDR	fastio.h	1205;"	d
DIO35_DDR	fastio.h	2281;"	d
DIO35_DDR	fastio.h	2924;"	d
DIO35_DDR	fastio.h	3592;"	d
DIO35_PIN	fastio.h	1202;"	d
DIO35_PIN	fastio.h	2277;"	d
DIO35_PIN	fastio.h	2920;"	d
DIO35_PIN	fastio.h	3589;"	d
DIO35_PWM	fastio.h	1206;"	d
DIO35_PWM	fastio.h	2280;"	d
DIO35_PWM	fastio.h	2923;"	d
DIO35_PWM	fastio.h	3593;"	d
DIO35_RPORT	fastio.h	1203;"	d
DIO35_RPORT	fastio.h	2278;"	d
DIO35_RPORT	fastio.h	2921;"	d
DIO35_RPORT	fastio.h	3590;"	d
DIO35_WPORT	fastio.h	1204;"	d
DIO35_WPORT	fastio.h	2279;"	d
DIO35_WPORT	fastio.h	2922;"	d
DIO35_WPORT	fastio.h	3591;"	d
DIO36_DDR	fastio.h	1211;"	d
DIO36_DDR	fastio.h	2287;"	d
DIO36_DDR	fastio.h	2930;"	d
DIO36_DDR	fastio.h	3598;"	d
DIO36_PIN	fastio.h	1208;"	d
DIO36_PIN	fastio.h	2283;"	d
DIO36_PIN	fastio.h	2926;"	d
DIO36_PIN	fastio.h	3595;"	d
DIO36_PWM	fastio.h	1212;"	d
DIO36_PWM	fastio.h	2286;"	d
DIO36_PWM	fastio.h	2929;"	d
DIO36_PWM	fastio.h	3599;"	d
DIO36_RPORT	fastio.h	1209;"	d
DIO36_RPORT	fastio.h	2284;"	d
DIO36_RPORT	fastio.h	2927;"	d
DIO36_RPORT	fastio.h	3596;"	d
DIO36_WPORT	fastio.h	1210;"	d
DIO36_WPORT	fastio.h	2285;"	d
DIO36_WPORT	fastio.h	2928;"	d
DIO36_WPORT	fastio.h	3597;"	d
DIO37_DDR	fastio.h	1217;"	d
DIO37_DDR	fastio.h	2293;"	d
DIO37_DDR	fastio.h	2936;"	d
DIO37_DDR	fastio.h	3604;"	d
DIO37_PIN	fastio.h	1214;"	d
DIO37_PIN	fastio.h	2289;"	d
DIO37_PIN	fastio.h	2932;"	d
DIO37_PIN	fastio.h	3601;"	d
DIO37_PWM	fastio.h	1218;"	d
DIO37_PWM	fastio.h	2292;"	d
DIO37_PWM	fastio.h	2935;"	d
DIO37_PWM	fastio.h	3605;"	d
DIO37_RPORT	fastio.h	1215;"	d
DIO37_RPORT	fastio.h	2290;"	d
DIO37_RPORT	fastio.h	2933;"	d
DIO37_RPORT	fastio.h	3602;"	d
DIO37_WPORT	fastio.h	1216;"	d
DIO37_WPORT	fastio.h	2291;"	d
DIO37_WPORT	fastio.h	2934;"	d
DIO37_WPORT	fastio.h	3603;"	d
DIO38_DDR	fastio.h	1223;"	d
DIO38_DDR	fastio.h	2299;"	d
DIO38_DDR	fastio.h	2942;"	d
DIO38_DDR	fastio.h	3610;"	d
DIO38_PIN	fastio.h	1220;"	d
DIO38_PIN	fastio.h	2295;"	d
DIO38_PIN	fastio.h	2938;"	d
DIO38_PIN	fastio.h	3607;"	d
DIO38_PWM	fastio.h	1224;"	d
DIO38_PWM	fastio.h	2298;"	d
DIO38_PWM	fastio.h	2941;"	d
DIO38_PWM	fastio.h	3611;"	d
DIO38_RPORT	fastio.h	1221;"	d
DIO38_RPORT	fastio.h	2296;"	d
DIO38_RPORT	fastio.h	2939;"	d
DIO38_RPORT	fastio.h	3608;"	d
DIO38_WPORT	fastio.h	1222;"	d
DIO38_WPORT	fastio.h	2297;"	d
DIO38_WPORT	fastio.h	2940;"	d
DIO38_WPORT	fastio.h	3609;"	d
DIO39_DDR	fastio.h	1229;"	d
DIO39_DDR	fastio.h	2305;"	d
DIO39_DDR	fastio.h	2948;"	d
DIO39_DDR	fastio.h	3616;"	d
DIO39_PIN	fastio.h	1226;"	d
DIO39_PIN	fastio.h	2301;"	d
DIO39_PIN	fastio.h	2944;"	d
DIO39_PIN	fastio.h	3613;"	d
DIO39_PWM	fastio.h	1230;"	d
DIO39_PWM	fastio.h	2304;"	d
DIO39_PWM	fastio.h	2947;"	d
DIO39_PWM	fastio.h	3617;"	d
DIO39_RPORT	fastio.h	1227;"	d
DIO39_RPORT	fastio.h	2302;"	d
DIO39_RPORT	fastio.h	2945;"	d
DIO39_RPORT	fastio.h	3614;"	d
DIO39_WPORT	fastio.h	1228;"	d
DIO39_WPORT	fastio.h	2303;"	d
DIO39_WPORT	fastio.h	2946;"	d
DIO39_WPORT	fastio.h	3615;"	d
DIO3_DDR	fastio.h	1013;"	d
DIO3_DDR	fastio.h	166;"	d
DIO3_DDR	fastio.h	2088;"	d
DIO3_DDR	fastio.h	2732;"	d
DIO3_DDR	fastio.h	3400;"	d
DIO3_DDR	fastio.h	505;"	d
DIO3_PIN	fastio.h	1010;"	d
DIO3_PIN	fastio.h	163;"	d
DIO3_PIN	fastio.h	2084;"	d
DIO3_PIN	fastio.h	2728;"	d
DIO3_PIN	fastio.h	3397;"	d
DIO3_PIN	fastio.h	502;"	d
DIO3_PWM	fastio.h	1014;"	d
DIO3_PWM	fastio.h	167;"	d
DIO3_PWM	fastio.h	2087;"	d
DIO3_PWM	fastio.h	2731;"	d
DIO3_PWM	fastio.h	3401;"	d
DIO3_PWM	fastio.h	506;"	d
DIO3_RPORT	fastio.h	1011;"	d
DIO3_RPORT	fastio.h	164;"	d
DIO3_RPORT	fastio.h	2085;"	d
DIO3_RPORT	fastio.h	2729;"	d
DIO3_RPORT	fastio.h	3398;"	d
DIO3_RPORT	fastio.h	503;"	d
DIO3_WPORT	fastio.h	1012;"	d
DIO3_WPORT	fastio.h	165;"	d
DIO3_WPORT	fastio.h	2086;"	d
DIO3_WPORT	fastio.h	2730;"	d
DIO3_WPORT	fastio.h	3399;"	d
DIO3_WPORT	fastio.h	504;"	d
DIO40_DDR	fastio.h	1235;"	d
DIO40_DDR	fastio.h	2359;"	d
DIO40_DDR	fastio.h	2954;"	d
DIO40_DDR	fastio.h	3622;"	d
DIO40_PIN	fastio.h	1232;"	d
DIO40_PIN	fastio.h	2355;"	d
DIO40_PIN	fastio.h	2950;"	d
DIO40_PIN	fastio.h	3619;"	d
DIO40_PWM	fastio.h	1236;"	d
DIO40_PWM	fastio.h	2358;"	d
DIO40_PWM	fastio.h	2953;"	d
DIO40_PWM	fastio.h	3623;"	d
DIO40_RPORT	fastio.h	1233;"	d
DIO40_RPORT	fastio.h	2356;"	d
DIO40_RPORT	fastio.h	2951;"	d
DIO40_RPORT	fastio.h	3620;"	d
DIO40_WPORT	fastio.h	1234;"	d
DIO40_WPORT	fastio.h	2357;"	d
DIO40_WPORT	fastio.h	2952;"	d
DIO40_WPORT	fastio.h	3621;"	d
DIO41_DDR	fastio.h	1241;"	d
DIO41_DDR	fastio.h	2365;"	d
DIO41_DDR	fastio.h	2960;"	d
DIO41_DDR	fastio.h	3628;"	d
DIO41_PIN	fastio.h	1238;"	d
DIO41_PIN	fastio.h	2361;"	d
DIO41_PIN	fastio.h	2956;"	d
DIO41_PIN	fastio.h	3625;"	d
DIO41_PWM	fastio.h	1242;"	d
DIO41_PWM	fastio.h	2364;"	d
DIO41_PWM	fastio.h	2959;"	d
DIO41_PWM	fastio.h	3629;"	d
DIO41_RPORT	fastio.h	1239;"	d
DIO41_RPORT	fastio.h	2362;"	d
DIO41_RPORT	fastio.h	2957;"	d
DIO41_RPORT	fastio.h	3626;"	d
DIO41_WPORT	fastio.h	1240;"	d
DIO41_WPORT	fastio.h	2363;"	d
DIO41_WPORT	fastio.h	2958;"	d
DIO41_WPORT	fastio.h	3627;"	d
DIO42_DDR	fastio.h	1247;"	d
DIO42_DDR	fastio.h	2371;"	d
DIO42_DDR	fastio.h	2966;"	d
DIO42_DDR	fastio.h	3634;"	d
DIO42_PIN	fastio.h	1244;"	d
DIO42_PIN	fastio.h	2367;"	d
DIO42_PIN	fastio.h	2962;"	d
DIO42_PIN	fastio.h	3631;"	d
DIO42_PWM	fastio.h	1248;"	d
DIO42_PWM	fastio.h	2370;"	d
DIO42_PWM	fastio.h	2965;"	d
DIO42_PWM	fastio.h	3635;"	d
DIO42_RPORT	fastio.h	1245;"	d
DIO42_RPORT	fastio.h	2368;"	d
DIO42_RPORT	fastio.h	2963;"	d
DIO42_RPORT	fastio.h	3632;"	d
DIO42_WPORT	fastio.h	1246;"	d
DIO42_WPORT	fastio.h	2369;"	d
DIO42_WPORT	fastio.h	2964;"	d
DIO42_WPORT	fastio.h	3633;"	d
DIO43_DDR	fastio.h	1253;"	d
DIO43_DDR	fastio.h	2377;"	d
DIO43_DDR	fastio.h	2972;"	d
DIO43_DDR	fastio.h	3640;"	d
DIO43_PIN	fastio.h	1250;"	d
DIO43_PIN	fastio.h	2373;"	d
DIO43_PIN	fastio.h	2968;"	d
DIO43_PIN	fastio.h	3637;"	d
DIO43_PWM	fastio.h	1254;"	d
DIO43_PWM	fastio.h	2376;"	d
DIO43_PWM	fastio.h	2971;"	d
DIO43_PWM	fastio.h	3641;"	d
DIO43_RPORT	fastio.h	1251;"	d
DIO43_RPORT	fastio.h	2374;"	d
DIO43_RPORT	fastio.h	2969;"	d
DIO43_RPORT	fastio.h	3638;"	d
DIO43_WPORT	fastio.h	1252;"	d
DIO43_WPORT	fastio.h	2375;"	d
DIO43_WPORT	fastio.h	2970;"	d
DIO43_WPORT	fastio.h	3639;"	d
DIO44_DDR	fastio.h	1259;"	d
DIO44_DDR	fastio.h	2383;"	d
DIO44_DDR	fastio.h	2978;"	d
DIO44_DDR	fastio.h	3646;"	d
DIO44_PIN	fastio.h	1256;"	d
DIO44_PIN	fastio.h	2379;"	d
DIO44_PIN	fastio.h	2974;"	d
DIO44_PIN	fastio.h	3643;"	d
DIO44_PWM	fastio.h	1260;"	d
DIO44_PWM	fastio.h	2382;"	d
DIO44_PWM	fastio.h	2977;"	d
DIO44_PWM	fastio.h	3647;"	d
DIO44_RPORT	fastio.h	1257;"	d
DIO44_RPORT	fastio.h	2380;"	d
DIO44_RPORT	fastio.h	2975;"	d
DIO44_RPORT	fastio.h	3644;"	d
DIO44_WPORT	fastio.h	1258;"	d
DIO44_WPORT	fastio.h	2381;"	d
DIO44_WPORT	fastio.h	2976;"	d
DIO44_WPORT	fastio.h	3645;"	d
DIO45_DDR	fastio.h	1265;"	d
DIO45_DDR	fastio.h	2389;"	d
DIO45_DDR	fastio.h	2984;"	d
DIO45_DDR	fastio.h	3652;"	d
DIO45_PIN	fastio.h	1262;"	d
DIO45_PIN	fastio.h	2385;"	d
DIO45_PIN	fastio.h	2980;"	d
DIO45_PIN	fastio.h	3649;"	d
DIO45_PWM	fastio.h	1266;"	d
DIO45_PWM	fastio.h	2388;"	d
DIO45_PWM	fastio.h	2983;"	d
DIO45_PWM	fastio.h	3653;"	d
DIO45_RPORT	fastio.h	1263;"	d
DIO45_RPORT	fastio.h	2386;"	d
DIO45_RPORT	fastio.h	2981;"	d
DIO45_RPORT	fastio.h	3650;"	d
DIO45_WPORT	fastio.h	1264;"	d
DIO45_WPORT	fastio.h	2387;"	d
DIO45_WPORT	fastio.h	2982;"	d
DIO45_WPORT	fastio.h	3651;"	d
DIO46_DDR	fastio.h	1271;"	d
DIO46_DDR	fastio.h	2395;"	d
DIO46_DDR	fastio.h	3040;"	d
DIO46_DDR	fastio.h	3658;"	d
DIO46_PIN	fastio.h	1268;"	d
DIO46_PIN	fastio.h	2391;"	d
DIO46_PIN	fastio.h	3036;"	d
DIO46_PIN	fastio.h	3655;"	d
DIO46_PWM	fastio.h	1272;"	d
DIO46_PWM	fastio.h	2394;"	d
DIO46_PWM	fastio.h	3039;"	d
DIO46_PWM	fastio.h	3659;"	d
DIO46_RPORT	fastio.h	1269;"	d
DIO46_RPORT	fastio.h	2392;"	d
DIO46_RPORT	fastio.h	3037;"	d
DIO46_RPORT	fastio.h	3656;"	d
DIO46_WPORT	fastio.h	1270;"	d
DIO46_WPORT	fastio.h	2393;"	d
DIO46_WPORT	fastio.h	3038;"	d
DIO46_WPORT	fastio.h	3657;"	d
DIO47_DDR	fastio.h	1277;"	d
DIO47_DDR	fastio.h	2401;"	d
DIO47_DDR	fastio.h	3046;"	d
DIO47_DDR	fastio.h	3664;"	d
DIO47_PIN	fastio.h	1274;"	d
DIO47_PIN	fastio.h	2397;"	d
DIO47_PIN	fastio.h	3042;"	d
DIO47_PIN	fastio.h	3661;"	d
DIO47_PWM	fastio.h	1278;"	d
DIO47_PWM	fastio.h	2400;"	d
DIO47_PWM	fastio.h	3045;"	d
DIO47_PWM	fastio.h	3665;"	d
DIO47_RPORT	fastio.h	1275;"	d
DIO47_RPORT	fastio.h	2398;"	d
DIO47_RPORT	fastio.h	3043;"	d
DIO47_RPORT	fastio.h	3662;"	d
DIO47_WPORT	fastio.h	1276;"	d
DIO47_WPORT	fastio.h	2399;"	d
DIO47_WPORT	fastio.h	3044;"	d
DIO47_WPORT	fastio.h	3663;"	d
DIO48_DDR	fastio.h	1283;"	d
DIO48_DDR	fastio.h	3670;"	d
DIO48_PIN	fastio.h	1280;"	d
DIO48_PIN	fastio.h	3667;"	d
DIO48_PWM	fastio.h	1284;"	d
DIO48_PWM	fastio.h	3671;"	d
DIO48_RPORT	fastio.h	1281;"	d
DIO48_RPORT	fastio.h	3668;"	d
DIO48_WPORT	fastio.h	1282;"	d
DIO48_WPORT	fastio.h	3669;"	d
DIO49_DDR	fastio.h	1289;"	d
DIO49_DDR	fastio.h	3676;"	d
DIO49_PIN	fastio.h	1286;"	d
DIO49_PIN	fastio.h	3673;"	d
DIO49_PWM	fastio.h	1290;"	d
DIO49_PWM	fastio.h	3677;"	d
DIO49_RPORT	fastio.h	1287;"	d
DIO49_RPORT	fastio.h	3674;"	d
DIO49_WPORT	fastio.h	1288;"	d
DIO49_WPORT	fastio.h	3675;"	d
DIO4_DDR	fastio.h	1019;"	d
DIO4_DDR	fastio.h	172;"	d
DIO4_DDR	fastio.h	2094;"	d
DIO4_DDR	fastio.h	2738;"	d
DIO4_DDR	fastio.h	3406;"	d
DIO4_DDR	fastio.h	511;"	d
DIO4_PIN	fastio.h	1016;"	d
DIO4_PIN	fastio.h	169;"	d
DIO4_PIN	fastio.h	2090;"	d
DIO4_PIN	fastio.h	2734;"	d
DIO4_PIN	fastio.h	3403;"	d
DIO4_PIN	fastio.h	508;"	d
DIO4_PWM	fastio.h	1020;"	d
DIO4_PWM	fastio.h	173;"	d
DIO4_PWM	fastio.h	2093;"	d
DIO4_PWM	fastio.h	2737;"	d
DIO4_PWM	fastio.h	3407;"	d
DIO4_PWM	fastio.h	512;"	d
DIO4_RPORT	fastio.h	1017;"	d
DIO4_RPORT	fastio.h	170;"	d
DIO4_RPORT	fastio.h	2091;"	d
DIO4_RPORT	fastio.h	2735;"	d
DIO4_RPORT	fastio.h	3404;"	d
DIO4_RPORT	fastio.h	509;"	d
DIO4_WPORT	fastio.h	1018;"	d
DIO4_WPORT	fastio.h	171;"	d
DIO4_WPORT	fastio.h	2092;"	d
DIO4_WPORT	fastio.h	2736;"	d
DIO4_WPORT	fastio.h	3405;"	d
DIO4_WPORT	fastio.h	510;"	d
DIO50_DDR	fastio.h	1295;"	d
DIO50_DDR	fastio.h	3682;"	d
DIO50_PIN	fastio.h	1292;"	d
DIO50_PIN	fastio.h	3679;"	d
DIO50_PWM	fastio.h	1296;"	d
DIO50_PWM	fastio.h	3683;"	d
DIO50_RPORT	fastio.h	1293;"	d
DIO50_RPORT	fastio.h	3680;"	d
DIO50_WPORT	fastio.h	1294;"	d
DIO50_WPORT	fastio.h	3681;"	d
DIO51_DDR	fastio.h	1301;"	d
DIO51_DDR	fastio.h	3688;"	d
DIO51_PIN	fastio.h	1298;"	d
DIO51_PIN	fastio.h	3685;"	d
DIO51_PWM	fastio.h	1302;"	d
DIO51_PWM	fastio.h	3689;"	d
DIO51_RPORT	fastio.h	1299;"	d
DIO51_RPORT	fastio.h	3686;"	d
DIO51_WPORT	fastio.h	1300;"	d
DIO51_WPORT	fastio.h	3687;"	d
DIO52_DDR	fastio.h	1307;"	d
DIO52_DDR	fastio.h	3694;"	d
DIO52_PIN	fastio.h	1304;"	d
DIO52_PIN	fastio.h	3691;"	d
DIO52_PWM	fastio.h	1308;"	d
DIO52_PWM	fastio.h	3695;"	d
DIO52_RPORT	fastio.h	1305;"	d
DIO52_RPORT	fastio.h	3692;"	d
DIO52_WPORT	fastio.h	1306;"	d
DIO52_WPORT	fastio.h	3693;"	d
DIO53_DDR	fastio.h	1313;"	d
DIO53_DDR	fastio.h	3700;"	d
DIO53_PIN	fastio.h	1310;"	d
DIO53_PIN	fastio.h	3697;"	d
DIO53_PWM	fastio.h	1314;"	d
DIO53_PWM	fastio.h	3701;"	d
DIO53_RPORT	fastio.h	1311;"	d
DIO53_RPORT	fastio.h	3698;"	d
DIO53_WPORT	fastio.h	1312;"	d
DIO53_WPORT	fastio.h	3699;"	d
DIO54_DDR	fastio.h	1319;"	d
DIO54_PIN	fastio.h	1316;"	d
DIO54_PWM	fastio.h	1320;"	d
DIO54_RPORT	fastio.h	1317;"	d
DIO54_WPORT	fastio.h	1318;"	d
DIO55_DDR	fastio.h	1325;"	d
DIO55_PIN	fastio.h	1322;"	d
DIO55_PWM	fastio.h	1326;"	d
DIO55_RPORT	fastio.h	1323;"	d
DIO55_WPORT	fastio.h	1324;"	d
DIO56_DDR	fastio.h	1331;"	d
DIO56_PIN	fastio.h	1328;"	d
DIO56_PWM	fastio.h	1332;"	d
DIO56_RPORT	fastio.h	1329;"	d
DIO56_WPORT	fastio.h	1330;"	d
DIO57_DDR	fastio.h	1337;"	d
DIO57_PIN	fastio.h	1334;"	d
DIO57_PWM	fastio.h	1338;"	d
DIO57_RPORT	fastio.h	1335;"	d
DIO57_WPORT	fastio.h	1336;"	d
DIO58_DDR	fastio.h	1343;"	d
DIO58_PIN	fastio.h	1340;"	d
DIO58_PWM	fastio.h	1344;"	d
DIO58_RPORT	fastio.h	1341;"	d
DIO58_WPORT	fastio.h	1342;"	d
DIO59_DDR	fastio.h	1349;"	d
DIO59_PIN	fastio.h	1346;"	d
DIO59_PWM	fastio.h	1350;"	d
DIO59_RPORT	fastio.h	1347;"	d
DIO59_WPORT	fastio.h	1348;"	d
DIO5_DDR	fastio.h	1025;"	d
DIO5_DDR	fastio.h	178;"	d
DIO5_DDR	fastio.h	2100;"	d
DIO5_DDR	fastio.h	2744;"	d
DIO5_DDR	fastio.h	3412;"	d
DIO5_DDR	fastio.h	517;"	d
DIO5_PIN	fastio.h	1022;"	d
DIO5_PIN	fastio.h	175;"	d
DIO5_PIN	fastio.h	2096;"	d
DIO5_PIN	fastio.h	2740;"	d
DIO5_PIN	fastio.h	3409;"	d
DIO5_PIN	fastio.h	514;"	d
DIO5_PWM	fastio.h	1026;"	d
DIO5_PWM	fastio.h	179;"	d
DIO5_PWM	fastio.h	2099;"	d
DIO5_PWM	fastio.h	2743;"	d
DIO5_PWM	fastio.h	3413;"	d
DIO5_PWM	fastio.h	518;"	d
DIO5_RPORT	fastio.h	1023;"	d
DIO5_RPORT	fastio.h	176;"	d
DIO5_RPORT	fastio.h	2097;"	d
DIO5_RPORT	fastio.h	2741;"	d
DIO5_RPORT	fastio.h	3410;"	d
DIO5_RPORT	fastio.h	515;"	d
DIO5_WPORT	fastio.h	1024;"	d
DIO5_WPORT	fastio.h	177;"	d
DIO5_WPORT	fastio.h	2098;"	d
DIO5_WPORT	fastio.h	2742;"	d
DIO5_WPORT	fastio.h	3411;"	d
DIO5_WPORT	fastio.h	516;"	d
DIO60_DDR	fastio.h	1355;"	d
DIO60_PIN	fastio.h	1352;"	d
DIO60_PWM	fastio.h	1356;"	d
DIO60_RPORT	fastio.h	1353;"	d
DIO60_WPORT	fastio.h	1354;"	d
DIO61_DDR	fastio.h	1361;"	d
DIO61_PIN	fastio.h	1358;"	d
DIO61_PWM	fastio.h	1362;"	d
DIO61_RPORT	fastio.h	1359;"	d
DIO61_WPORT	fastio.h	1360;"	d
DIO62_DDR	fastio.h	1367;"	d
DIO62_PIN	fastio.h	1364;"	d
DIO62_PWM	fastio.h	1368;"	d
DIO62_RPORT	fastio.h	1365;"	d
DIO62_WPORT	fastio.h	1366;"	d
DIO63_DDR	fastio.h	1373;"	d
DIO63_PIN	fastio.h	1370;"	d
DIO63_PWM	fastio.h	1374;"	d
DIO63_RPORT	fastio.h	1371;"	d
DIO63_WPORT	fastio.h	1372;"	d
DIO64_DDR	fastio.h	1379;"	d
DIO64_PIN	fastio.h	1376;"	d
DIO64_PWM	fastio.h	1380;"	d
DIO64_RPORT	fastio.h	1377;"	d
DIO64_WPORT	fastio.h	1378;"	d
DIO65_DDR	fastio.h	1385;"	d
DIO65_PIN	fastio.h	1382;"	d
DIO65_PWM	fastio.h	1386;"	d
DIO65_RPORT	fastio.h	1383;"	d
DIO65_WPORT	fastio.h	1384;"	d
DIO66_DDR	fastio.h	1391;"	d
DIO66_PIN	fastio.h	1388;"	d
DIO66_PWM	fastio.h	1392;"	d
DIO66_RPORT	fastio.h	1389;"	d
DIO66_WPORT	fastio.h	1390;"	d
DIO67_DDR	fastio.h	1397;"	d
DIO67_PIN	fastio.h	1394;"	d
DIO67_PWM	fastio.h	1398;"	d
DIO67_RPORT	fastio.h	1395;"	d
DIO67_WPORT	fastio.h	1396;"	d
DIO68_DDR	fastio.h	1403;"	d
DIO68_PIN	fastio.h	1400;"	d
DIO68_PWM	fastio.h	1404;"	d
DIO68_RPORT	fastio.h	1401;"	d
DIO68_WPORT	fastio.h	1402;"	d
DIO69_DDR	fastio.h	1409;"	d
DIO69_PIN	fastio.h	1406;"	d
DIO69_PWM	fastio.h	1410;"	d
DIO69_RPORT	fastio.h	1407;"	d
DIO69_WPORT	fastio.h	1408;"	d
DIO6_DDR	fastio.h	1031;"	d
DIO6_DDR	fastio.h	184;"	d
DIO6_DDR	fastio.h	2106;"	d
DIO6_DDR	fastio.h	2750;"	d
DIO6_DDR	fastio.h	3418;"	d
DIO6_DDR	fastio.h	523;"	d
DIO6_PIN	fastio.h	1028;"	d
DIO6_PIN	fastio.h	181;"	d
DIO6_PIN	fastio.h	2102;"	d
DIO6_PIN	fastio.h	2746;"	d
DIO6_PIN	fastio.h	3415;"	d
DIO6_PIN	fastio.h	520;"	d
DIO6_PWM	fastio.h	1032;"	d
DIO6_PWM	fastio.h	185;"	d
DIO6_PWM	fastio.h	2105;"	d
DIO6_PWM	fastio.h	2749;"	d
DIO6_PWM	fastio.h	3419;"	d
DIO6_PWM	fastio.h	524;"	d
DIO6_RPORT	fastio.h	1029;"	d
DIO6_RPORT	fastio.h	182;"	d
DIO6_RPORT	fastio.h	2103;"	d
DIO6_RPORT	fastio.h	2747;"	d
DIO6_RPORT	fastio.h	3416;"	d
DIO6_RPORT	fastio.h	521;"	d
DIO6_WPORT	fastio.h	1030;"	d
DIO6_WPORT	fastio.h	183;"	d
DIO6_WPORT	fastio.h	2104;"	d
DIO6_WPORT	fastio.h	2748;"	d
DIO6_WPORT	fastio.h	3417;"	d
DIO6_WPORT	fastio.h	522;"	d
DIO70_DDR	fastio.h	1415;"	d
DIO70_PIN	fastio.h	1412;"	d
DIO70_PWM	fastio.h	1416;"	d
DIO70_RPORT	fastio.h	1413;"	d
DIO70_WPORT	fastio.h	1414;"	d
DIO71_DDR	fastio.h	1421;"	d
DIO71_PIN	fastio.h	1418;"	d
DIO71_PWM	fastio.h	1422;"	d
DIO71_RPORT	fastio.h	1419;"	d
DIO71_WPORT	fastio.h	1420;"	d
DIO72_DDR	fastio.h	1427;"	d
DIO72_PIN	fastio.h	1424;"	d
DIO72_PWM	fastio.h	1428;"	d
DIO72_RPORT	fastio.h	1425;"	d
DIO72_WPORT	fastio.h	1426;"	d
DIO73_DDR	fastio.h	1433;"	d
DIO73_PIN	fastio.h	1430;"	d
DIO73_PWM	fastio.h	1434;"	d
DIO73_RPORT	fastio.h	1431;"	d
DIO73_WPORT	fastio.h	1432;"	d
DIO74_DDR	fastio.h	1439;"	d
DIO74_PIN	fastio.h	1436;"	d
DIO74_PWM	fastio.h	1440;"	d
DIO74_RPORT	fastio.h	1437;"	d
DIO74_WPORT	fastio.h	1438;"	d
DIO75_DDR	fastio.h	1445;"	d
DIO75_PIN	fastio.h	1442;"	d
DIO75_PWM	fastio.h	1446;"	d
DIO75_RPORT	fastio.h	1443;"	d
DIO75_WPORT	fastio.h	1444;"	d
DIO76_DDR	fastio.h	1451;"	d
DIO76_PIN	fastio.h	1448;"	d
DIO76_PWM	fastio.h	1452;"	d
DIO76_RPORT	fastio.h	1449;"	d
DIO76_WPORT	fastio.h	1450;"	d
DIO77_DDR	fastio.h	1457;"	d
DIO77_PIN	fastio.h	1454;"	d
DIO77_PWM	fastio.h	1458;"	d
DIO77_RPORT	fastio.h	1455;"	d
DIO77_WPORT	fastio.h	1456;"	d
DIO78_DDR	fastio.h	1463;"	d
DIO78_PIN	fastio.h	1460;"	d
DIO78_PWM	fastio.h	1464;"	d
DIO78_RPORT	fastio.h	1461;"	d
DIO78_WPORT	fastio.h	1462;"	d
DIO79_DDR	fastio.h	1469;"	d
DIO79_PIN	fastio.h	1466;"	d
DIO79_PWM	fastio.h	1470;"	d
DIO79_RPORT	fastio.h	1467;"	d
DIO79_WPORT	fastio.h	1468;"	d
DIO7_DDR	fastio.h	1037;"	d
DIO7_DDR	fastio.h	190;"	d
DIO7_DDR	fastio.h	2112;"	d
DIO7_DDR	fastio.h	2756;"	d
DIO7_DDR	fastio.h	3424;"	d
DIO7_DDR	fastio.h	529;"	d
DIO7_PIN	fastio.h	1034;"	d
DIO7_PIN	fastio.h	187;"	d
DIO7_PIN	fastio.h	2108;"	d
DIO7_PIN	fastio.h	2752;"	d
DIO7_PIN	fastio.h	3421;"	d
DIO7_PIN	fastio.h	526;"	d
DIO7_PWM	fastio.h	1038;"	d
DIO7_PWM	fastio.h	191;"	d
DIO7_PWM	fastio.h	2111;"	d
DIO7_PWM	fastio.h	2755;"	d
DIO7_PWM	fastio.h	3425;"	d
DIO7_PWM	fastio.h	530;"	d
DIO7_RPORT	fastio.h	1035;"	d
DIO7_RPORT	fastio.h	188;"	d
DIO7_RPORT	fastio.h	2109;"	d
DIO7_RPORT	fastio.h	2753;"	d
DIO7_RPORT	fastio.h	3422;"	d
DIO7_RPORT	fastio.h	527;"	d
DIO7_WPORT	fastio.h	1036;"	d
DIO7_WPORT	fastio.h	189;"	d
DIO7_WPORT	fastio.h	2110;"	d
DIO7_WPORT	fastio.h	2754;"	d
DIO7_WPORT	fastio.h	3423;"	d
DIO7_WPORT	fastio.h	528;"	d
DIO80_DDR	fastio.h	1475;"	d
DIO80_PIN	fastio.h	1472;"	d
DIO80_PWM	fastio.h	1476;"	d
DIO80_RPORT	fastio.h	1473;"	d
DIO80_WPORT	fastio.h	1474;"	d
DIO81_DDR	fastio.h	1481;"	d
DIO81_PIN	fastio.h	1478;"	d
DIO81_PWM	fastio.h	1482;"	d
DIO81_RPORT	fastio.h	1479;"	d
DIO81_WPORT	fastio.h	1480;"	d
DIO82_DDR	fastio.h	1487;"	d
DIO82_PIN	fastio.h	1484;"	d
DIO82_PWM	fastio.h	1488;"	d
DIO82_RPORT	fastio.h	1485;"	d
DIO82_WPORT	fastio.h	1486;"	d
DIO83_DDR	fastio.h	1493;"	d
DIO83_PIN	fastio.h	1490;"	d
DIO83_PWM	fastio.h	1494;"	d
DIO83_RPORT	fastio.h	1491;"	d
DIO83_WPORT	fastio.h	1492;"	d
DIO84_DDR	fastio.h	1499;"	d
DIO84_PIN	fastio.h	1496;"	d
DIO84_PWM	fastio.h	1500;"	d
DIO84_RPORT	fastio.h	1497;"	d
DIO84_WPORT	fastio.h	1498;"	d
DIO85_DDR	fastio.h	1505;"	d
DIO85_PIN	fastio.h	1502;"	d
DIO85_PWM	fastio.h	1506;"	d
DIO85_RPORT	fastio.h	1503;"	d
DIO85_WPORT	fastio.h	1504;"	d
DIO8_DDR	fastio.h	1043;"	d
DIO8_DDR	fastio.h	196;"	d
DIO8_DDR	fastio.h	2118;"	d
DIO8_DDR	fastio.h	2762;"	d
DIO8_DDR	fastio.h	3430;"	d
DIO8_DDR	fastio.h	535;"	d
DIO8_PIN	fastio.h	1040;"	d
DIO8_PIN	fastio.h	193;"	d
DIO8_PIN	fastio.h	2114;"	d
DIO8_PIN	fastio.h	2758;"	d
DIO8_PIN	fastio.h	3427;"	d
DIO8_PIN	fastio.h	532;"	d
DIO8_PWM	fastio.h	1044;"	d
DIO8_PWM	fastio.h	197;"	d
DIO8_PWM	fastio.h	2117;"	d
DIO8_PWM	fastio.h	2761;"	d
DIO8_PWM	fastio.h	3431;"	d
DIO8_PWM	fastio.h	536;"	d
DIO8_RPORT	fastio.h	1041;"	d
DIO8_RPORT	fastio.h	194;"	d
DIO8_RPORT	fastio.h	2115;"	d
DIO8_RPORT	fastio.h	2759;"	d
DIO8_RPORT	fastio.h	3428;"	d
DIO8_RPORT	fastio.h	533;"	d
DIO8_WPORT	fastio.h	1042;"	d
DIO8_WPORT	fastio.h	195;"	d
DIO8_WPORT	fastio.h	2116;"	d
DIO8_WPORT	fastio.h	2760;"	d
DIO8_WPORT	fastio.h	3429;"	d
DIO8_WPORT	fastio.h	534;"	d
DIO9_DDR	fastio.h	1049;"	d
DIO9_DDR	fastio.h	202;"	d
DIO9_DDR	fastio.h	2124;"	d
DIO9_DDR	fastio.h	2768;"	d
DIO9_DDR	fastio.h	3436;"	d
DIO9_DDR	fastio.h	541;"	d
DIO9_PIN	fastio.h	1046;"	d
DIO9_PIN	fastio.h	199;"	d
DIO9_PIN	fastio.h	2120;"	d
DIO9_PIN	fastio.h	2764;"	d
DIO9_PIN	fastio.h	3433;"	d
DIO9_PIN	fastio.h	538;"	d
DIO9_PWM	fastio.h	1050;"	d
DIO9_PWM	fastio.h	203;"	d
DIO9_PWM	fastio.h	2123;"	d
DIO9_PWM	fastio.h	2767;"	d
DIO9_PWM	fastio.h	3437;"	d
DIO9_PWM	fastio.h	542;"	d
DIO9_RPORT	fastio.h	1047;"	d
DIO9_RPORT	fastio.h	200;"	d
DIO9_RPORT	fastio.h	2121;"	d
DIO9_RPORT	fastio.h	2765;"	d
DIO9_RPORT	fastio.h	3434;"	d
DIO9_RPORT	fastio.h	539;"	d
DIO9_WPORT	fastio.h	1048;"	d
DIO9_WPORT	fastio.h	201;"	d
DIO9_WPORT	fastio.h	2122;"	d
DIO9_WPORT	fastio.h	2766;"	d
DIO9_WPORT	fastio.h	3435;"	d
DIO9_WPORT	fastio.h	540;"	d
DIR_ATT_ARCHIVE	SdFatStructs.h	/^uint8_t const DIR_ATT_ARCHIVE = 0X20;$/;"	v
DIR_ATT_DEFINED_BITS	SdFatStructs.h	/^uint8_t const DIR_ATT_DEFINED_BITS = 0X3F;$/;"	v
DIR_ATT_DIRECTORY	SdFatStructs.h	/^uint8_t const DIR_ATT_DIRECTORY = 0X10;$/;"	v
DIR_ATT_FILE_TYPE_MASK	SdFatStructs.h	/^uint8_t const DIR_ATT_FILE_TYPE_MASK = (DIR_ATT_VOLUME_ID | DIR_ATT_DIRECTORY);$/;"	v
DIR_ATT_HIDDEN	SdFatStructs.h	/^uint8_t const DIR_ATT_HIDDEN = 0X02;$/;"	v
DIR_ATT_LONG_NAME	SdFatStructs.h	/^uint8_t const DIR_ATT_LONG_NAME = 0X0F;$/;"	v
DIR_ATT_LONG_NAME_MASK	SdFatStructs.h	/^uint8_t const DIR_ATT_LONG_NAME_MASK = 0X3F;$/;"	v
DIR_ATT_READ_ONLY	SdFatStructs.h	/^uint8_t const DIR_ATT_READ_ONLY = 0X01;$/;"	v
DIR_ATT_SYSTEM	SdFatStructs.h	/^uint8_t const DIR_ATT_SYSTEM = 0X04;$/;"	v
DIR_ATT_VOLUME_ID	SdFatStructs.h	/^uint8_t const DIR_ATT_VOLUME_ID = 0X08;$/;"	v
DIR_IS_FILE	SdFatStructs.h	/^static inline uint8_t DIR_IS_FILE(const dir_t* dir) {$/;"	f
DIR_IS_FILE_OR_SUBDIR	SdFatStructs.h	/^static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {$/;"	f
DIR_IS_LONG_NAME	SdFatStructs.h	/^static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {$/;"	f
DIR_IS_SUBDIR	SdFatStructs.h	/^static inline uint8_t DIR_IS_SUBDIR(const dir_t* dir) {$/;"	f
DIR_NAME_0XE5	SdFatStructs.h	/^uint8_t const DIR_NAME_0XE5 = 0X05;$/;"	v
DIR_NAME_DELETED	SdFatStructs.h	/^uint8_t const DIR_NAME_DELETED = 0XE5;$/;"	v
DIR_NAME_FREE	SdFatStructs.h	/^uint8_t const DIR_NAME_FREE = 0X00;$/;"	v
DISABLED	macros.h	52;"	d
DISABLE_E	Configuration.h	391;"	d
DISABLE_HEATER	temperature.cpp	1271;"	d	file:
DISABLE_INACTIVE_E	Conditionals.h	452;"	d
DISABLE_INACTIVE_E	Configuration_adv.h	293;"	d
DISABLE_INACTIVE_EXTRUDER	Configuration.h	392;"	d
DISABLE_INACTIVE_X	Conditionals.h	443;"	d
DISABLE_INACTIVE_X	Configuration_adv.h	290;"	d
DISABLE_INACTIVE_Y	Conditionals.h	446;"	d
DISABLE_INACTIVE_Y	Configuration_adv.h	291;"	d
DISABLE_INACTIVE_Z	Conditionals.h	449;"	d
DISABLE_INACTIVE_Z	Configuration_adv.h	292;"	d
DISABLE_STEPPER_DRIVER_INTERRUPT	stepper.cpp	282;"	d	file:
DISABLE_X	Configuration.h	383;"	d
DISABLE_Y	Configuration.h	384;"	d
DISABLE_Z	Configuration.h	385;"	d
DISPLAY_CHARSET_HD44780_JAPAN	Configuration.h	748;"	d
DISPLAY_CHARSET_HD44780_JAPAN	language.h	235;"	d
DISPLAY_CHARSET_ISO10646_1	language_en.h	39;"	d
DOGLCD	Conditionals.h	102;"	d
DOGLCD	Conditionals.h	125;"	d
DOGLCD	Conditionals.h	50;"	d
DOGLCD	Conditionals.h	58;"	d
DOGLCD	Conditionals.h	78;"	d
DOGLCD_A0	pins_RAMPS_14.h	205;"	d
DOGLCD_A0	pins_RAMPS_14.h	210;"	d
DOGLCD_CS	pins_RAMPS_14.h	204;"	d
DOGLCD_CS	pins_RAMPS_14.h	211;"	d
DUMMY_PID_VALUE	configuration_store.cpp	161;"	d	file:
DUMMY_THERMISTOR_998_VALUE	thermistortables.h	1274;"	d
DUMMY_THERMISTOR_999_VALUE	thermistortables.h	1263;"	d
DXC_AUTO_PARK_MODE	Marlin_main.cpp	1253;"	d	file:
DXC_DUPLICATION_MODE	Marlin_main.cpp	1254;"	d	file:
DXC_FULL_CONTROL_MODE	Marlin_main.cpp	1252;"	d	file:
D_FILAMENT	Configuration_adv.h	443;"	d
DebugFlags	Marlin.h	/^enum DebugFlags {$/;"	g
E0_DIR_INIT	stepper_indirection.h	132;"	d
E0_DIR_INIT	stepper_indirection.h	472;"	d
E0_DIR_INIT	stepper_indirection.h	473;"	d
E0_DIR_PIN	pins_RAMPS_14.h	83;"	d
E0_DIR_READ	stepper_indirection.h	134;"	d
E0_DIR_READ	stepper_indirection.h	478;"	d
E0_DIR_READ	stepper_indirection.h	479;"	d
E0_DIR_WRITE	stepper_indirection.h	133;"	d
E0_DIR_WRITE	stepper_indirection.h	475;"	d
E0_DIR_WRITE	stepper_indirection.h	476;"	d
E0_ENABLE_INIT	stepper_indirection.h	136;"	d
E0_ENABLE_INIT	stepper_indirection.h	285;"	d
E0_ENABLE_INIT	stepper_indirection.h	286;"	d
E0_ENABLE_INIT	stepper_indirection.h	463;"	d
E0_ENABLE_INIT	stepper_indirection.h	464;"	d
E0_ENABLE_PIN	pins_RAMPS_14.h	84;"	d
E0_ENABLE_READ	stepper_indirection.h	138;"	d
E0_ENABLE_READ	stepper_indirection.h	291;"	d
E0_ENABLE_READ	stepper_indirection.h	292;"	d
E0_ENABLE_READ	stepper_indirection.h	469;"	d
E0_ENABLE_READ	stepper_indirection.h	470;"	d
E0_ENABLE_WRITE	stepper_indirection.h	137;"	d
E0_ENABLE_WRITE	stepper_indirection.h	288;"	d
E0_ENABLE_WRITE	stepper_indirection.h	289;"	d
E0_ENABLE_WRITE	stepper_indirection.h	466;"	d
E0_ENABLE_WRITE	stepper_indirection.h	467;"	d
E0_K_VAL	Configuration_adv.h	633;"	d
E0_MAX_CURRENT	Configuration_adv.h	564;"	d
E0_MICROSTEPS	Configuration_adv.h	566;"	d
E0_MICROSTEPS	Configuration_adv.h	632;"	d
E0_MS1_PIN	pins.h	33;"	d
E0_MS2_PIN	pins.h	34;"	d
E0_OVERCURRENT	Configuration_adv.h	634;"	d
E0_SENSE_RESISTOR	Configuration_adv.h	565;"	d
E0_STALLCURRENT	Configuration_adv.h	635;"	d
E0_STEP_INIT	stepper_indirection.h	128;"	d
E0_STEP_PIN	pins_RAMPS_14.h	82;"	d
E0_STEP_READ	stepper_indirection.h	130;"	d
E0_STEP_WRITE	stepper_indirection.h	129;"	d
E1_DIR_INIT	stepper_indirection.h	145;"	d
E1_DIR_INIT	stepper_indirection.h	492;"	d
E1_DIR_INIT	stepper_indirection.h	493;"	d
E1_DIR_PIN	pins_RAMPS_14.h	87;"	d
E1_DIR_READ	stepper_indirection.h	147;"	d
E1_DIR_READ	stepper_indirection.h	498;"	d
E1_DIR_READ	stepper_indirection.h	499;"	d
E1_DIR_WRITE	stepper_indirection.h	146;"	d
E1_DIR_WRITE	stepper_indirection.h	495;"	d
E1_DIR_WRITE	stepper_indirection.h	496;"	d
E1_ENABLE_INIT	stepper_indirection.h	149;"	d
E1_ENABLE_INIT	stepper_indirection.h	296;"	d
E1_ENABLE_INIT	stepper_indirection.h	297;"	d
E1_ENABLE_INIT	stepper_indirection.h	483;"	d
E1_ENABLE_INIT	stepper_indirection.h	484;"	d
E1_ENABLE_PIN	pins_RAMPS_14.h	88;"	d
E1_ENABLE_READ	stepper_indirection.h	151;"	d
E1_ENABLE_READ	stepper_indirection.h	302;"	d
E1_ENABLE_READ	stepper_indirection.h	303;"	d
E1_ENABLE_READ	stepper_indirection.h	489;"	d
E1_ENABLE_READ	stepper_indirection.h	490;"	d
E1_ENABLE_WRITE	stepper_indirection.h	150;"	d
E1_ENABLE_WRITE	stepper_indirection.h	299;"	d
E1_ENABLE_WRITE	stepper_indirection.h	300;"	d
E1_ENABLE_WRITE	stepper_indirection.h	486;"	d
E1_ENABLE_WRITE	stepper_indirection.h	487;"	d
E1_K_VAL	Configuration_adv.h	639;"	d
E1_MAX_CURRENT	Configuration_adv.h	569;"	d
E1_MICROSTEPS	Configuration_adv.h	571;"	d
E1_MICROSTEPS	Configuration_adv.h	638;"	d
E1_MS1_PIN	pins.h	35;"	d
E1_MS2_PIN	pins.h	36;"	d
E1_OVERCURRENT	Configuration_adv.h	640;"	d
E1_SENSE_RESISTOR	Configuration_adv.h	570;"	d
E1_STALLCURRENT	Configuration_adv.h	641;"	d
E1_STEP_INIT	stepper_indirection.h	141;"	d
E1_STEP_PIN	pins_RAMPS_14.h	86;"	d
E1_STEP_READ	stepper_indirection.h	143;"	d
E1_STEP_WRITE	stepper_indirection.h	142;"	d
E2_DIR_INIT	stepper_indirection.h	158;"	d
E2_DIR_INIT	stepper_indirection.h	512;"	d
E2_DIR_INIT	stepper_indirection.h	513;"	d
E2_DIR_READ	stepper_indirection.h	160;"	d
E2_DIR_READ	stepper_indirection.h	518;"	d
E2_DIR_READ	stepper_indirection.h	519;"	d
E2_DIR_WRITE	stepper_indirection.h	159;"	d
E2_DIR_WRITE	stepper_indirection.h	515;"	d
E2_DIR_WRITE	stepper_indirection.h	516;"	d
E2_ENABLE_INIT	stepper_indirection.h	162;"	d
E2_ENABLE_INIT	stepper_indirection.h	307;"	d
E2_ENABLE_INIT	stepper_indirection.h	308;"	d
E2_ENABLE_INIT	stepper_indirection.h	503;"	d
E2_ENABLE_INIT	stepper_indirection.h	504;"	d
E2_ENABLE_READ	stepper_indirection.h	164;"	d
E2_ENABLE_READ	stepper_indirection.h	313;"	d
E2_ENABLE_READ	stepper_indirection.h	314;"	d
E2_ENABLE_READ	stepper_indirection.h	509;"	d
E2_ENABLE_READ	stepper_indirection.h	510;"	d
E2_ENABLE_WRITE	stepper_indirection.h	163;"	d
E2_ENABLE_WRITE	stepper_indirection.h	310;"	d
E2_ENABLE_WRITE	stepper_indirection.h	311;"	d
E2_ENABLE_WRITE	stepper_indirection.h	506;"	d
E2_ENABLE_WRITE	stepper_indirection.h	507;"	d
E2_K_VAL	Configuration_adv.h	645;"	d
E2_MAX_CURRENT	Configuration_adv.h	574;"	d
E2_MICROSTEPS	Configuration_adv.h	576;"	d
E2_MICROSTEPS	Configuration_adv.h	644;"	d
E2_OVERCURRENT	Configuration_adv.h	646;"	d
E2_SENSE_RESISTOR	Configuration_adv.h	575;"	d
E2_STALLCURRENT	Configuration_adv.h	647;"	d
E2_STEP_INIT	stepper_indirection.h	154;"	d
E2_STEP_READ	stepper_indirection.h	156;"	d
E2_STEP_WRITE	stepper_indirection.h	155;"	d
E3_DIR_INIT	stepper_indirection.h	171;"	d
E3_DIR_INIT	stepper_indirection.h	532;"	d
E3_DIR_INIT	stepper_indirection.h	533;"	d
E3_DIR_READ	stepper_indirection.h	173;"	d
E3_DIR_READ	stepper_indirection.h	538;"	d
E3_DIR_READ	stepper_indirection.h	539;"	d
E3_DIR_WRITE	stepper_indirection.h	172;"	d
E3_DIR_WRITE	stepper_indirection.h	535;"	d
E3_DIR_WRITE	stepper_indirection.h	536;"	d
E3_ENABLE_INIT	stepper_indirection.h	175;"	d
E3_ENABLE_INIT	stepper_indirection.h	318;"	d
E3_ENABLE_INIT	stepper_indirection.h	319;"	d
E3_ENABLE_INIT	stepper_indirection.h	523;"	d
E3_ENABLE_INIT	stepper_indirection.h	524;"	d
E3_ENABLE_READ	stepper_indirection.h	177;"	d
E3_ENABLE_READ	stepper_indirection.h	324;"	d
E3_ENABLE_READ	stepper_indirection.h	325;"	d
E3_ENABLE_READ	stepper_indirection.h	529;"	d
E3_ENABLE_READ	stepper_indirection.h	530;"	d
E3_ENABLE_WRITE	stepper_indirection.h	176;"	d
E3_ENABLE_WRITE	stepper_indirection.h	321;"	d
E3_ENABLE_WRITE	stepper_indirection.h	322;"	d
E3_ENABLE_WRITE	stepper_indirection.h	526;"	d
E3_ENABLE_WRITE	stepper_indirection.h	527;"	d
E3_K_VAL	Configuration_adv.h	651;"	d
E3_MAX_CURRENT	Configuration_adv.h	579;"	d
E3_MICROSTEPS	Configuration_adv.h	581;"	d
E3_MICROSTEPS	Configuration_adv.h	650;"	d
E3_OVERCURRENT	Configuration_adv.h	652;"	d
E3_SENSE_RESISTOR	Configuration_adv.h	580;"	d
E3_STALLCURRENT	Configuration_adv.h	653;"	d
E3_STEP_INIT	stepper_indirection.h	167;"	d
E3_STEP_READ	stepper_indirection.h	169;"	d
E3_STEP_WRITE	stepper_indirection.h	168;"	d
EEPROM_CHITCHAT	Configuration.h	686;"	d
EEPROM_OFFSET	configuration_store.cpp	163;"	d	file:
EEPROM_READ_VAR	Marlin.h	385;"	d
EEPROM_READ_VAR	configuration_store.cpp	155;"	d	file:
EEPROM_READ_VAR	planner.h	201;"	d
EEPROM_SETTINGS	Configuration.h	682;"	d
EEPROM_VERSION	configuration_store.cpp	39;"	d	file:
EEPROM_WRITE_VAR	Marlin.h	384;"	d
EEPROM_WRITE_VAR	configuration_store.cpp	154;"	d	file:
EEPROM_WRITE_VAR	planner.h	200;"	d
ELAPSED	macros.h	61;"	d
ENABLED	macros.h	51;"	d
ENABLE_STEPPER_DRIVER_INTERRUPT	stepper.cpp	281;"	d	file:
ENCODER_100X_STEPS_PER_SEC	Configuration_adv.h	345;"	d
ENCODER_10X_STEPS_PER_SEC	Configuration_adv.h	344;"	d
ENCODER_DIFF_CCW	ultralcd.cpp	2968;"	d	file:
ENCODER_DIFF_CW	ultralcd.cpp	2967;"	d	file:
ENCODER_DIRECTION_MENUS	ultralcd.cpp	45;"	d	file:
ENCODER_DIRECTION_MENUS	ultralcd.cpp	48;"	d	file:
ENCODER_DIRECTION_NORMAL	ultralcd.cpp	44;"	d	file:
ENCODER_DIRECTION_NORMAL	ultralcd.cpp	47;"	d	file:
ENCODER_FEEDRATE_DEADZONE	ultralcd.cpp	158;"	d	file:
ENCODER_PULSES_PER_STEP	Conditionals.h	151;"	d
ENCODER_PULSES_PER_STEP	Conditionals.h	71;"	d
ENCODER_PULSES_PER_STEP	Conditionals.h	89;"	d
ENCODER_PULSES_PER_STEP	ultralcd.cpp	165;"	d	file:
ENCODER_PULSES_PER_STEP	ultralcd.cpp	172;"	d	file:
ENCODER_RATE_MULTIPLIER	Configuration_adv.h	343;"	d
ENCODER_SPIN	ultralcd.cpp	2973;"	d	file:
ENCODER_STEPS_PER_MENU_ITEM	Conditionals.h	155;"	d
ENCODER_STEPS_PER_MENU_ITEM	Conditionals.h	72;"	d
ENCODER_STEPS_PER_MENU_ITEM	Conditionals.h	93;"	d
ENCODER_STEPS_PER_MENU_ITEM	ultralcd.cpp	162;"	d	file:
ENCODER_STEPS_PER_MENU_ITEM	ultralcd.cpp	169;"	d	file:
ENDL_CALLS_FLUSH	SdFatConfig.h	66;"	d
ENDSTOPPULLUPS	Configuration.h	304;"	d
ENDSTOPPULLUP_FIL_RUNOUT	Configuration.h	459;"	d
ENDSTOPPULLUP_XMAX	Conditionals.h	286;"	d
ENDSTOPPULLUP_XMIN	Conditionals.h	295;"	d
ENDSTOPPULLUP_YMAX	Conditionals.h	289;"	d
ENDSTOPPULLUP_YMIN	Conditionals.h	298;"	d
ENDSTOPPULLUP_ZMAX	Conditionals.h	292;"	d
ENDSTOPPULLUP_ZMIN	Conditionals.h	301;"	d
ENDSTOPPULLUP_ZMIN_PROBE	Conditionals.h	304;"	d
ENDSTOPS_ONLY_FOR_HOMING	Configuration_adv.h	178;"	d
END_MENU	ultralcd.cpp	262;"	d	file:
EN_A	ultralcd.h	129;"	d
EN_A	ultralcd.h	147;"	d
EN_A	ultralcd_implementation_hitachi_HD44780.h	48;"	d
EN_B	ultralcd.h	128;"	d
EN_B	ultralcd.h	146;"	d
EN_B	ultralcd_implementation_hitachi_HD44780.h	47;"	d
EN_C	ultralcd.h	127;"	d
EN_C	ultralcd_implementation_hitachi_HD44780.h	53;"	d
EN_REPRAPWORLD_KEYPAD_DOWN	ultralcd.h	109;"	d
EN_REPRAPWORLD_KEYPAD_F1	ultralcd.h	108;"	d
EN_REPRAPWORLD_KEYPAD_F2	ultralcd.h	107;"	d
EN_REPRAPWORLD_KEYPAD_F3	ultralcd.h	106;"	d
EN_REPRAPWORLD_KEYPAD_LEFT	ultralcd.h	113;"	d
EN_REPRAPWORLD_KEYPAD_MIDDLE	ultralcd.h	111;"	d
EN_REPRAPWORLD_KEYPAD_RIGHT	ultralcd.h	110;"	d
EN_REPRAPWORLD_KEYPAD_UP	ultralcd.h	112;"	d
EXTENDED_BOOT_SIG	SdFatStructs.h	/^uint8_t const EXTENDED_BOOT_SIG = 0X29;$/;"	v
EXTRUDERS	Configuration.h	87;"	d
EXTRUDER_0_AUTO_FAN_PIN	Configuration_adv.h	164;"	d
EXTRUDER_1_AUTO_FAN_PIN	Configuration_adv.h	165;"	d
EXTRUDER_2_AUTO_FAN_PIN	Configuration_adv.h	166;"	d
EXTRUDER_3_AUTO_FAN_PIN	Configuration_adv.h	167;"	d
EXTRUDER_ADVANCE_K	Configuration_adv.h	442;"	d
EXTRUDER_AUTO_FAN_SPEED	Configuration_adv.h	169;"	d
EXTRUDER_AUTO_FAN_TEMPERATURE	Configuration_adv.h	168;"	d
EXTRUDER_OFFSET_X	Marlin_main.cpp	353;"	d	file:
EXTRUDER_OFFSET_Y	Marlin_main.cpp	356;"	d	file:
EXTRUDER_RUNOUT_ESTEPS	Configuration_adv.h	128;"	d
EXTRUDER_RUNOUT_EXTRUDE	Configuration_adv.h	130;"	d
EXTRUDER_RUNOUT_MINTEMP	Configuration_adv.h	126;"	d
EXTRUDER_RUNOUT_SECONDS	Configuration_adv.h	127;"	d
EXTRUDER_RUNOUT_SPEED	Configuration_adv.h	129;"	d
EXTRUDE_MAXLENGTH	Configuration.h	266;"	d
EXTRUDE_MINTEMP	Conditionals.h	42;"	d
EXTRUDE_MINTEMP	Configuration.h	265;"	d
EXTRUSION_AREA	Conditionals.h	431;"	d
E_APPLY_STEP	stepper.cpp	196;"	d	file:
E_AXIS	Marlin.h	/^enum AxisEnum {X_AXIS = 0, A_AXIS = 0, Y_AXIS = 1, B_AXIS = 1, Z_AXIS = 2, C_AXIS = 2, E_AXIS = 3, X_HEAD = 4, Y_HEAD = 5, Z_HEAD = 5};$/;"	e	enum:AxisEnum
E_AXIS_INIT	stepper.cpp	1027;"	d	file:
E_ENABLE_ON	Configuration.h	379;"	d
E_STEP_WRITE	stepper_indirection.h	180;"	d
E_STEP_WRITE	stepper_indirection.h	184;"	d
E_STEP_WRITE	stepper_indirection.h	192;"	d
E_STEP_WRITE	stepper_indirection.h	197;"	d
E_STEP_WRITE	stepper_indirection.h	202;"	d
EnableHeatBedFlag	Marlin_main.cpp	/^bool EnableHeatBedFlag = false;$/;"	v
EnableLightFlag	Marlin_main.cpp	/^bool EnableLightFlag = false;$/;"	v
EndstopEnum	Marlin.h	/^enum EndstopEnum {X_MIN = 0, Y_MIN = 1, Z_MIN = 2, Z_MIN_PROBE = 3, X_MAX = 4, Y_MAX = 5, Z_MAX = 6, Z2_MIN = 7, Z2_MAX = 8};$/;"	g
FAN_COUNT	Conditionals.h	711;"	d
FAN_COUNT	Conditionals.h	713;"	d
FAN_COUNT	Conditionals.h	715;"	d
FAN_COUNT	Conditionals.h	717;"	d
FAN_MIN_PWM	Configuration_adv.h	154;"	d
FAN_PIN	pins_RAMPS_14.h	108;"	d
FAN_PIN	pins_RAMPS_14.h	113;"	d
FAN_PIN	pins_RAMPS_14.h	115;"	d
FAT12EOC	SdFatStructs.h	/^uint16_t const FAT12EOC = 0XFFF;$/;"	v
FAT12EOC_MIN	SdFatStructs.h	/^uint16_t const FAT12EOC_MIN = 0XFF8;$/;"	v
FAT12_SUPPORT	SdFatConfig.h	77;"	d
FAT16EOC	SdFatStructs.h	/^uint16_t const FAT16EOC = 0XFFFF;$/;"	v
FAT16EOC_MIN	SdFatStructs.h	/^uint16_t const FAT16EOC_MIN = 0XFFF8;$/;"	v
FAT32EOC	SdFatStructs.h	/^uint32_t const FAT32EOC = 0X0FFFFFFF;$/;"	v
FAT32EOC_MIN	SdFatStructs.h	/^uint32_t const FAT32EOC_MIN = 0X0FFFFFF8;$/;"	v
FAT32MASK	SdFatStructs.h	/^uint32_t const FAT32MASK = 0X0FFFFFFF;$/;"	v
FAT_DATE	SdBaseFile.h	/^static inline uint16_t FAT_DATE(uint16_t year, uint8_t month, uint8_t day) {$/;"	f
FAT_DAY	SdBaseFile.h	/^static inline uint8_t FAT_DAY(uint16_t fatDate) {$/;"	f
FAT_DEFAULT_DATE	SdBaseFile.h	/^uint16_t const FAT_DEFAULT_DATE = ((2000 - 1980) << 9) | (1 << 5) | 1;$/;"	v
FAT_DEFAULT_TIME	SdBaseFile.h	/^uint16_t const FAT_DEFAULT_TIME = (1 << 11);$/;"	v
FAT_FILE_TYPE_CLOSED	SdBaseFile.h	/^uint8_t const FAT_FILE_TYPE_CLOSED = 0;$/;"	v
FAT_FILE_TYPE_MIN_DIR	SdBaseFile.h	/^uint8_t const FAT_FILE_TYPE_MIN_DIR = FAT_FILE_TYPE_ROOT_FIXED;$/;"	v
FAT_FILE_TYPE_NORMAL	SdBaseFile.h	/^uint8_t const FAT_FILE_TYPE_NORMAL = 1;$/;"	v
FAT_FILE_TYPE_ROOT32	SdBaseFile.h	/^uint8_t const FAT_FILE_TYPE_ROOT32 = 3;$/;"	v
FAT_FILE_TYPE_ROOT_FIXED	SdBaseFile.h	/^uint8_t const FAT_FILE_TYPE_ROOT_FIXED = 2;$/;"	v
FAT_FILE_TYPE_SUBDIR	SdBaseFile.h	/^uint8_t const FAT_FILE_TYPE_SUBDIR = 4;$/;"	v
FAT_HOUR	SdBaseFile.h	/^static inline uint8_t FAT_HOUR(uint16_t fatTime) {$/;"	f
FAT_MINUTE	SdBaseFile.h	/^static inline uint8_t FAT_MINUTE(uint16_t fatTime) {$/;"	f
FAT_MONTH	SdBaseFile.h	/^static inline uint8_t FAT_MONTH(uint16_t fatDate) {$/;"	f
FAT_SECOND	SdBaseFile.h	/^static inline uint8_t FAT_SECOND(uint16_t fatTime) {$/;"	f
FAT_TIME	SdBaseFile.h	/^static inline uint16_t FAT_TIME(uint8_t hour, uint8_t minute, uint8_t second) {$/;"	f
FAT_YEAR	SdBaseFile.h	/^static inline uint16_t FAT_YEAR(uint16_t fatDate) {$/;"	f
FILAMENTCHANGEENABLE	Configuration_adv.h	510;"	d
FILAMENTCHANGE_FINALRETRACT	Configuration_adv.h	516;"	d
FILAMENTCHANGE_FIRSTRETRACT	Configuration_adv.h	515;"	d
FILAMENTCHANGE_XPOS	Configuration_adv.h	512;"	d
FILAMENTCHANGE_YPOS	Configuration_adv.h	513;"	d
FILAMENTCHANGE_ZADD	Configuration_adv.h	514;"	d
FILAMENT_RUNOUT_SCRIPT	Configuration.h	460;"	d
FILAMENT_RUNOUT_SENSOR	Configuration.h	453;"	d
FILAMENT_SENSOR_EXTRUDER_NUM	Configuration.h	1073;"	d
FILENAME_LENGTH	SdFatConfig.h	122;"	d
FILRUNOUT_PIN	pins_RAMPS_14.h	104;"	d
FILWIDTH_PIN	pins_RAMPS_14.h	95;"	d
FIL_RUNOUT_INVERTING	Configuration.h	/^  const bool FIL_RUNOUT_INVERTING = false;  \/\/ Should be uncommented and true or false should assigned$/;"	v
FORCE_INLINE	Marlin.h	25;"	d
FRONT_PROBE_BED_POSITION	Configuration.h	496;"	d
FSINFO_LEAD_SIG	SdFatStructs.h	/^uint32_t const FSINFO_LEAD_SIG = 0x41615252;$/;"	v
FSINFO_STRUCT_SIG	SdFatStructs.h	/^uint32_t const FSINFO_STRUCT_SIG = 0x61417272;$/;"	v
FW_VERSION	Configuration.h	61;"	d
F_FILE_DIR_DIRTY	SdBaseFile.h	/^  static uint8_t const F_FILE_DIR_DIRTY = 0X80;$/;"	m	class:SdBaseFile
F_OFLAG	SdBaseFile.h	/^  static uint8_t const F_OFLAG = (O_ACCMODE | O_APPEND | O_SYNC);$/;"	m	class:SdBaseFile
FlushSerialRequestResend	Marlin_main.cpp	/^void FlushSerialRequestResend() {$/;"	f
FreeRam	SdFatUtil.cpp	/^int SdFatUtil::FreeRam() {$/;"	f	class:SdFatUtil
GE0	temperature.cpp	1771;"	d	file:
GE1	temperature.cpp	1781;"	d	file:
GE2	temperature.cpp	1791;"	d	file:
GE3	temperature.cpp	1801;"	d	file:
GEBED	temperature.cpp	1811;"	d	file:
GENERATE_LANGUAGE_INCLUDE	language.h	28;"	d
GET_BUTTON_STATES	ultralcd.cpp	2903;"	d	file:
GET_INPUT	fastio.h	100;"	d
GET_OUTPUT	fastio.h	102;"	d
GET_TIMER	fastio.h	105;"	d
HARDWARE_CHAR_OUT	ultralcd_implementation_hitachi_HD44780.h	429;"	d
HARDWARE_CHAR_OUT	ultralcd_implementation_hitachi_HD44780.h	431;"	d
HAS_AUTO_FAN	Conditionals.h	614;"	d
HAS_AUTO_FAN_0	Conditionals.h	610;"	d
HAS_AUTO_FAN_1	Conditionals.h	611;"	d
HAS_AUTO_FAN_2	Conditionals.h	612;"	d
HAS_AUTO_FAN_3	Conditionals.h	613;"	d
HAS_BUZZER	Conditionals.h	732;"	d
HAS_CONTROLLERFAN	Conditionals.h	618;"	d
HAS_DIGIPOTSS	pins.h	173;"	d
HAS_E0_DIR	Conditionals.h	664;"	d
HAS_E0_ENABLE	Conditionals.h	653;"	d
HAS_E0_STEP	Conditionals.h	675;"	d
HAS_E1_DIR	Conditionals.h	665;"	d
HAS_E1_ENABLE	Conditionals.h	654;"	d
HAS_E1_STEP	Conditionals.h	676;"	d
HAS_E2_DIR	Conditionals.h	666;"	d
HAS_E2_ENABLE	Conditionals.h	655;"	d
HAS_E2_STEP	Conditionals.h	677;"	d
HAS_E3_DIR	Conditionals.h	667;"	d
HAS_E3_ENABLE	Conditionals.h	656;"	d
HAS_E3_STEP	Conditionals.h	678;"	d
HAS_E4_DIR	Conditionals.h	668;"	d
HAS_E4_ENABLE	Conditionals.h	657;"	d
HAS_E4_STEP	Conditionals.h	679;"	d
HAS_FAN0	Conditionals.h	615;"	d
HAS_FAN1	Conditionals.h	616;"	d
HAS_FAN2	Conditionals.h	617;"	d
HAS_FILAMENT_WIDTH_SENSOR	Conditionals.h	624;"	d
HAS_FILRUNOUT	Conditionals.h	625;"	d
HAS_HEATER_0	Conditionals.h	605;"	d
HAS_HEATER_1	Conditionals.h	606;"	d
HAS_HEATER_2	Conditionals.h	607;"	d
HAS_HEATER_3	Conditionals.h	608;"	d
HAS_HEATER_BED	Conditionals.h	609;"	d
HAS_HOME	Conditionals.h	626;"	d
HAS_KILL	Conditionals.h	627;"	d
HAS_LCD_CONTRAST	Conditionals.h	260;"	d
HAS_LCD_CONTRAST	Conditionals.h	262;"	d
HAS_LCD_CONTRAST	Conditionals.h	265;"	d
HAS_MICROSTEPS	Conditionals.h	642;"	d
HAS_MICROSTEPS_E0	Conditionals.h	643;"	d
HAS_MICROSTEPS_E1	Conditionals.h	644;"	d
HAS_MICROSTEPS_E2	Conditionals.h	645;"	d
HAS_MOTOR_CURRENT_PWM	Conditionals.h	681;"	d
HAS_PHOTOGRAPH	Conditionals.h	629;"	d
HAS_PID_FOR_BOTH	Conditionals.h	539;"	d
HAS_PID_HEATING	Conditionals.h	538;"	d
HAS_POWER_SWITCH	Conditionals.h	467;"	d
HAS_SERVOS	Conditionals.h	619;"	d
HAS_SERVO_0	Conditionals.h	620;"	d
HAS_SERVO_1	Conditionals.h	621;"	d
HAS_SERVO_2	Conditionals.h	622;"	d
HAS_SERVO_3	Conditionals.h	623;"	d
HAS_SERVO_ENDSTOPS	Conditionals.h	745;"	d
HAS_SOLENOID_1	Conditionals.h	639;"	d
HAS_SOLENOID_2	Conditionals.h	640;"	d
HAS_SOLENOID_3	Conditionals.h	641;"	d
HAS_STEPPER_RESET	Conditionals.h	646;"	d
HAS_SUICIDE	Conditionals.h	628;"	d
HAS_TEMP_0	Conditionals.h	600;"	d
HAS_TEMP_1	Conditionals.h	601;"	d
HAS_TEMP_2	Conditionals.h	602;"	d
HAS_TEMP_3	Conditionals.h	603;"	d
HAS_TEMP_BED	Conditionals.h	604;"	d
HAS_TEMP_HOTEND	Conditionals.h	683;"	d
HAS_X2_DIR	Conditionals.h	659;"	d
HAS_X2_ENABLE	Conditionals.h	648;"	d
HAS_X2_STEP	Conditionals.h	670;"	d
HAS_X_DIR	Conditionals.h	658;"	d
HAS_X_ENABLE	Conditionals.h	647;"	d
HAS_X_MAX	Conditionals.h	631;"	d
HAS_X_MIN	Conditionals.h	630;"	d
HAS_X_STEP	Conditionals.h	669;"	d
HAS_Y2_DIR	Conditionals.h	661;"	d
HAS_Y2_ENABLE	Conditionals.h	650;"	d
HAS_Y2_STEP	Conditionals.h	672;"	d
HAS_Y_DIR	Conditionals.h	660;"	d
HAS_Y_ENABLE	Conditionals.h	649;"	d
HAS_Y_MAX	Conditionals.h	633;"	d
HAS_Y_MIN	Conditionals.h	632;"	d
HAS_Y_STEP	Conditionals.h	671;"	d
HAS_Z2_DIR	Conditionals.h	663;"	d
HAS_Z2_ENABLE	Conditionals.h	652;"	d
HAS_Z2_MAX	Conditionals.h	637;"	d
HAS_Z2_MIN	Conditionals.h	636;"	d
HAS_Z2_STEP	Conditionals.h	674;"	d
HAS_Z_DIR	Conditionals.h	662;"	d
HAS_Z_ENABLE	Conditionals.h	651;"	d
HAS_Z_ENDSTOP_SERVO	Conditionals.h	363;"	d
HAS_Z_MAX	Conditionals.h	635;"	d
HAS_Z_MIN	Conditionals.h	634;"	d
HAS_Z_MIN_PROBE	Conditionals.h	758;"	d
HAS_Z_PROBE	Conditionals.h	638;"	d
HAS_Z_STEP	Conditionals.h	673;"	d
HEATER_0_MAXTEMP	Conditionals.h	481;"	d
HEATER_0_MAXTEMP	Configuration.h	183;"	d
HEATER_0_MINTEMP	Conditionals.h	480;"	d
HEATER_0_MINTEMP	Configuration.h	174;"	d
HEATER_0_PIN	pins_RAMPS_14.h	125;"	d
HEATER_0_PIN	pins_RAMPS_14.h	127;"	d
HEATER_0_RAW_HI_TEMP	thermistortables.h	1301;"	d
HEATER_0_RAW_HI_TEMP	thermistortables.h	1304;"	d
HEATER_0_RAW_HI_TEMP	thermistortables.h	793;"	d
HEATER_0_RAW_LO_TEMP	thermistortables.h	1302;"	d
HEATER_0_RAW_LO_TEMP	thermistortables.h	1305;"	d
HEATER_0_RAW_LO_TEMP	thermistortables.h	794;"	d
HEATER_0_TEMPTABLE	thermistortables.h	1287;"	d
HEATER_0_TEMPTABLE	thermistortables.h	1293;"	d
HEATER_0_TEMPTABLE_LEN	thermistortables.h	1288;"	d
HEATER_0_TEMPTABLE_LEN	thermistortables.h	1294;"	d
HEATER_0_USES_AD595	Conditionals.h	478;"	d
HEATER_0_USES_MAX6675	Conditionals.h	473;"	d
HEATER_0_USES_MAX6675	Conditionals.h	476;"	d
HEATER_0_USES_THERMISTOR	Conditionals.h	484;"	d
HEATER_1_MAXTEMP	Conditionals.h	493;"	d
HEATER_1_MAXTEMP	Configuration.h	184;"	d
HEATER_1_MINTEMP	Conditionals.h	492;"	d
HEATER_1_MINTEMP	Configuration.h	175;"	d
HEATER_1_PIN	pins_RAMPS_14.h	131;"	d
HEATER_1_PIN	pins_RAMPS_14.h	133;"	d
HEATER_1_RAW_HI_TEMP	thermistortables.h	1324;"	d
HEATER_1_RAW_HI_TEMP	thermistortables.h	1327;"	d
HEATER_1_RAW_HI_TEMP	thermistortables.h	797;"	d
HEATER_1_RAW_LO_TEMP	thermistortables.h	1325;"	d
HEATER_1_RAW_LO_TEMP	thermistortables.h	1328;"	d
HEATER_1_RAW_LO_TEMP	thermistortables.h	798;"	d
HEATER_1_TEMPTABLE	thermistortables.h	1310;"	d
HEATER_1_TEMPTABLE	thermistortables.h	1316;"	d
HEATER_1_TEMPTABLE_LEN	thermistortables.h	1311;"	d
HEATER_1_TEMPTABLE_LEN	thermistortables.h	1317;"	d
HEATER_1_USES_AD595	Conditionals.h	490;"	d
HEATER_1_USES_THERMISTOR	Conditionals.h	496;"	d
HEATER_2_MAXTEMP	Conditionals.h	505;"	d
HEATER_2_MAXTEMP	Configuration.h	185;"	d
HEATER_2_MINTEMP	Conditionals.h	504;"	d
HEATER_2_MINTEMP	Configuration.h	176;"	d
HEATER_2_PIN	pins_RAMPS_14.h	136;"	d
HEATER_2_RAW_HI_TEMP	thermistortables.h	1347;"	d
HEATER_2_RAW_HI_TEMP	thermistortables.h	1350;"	d
HEATER_2_RAW_HI_TEMP	thermistortables.h	801;"	d
HEATER_2_RAW_LO_TEMP	thermistortables.h	1348;"	d
HEATER_2_RAW_LO_TEMP	thermistortables.h	1351;"	d
HEATER_2_RAW_LO_TEMP	thermistortables.h	802;"	d
HEATER_2_TEMPTABLE	thermistortables.h	1333;"	d
HEATER_2_TEMPTABLE	thermistortables.h	1339;"	d
HEATER_2_TEMPTABLE_LEN	thermistortables.h	1334;"	d
HEATER_2_TEMPTABLE_LEN	thermistortables.h	1340;"	d
HEATER_2_USES_AD595	Conditionals.h	502;"	d
HEATER_2_USES_THERMISTOR	Conditionals.h	508;"	d
HEATER_3_MAXTEMP	Conditionals.h	517;"	d
HEATER_3_MAXTEMP	Configuration.h	186;"	d
HEATER_3_MINTEMP	Conditionals.h	516;"	d
HEATER_3_MINTEMP	Configuration.h	177;"	d
HEATER_3_PIN	pins.h	37;"	d
HEATER_3_RAW_HI_TEMP	thermistortables.h	1370;"	d
HEATER_3_RAW_HI_TEMP	thermistortables.h	1373;"	d
HEATER_3_RAW_HI_TEMP	thermistortables.h	805;"	d
HEATER_3_RAW_LO_TEMP	thermistortables.h	1371;"	d
HEATER_3_RAW_LO_TEMP	thermistortables.h	1374;"	d
HEATER_3_RAW_LO_TEMP	thermistortables.h	806;"	d
HEATER_3_TEMPTABLE	thermistortables.h	1356;"	d
HEATER_3_TEMPTABLE	thermistortables.h	1362;"	d
HEATER_3_TEMPTABLE_LEN	thermistortables.h	1357;"	d
HEATER_3_TEMPTABLE_LEN	thermistortables.h	1363;"	d
HEATER_3_USES_AD595	Conditionals.h	514;"	d
HEATER_3_USES_THERMISTOR	Conditionals.h	520;"	d
HEATER_BED_PIN	pins_RAMPS_14.h	143;"	d
HEATER_BED_PIN	pins_RAMPS_14.h	145;"	d
HEATER_BED_RAW_HI_TEMP	thermistortables.h	1390;"	d
HEATER_BED_RAW_HI_TEMP	thermistortables.h	1393;"	d
HEATER_BED_RAW_HI_TEMP	thermistortables.h	809;"	d
HEATER_BED_RAW_LO_TEMP	thermistortables.h	1391;"	d
HEATER_BED_RAW_LO_TEMP	thermistortables.h	1394;"	d
HEATER_BED_RAW_LO_TEMP	thermistortables.h	810;"	d
HEX	MarlinSerial.h	75;"	d
HOMEAXIS	Marlin_main.cpp	2196;"	d	file:
HOMEAXIS_DO	Marlin_main.cpp	2205;"	d	file:
HOME_Y_BEFORE_X	Configuration_adv.h	272;"	d
HOMING_BUMP_DIVISOR	Configuration_adv.h	268;"	d
HOMING_FEEDRATE	Configuration.h	614;"	d
HOMING_FEEDRATE	Configuration.h	633;"	d
HOST_KEEPALIVE_FEATURE	Conditionals.h	402;"	d
HOTEND_ROUTINES	temperature.h	145;"	d
HardwareSerial_h	Conditionals.h	276;"	d
INVALID_SERVO	servo.h	128;"	d
INVERT_E0_DIR	Configuration.h	416;"	d
INVERT_E1_DIR	Configuration.h	417;"	d
INVERT_E2_DIR	Configuration.h	418;"	d
INVERT_E3_DIR	Configuration.h	419;"	d
INVERT_E_STEP_PIN	Configuration_adv.h	284;"	d
INVERT_X_DIR	Configuration.h	401;"	d
INVERT_X_DIR	Configuration.h	407;"	d
INVERT_X_STEP_PIN	Configuration_adv.h	281;"	d
INVERT_Y2_VS_Y_DIR	Configuration_adv.h	215;"	d
INVERT_Y_DIR	Configuration.h	402;"	d
INVERT_Y_DIR	Configuration.h	408;"	d
INVERT_Y_STEP_PIN	Configuration_adv.h	282;"	d
INVERT_Z_DIR	Configuration.h	403;"	d
INVERT_Z_DIR	Configuration.h	409;"	d
INVERT_Z_STEP_PIN	Configuration_adv.h	283;"	d
IN_HANDLER	Marlin_main.cpp	/^  IN_HANDLER,         \/\/ Processing a GCode$/;"	e	enum:MarlinBusyState	file:
IN_PROCESS	Marlin_main.cpp	/^  IN_PROCESS,         \/\/ Known to be blocking command input (as in G29)$/;"	e	enum:MarlinBusyState	file:
ISR	stepper.cpp	/^  ISR(TIMER0_COMPA_vect) {$/;"	f
ISR	stepper.cpp	/^ISR(TIMER1_COMPA_vect) {$/;"	f
ISR	temperature.cpp	/^ISR(TIMER0_COMPB_vect) {$/;"	f
ISR	watchdog.cpp	/^  ISR(WDT_vect) {$/;"	f
ISR_STATICS	temperature.cpp	1423;"	d	file:
IS_RAMPS_EFB	pins_RAMPS_14_EFB.h	29;"	d
IS_SD_INSERTED	cardreader.h	109;"	d
IS_SD_INSERTED	cardreader.h	111;"	d
IS_SD_INSERTED	cardreader.h	115;"	d
IS_SD_PRINTING	cardreader.h	105;"	d
IS_SD_PRINTING	cardreader.h	120;"	d
In_Homing_Process	stepper.cpp	/^  void In_Homing_Process(bool state) { performing_homing = state; }$/;"	f
IsRunning	Marlin.h	/^inline bool IsRunning() { return  Running; }$/;"	f
IsStopped	Marlin.h	/^inline bool IsStopped() { return !Running; }$/;"	f
K1	Configuration.h	212;"	d
K2	temperature.cpp	58;"	d	file:
KEEPALIVE_STATE	Marlin_main.cpp	491;"	d	file:
KEEPALIVE_STATE	Marlin_main.cpp	494;"	d	file:
KICKSTART_FAN	planner.cpp	494;"	d	file:
KILL_PIN	pins_RAMPS_14.h	121;"	d
KILL_PIN	pins_RAMPS_14.h	187;"	d
KILL_PIN	pins_RAMPS_14.h	202;"	d
KILL_PIN	pins_RAMPS_14.h	215;"	d
Kc	temperature.cpp	/^      float Kc = DEFAULT_Kc;$/;"	v
Kc	temperature.cpp	/^      float Kc[EXTRUDERS] = ARRAY_BY_EXTRUDERS1(DEFAULT_Kc);$/;"	v
Kd	temperature.cpp	/^    float Kd = (DEFAULT_Kd) \/ (PID_dT);$/;"	v
Kd	temperature.cpp	/^    float Kd[EXTRUDERS] = ARRAY_BY_EXTRUDERS1((DEFAULT_Kd) \/ (PID_dT));$/;"	v
Ki	temperature.cpp	/^    float Ki = (DEFAULT_Ki) * (PID_dT);$/;"	v
Ki	temperature.cpp	/^    float Ki[EXTRUDERS] = ARRAY_BY_EXTRUDERS1((DEFAULT_Ki) * (PID_dT));$/;"	v
Kp	temperature.cpp	/^    float Kp = DEFAULT_Kp;$/;"	v
Kp	temperature.cpp	/^    float Kp[EXTRUDERS] = ARRAY_BY_EXTRUDERS1(DEFAULT_Kp);$/;"	v
L6470_init	stepper_indirection.cpp	/^void L6470_init() {$/;"	f
LANGUAGE_EN_H	language_en.h	31;"	d
LANGUAGE_H	language.h	24;"	d
LANGUAGE_INCLUDE	Configuration.h	730;"	d
LANGUAGE_INCLUDE	language.h	63;"	d
LARGE_FLASH	pins_RAMPS_14.h	51;"	d
LB	ultralcd.cpp	/^static float RF = 0, LF = 0, RB = 0, LB = 0;$/;"	v	file:
LCDVIEW_CALL_NO_REDRAW	ultralcd.cpp	/^  LCDVIEW_CALL_NO_REDRAW$/;"	e	enum:LCDViewAction	file:
LCDVIEW_CALL_REDRAW_NEXT	ultralcd.cpp	/^  LCDVIEW_CALL_REDRAW_NEXT,$/;"	e	enum:LCDViewAction	file:
LCDVIEW_CLEAR_CALL_REDRAW	ultralcd.cpp	/^  LCDVIEW_CLEAR_CALL_REDRAW,$/;"	e	enum:LCDViewAction	file:
LCDVIEW_NONE	ultralcd.cpp	/^  LCDVIEW_NONE,$/;"	e	enum:LCDViewAction	file:
LCDVIEW_REDRAW_NOW	ultralcd.cpp	/^  LCDVIEW_REDRAW_NOW,$/;"	e	enum:LCDViewAction	file:
LCDViewAction	ultralcd.cpp	/^enum LCDViewAction {$/;"	g	file:
LCD_ALERTMESSAGEPGM	ultralcd.h	164;"	d
LCD_ALERTMESSAGEPGM	ultralcd.h	60;"	d
LCD_CLASS	ultralcd_implementation_hitachi_HD44780.h	149;"	d
LCD_CLASS	ultralcd_implementation_hitachi_HD44780.h	162;"	d
LCD_CLASS	ultralcd_implementation_hitachi_HD44780.h	172;"	d
LCD_CLASS	ultralcd_implementation_hitachi_HD44780.h	181;"	d
LCD_CLASS	ultralcd_implementation_hitachi_HD44780.h	190;"	d
LCD_CLASS	ultralcd_implementation_hitachi_HD44780.h	196;"	d
LCD_CLASS	ultralcd_implementation_hitachi_HD44780.h	201;"	d
LCD_CLICKED	ultralcd.h	132;"	d
LCD_CLICKED	ultralcd.h	134;"	d
LCD_CLICKED	ultralcd.h	149;"	d
LCD_CLICKED	ultralcd_implementation_hitachi_HD44780.h	108;"	d
LCD_CLICKED	ultralcd_implementation_hitachi_HD44780.h	128;"	d
LCD_CLICKED	ultralcd_implementation_hitachi_HD44780.h	72;"	d
LCD_CLICKED	ultralcd_implementation_hitachi_HD44780.h	73;"	d
LCD_CLICKED	ultralcd_implementation_hitachi_HD44780.h	75;"	d
LCD_CLICKED	ultralcd_implementation_hitachi_HD44780.h	76;"	d
LCD_CLICKED	ultralcd_implementation_hitachi_HD44780.h	86;"	d
LCD_CLICKED	ultralcd_implementation_hitachi_HD44780.h	87;"	d
LCD_CLICKED	ultralcd_implementation_hitachi_HD44780.h	95;"	d
LCD_CLICKED	ultralcd_implementation_hitachi_HD44780.h	96;"	d
LCD_EXTRA_SPACE	ultralcd_implementation_hitachi_HD44780.h	645;"	d
LCD_FEEDBACK_FREQUENCY_DURATION_MS	Conditionals.h	160;"	d
LCD_FEEDBACK_FREQUENCY_DURATION_MS	ultralcd.cpp	2432;"	d	file:
LCD_FEEDBACK_FREQUENCY_HZ	Conditionals.h	159;"	d
LCD_FEEDBACK_FREQUENCY_HZ	ultralcd.cpp	2429;"	d	file:
LCD_HAS_SLOW_BUTTONS	ultralcd_implementation_hitachi_HD44780.h	80;"	d
LCD_HAS_SLOW_BUTTONS	ultralcd_implementation_hitachi_HD44780.h	99;"	d
LCD_HAS_STATUS_INDICATORS	ultralcd_implementation_hitachi_HD44780.h	158;"	d
LCD_HEIGHT	Conditionals.h	196;"	d
LCD_HEIGHT	Conditionals.h	207;"	d
LCD_HEIGHT	Conditionals.h	215;"	d
LCD_I2C_ADDRESS	Conditionals.h	119;"	d
LCD_I2C_ADDRESS	Conditionals.h	139;"	d
LCD_I2C_ADDRESS	Conditionals.h	147;"	d
LCD_I2C_ADDRESS	Conditionals.h	174;"	d
LCD_I2C_PIN_BL	ultralcd_implementation_hitachi_HD44780.h	137;"	d
LCD_I2C_PIN_D4	ultralcd_implementation_hitachi_HD44780.h	141;"	d
LCD_I2C_PIN_D5	ultralcd_implementation_hitachi_HD44780.h	142;"	d
LCD_I2C_PIN_D6	ultralcd_implementation_hitachi_HD44780.h	143;"	d
LCD_I2C_PIN_D7	ultralcd_implementation_hitachi_HD44780.h	144;"	d
LCD_I2C_PIN_EN	ultralcd_implementation_hitachi_HD44780.h	138;"	d
LCD_I2C_PIN_RS	ultralcd_implementation_hitachi_HD44780.h	140;"	d
LCD_I2C_PIN_RW	ultralcd_implementation_hitachi_HD44780.h	139;"	d
LCD_I2C_TYPE_MCP23017	Conditionals.h	146;"	d
LCD_I2C_TYPE_MCP23017	Conditionals.h	173;"	d
LCD_I2C_TYPE_PCA8574	Conditionals.h	118;"	d
LCD_I2C_TYPE_PCF8575	Conditionals.h	138;"	d
LCD_MESSAGEPGM	ultralcd.h	163;"	d
LCD_MESSAGEPGM	ultralcd.h	59;"	d
LCD_PINS_D4	pins_RAMPS_14.h	160;"	d
LCD_PINS_D4	pins_RAMPS_14.h	167;"	d
LCD_PINS_D4	pins_RAMPS_14.h	271;"	d
LCD_PINS_D5	pins_RAMPS_14.h	161;"	d
LCD_PINS_D5	pins_RAMPS_14.h	168;"	d
LCD_PINS_D5	pins_RAMPS_14.h	272;"	d
LCD_PINS_D6	pins_RAMPS_14.h	162;"	d
LCD_PINS_D6	pins_RAMPS_14.h	169;"	d
LCD_PINS_D6	pins_RAMPS_14.h	273;"	d
LCD_PINS_D7	pins_RAMPS_14.h	163;"	d
LCD_PINS_D7	pins_RAMPS_14.h	170;"	d
LCD_PINS_D7	pins_RAMPS_14.h	274;"	d
LCD_PINS_ENABLE	pins_RAMPS_14.h	159;"	d
LCD_PINS_ENABLE	pins_RAMPS_14.h	166;"	d
LCD_PINS_ENABLE	pins_RAMPS_14.h	270;"	d
LCD_PINS_RS	pins_RAMPS_14.h	158;"	d
LCD_PINS_RS	pins_RAMPS_14.h	165;"	d
LCD_PINS_RS	pins_RAMPS_14.h	269;"	d
LCD_PIN_BL	pins_RAMPS_14.h	206;"	d
LCD_PIN_BL	pins_RAMPS_14.h	212;"	d
LCD_SDSS	pins_RAMPS_14.h	185;"	d
LCD_SDSS	pins_RAMPS_14.h	194;"	d
LCD_SDSS	pins_RAMPS_14.h	201;"	d
LCD_STR_ARROW_RIGHT	Conditionals.h	225;"	d
LCD_STR_ARROW_RIGHT	Conditionals.h	249;"	d
LCD_STR_BEDTEMP	Conditionals.h	229;"	d
LCD_STR_BEDTEMP	Conditionals.h	240;"	d
LCD_STR_CLOCK	Conditionals.h	227;"	d
LCD_STR_CLOCK	Conditionals.h	248;"	d
LCD_STR_DEGREE	Conditionals.h	231;"	d
LCD_STR_DEGREE	Conditionals.h	242;"	d
LCD_STR_FEEDRATE	Conditionals.h	228;"	d
LCD_STR_FEEDRATE	Conditionals.h	247;"	d
LCD_STR_FOLDER	Conditionals.h	224;"	d
LCD_STR_FOLDER	Conditionals.h	246;"	d
LCD_STR_PROGRESS	ultralcd_implementation_hitachi_HD44780.h	216;"	d
LCD_STR_SD	Conditionals.h	232;"	d
LCD_STR_SD	Conditionals.h	241;"	d
LCD_STR_SPECIAL_MAX	Conditionals.h	234;"	d
LCD_STR_THERMOMETER	Conditionals.h	230;"	d
LCD_STR_THERMOMETER	Conditionals.h	243;"	d
LCD_STR_UPLEVEL	Conditionals.h	226;"	d
LCD_STR_UPLEVEL	Conditionals.h	244;"	d
LCD_TEMP	ultralcd_implementation_hitachi_HD44780.h	494;"	d
LCD_TEMP	ultralcd_implementation_hitachi_HD44780.h	763;"	d
LCD_TEMP_ONLY	ultralcd_implementation_hitachi_HD44780.h	756;"	d
LCD_TIMEOUT_TO_STATUS	ultralcd.h	63;"	d
LCD_UPDATE_INTERVAL	ultralcd.h	62;"	d
LCD_USE_I2C_BUZZER	Conditionals.h	148;"	d
LCD_USE_I2C_BUZZER	Conditionals.h	175;"	d
LCD_WIDTH	Conditionals.h	193;"	d
LCD_WIDTH	Conditionals.h	204;"	d
LCD_WIDTH	Conditionals.h	212;"	d
LED_A	ultralcd_implementation_hitachi_HD44780.h	154;"	d
LED_B	ultralcd_implementation_hitachi_HD44780.h	155;"	d
LED_C	ultralcd_implementation_hitachi_HD44780.h	156;"	d
LED_PIN	pins_RAMPS_14.h	92;"	d
LEFT_PROBE_BED_POSITION	Configuration.h	494;"	d
LF	ultralcd.cpp	/^static float RF = 0, LF = 0, RB = 0, LB = 0;$/;"	v	file:
LONG_FILENAME_HOST_SUPPORT	Conditionals.h	97;"	d
LONG_FILENAME_LENGTH	SdFatConfig.h	130;"	d
LPQ_MAX_LEN	Configuration_adv.h	98;"	d
LS_Count	cardreader.h	/^enum LsAction { LS_SerialPrint, LS_Count, LS_GetFilename };$/;"	e	enum:LsAction
LS_DATE	SdBaseFile.h	/^uint8_t const LS_DATE = 1;$/;"	v
LS_GetFilename	cardreader.h	/^enum LsAction { LS_SerialPrint, LS_Count, LS_GetFilename };$/;"	e	enum:LsAction
LS_R	SdBaseFile.h	/^uint8_t const LS_R = 4;$/;"	v
LS_SIZE	SdBaseFile.h	/^uint8_t const LS_SIZE = 2;$/;"	v
LS_SerialPrint	cardreader.h	/^enum LsAction { LS_SerialPrint, LS_Count, LS_GetFilename };$/;"	e	enum:LsAction
Lock_z2_motor	stepper.cpp	/^  void Lock_z2_motor(bool state) { locked_z2_motor = state; }$/;"	f
Lock_z_motor	stepper.cpp	/^  void Lock_z_motor(bool state) { locked_z_motor = state; }$/;"	f
LsAction	cardreader.h	/^enum LsAction { LS_SerialPrint, LS_Count, LS_GetFilename };$/;"	g
M100_FREE_MEMORY_CORRUPTOR	M100_Free_Mem_Chk.cpp	41;"	d	file:
M100_FREE_MEMORY_DUMPER	M100_Free_Mem_Chk.cpp	40;"	d	file:
MACHINE_NAME	language.h	78;"	d
MACHINE_NAME	language.h	79;"	d
MACHINE_NAME	language.h	82;"	d
MACHINE_NAME	language.h	83;"	d
MACHINE_NAME	planner.cpp	/^char MACHINE_NAME[12];$/;"	v
MACHINE_UUID	language.h	88;"	d
MACROS_H	macros.h	24;"	d
MANUAL_FEEDRATE	Configuration_adv.h	301;"	d
MANUAL_X_HOME_POS	Configuration.h	584;"	d
MANUAL_Y_HOME_POS	Configuration.h	585;"	d
MANUAL_Z_HOME_POS	Configuration.h	586;"	d
MAPPER_NON	language_en.h	34;"	d
MARLIN_H	Marlin.h	23;"	d
MASK	fastio.h	38;"	d
MAX6675_DISCARD_BITS	temperature.cpp	1311;"	d	file:
MAX6675_DISCARD_BITS	temperature.cpp	1315;"	d	file:
MAX6675_ERROR_MASK	temperature.cpp	1310;"	d	file:
MAX6675_ERROR_MASK	temperature.cpp	1314;"	d	file:
MAX6675_HEAT_INTERVAL	temperature.cpp	1306;"	d	file:
MAX6675_IS_MAX31855	Conditionals.h	474;"	d
MAX6675_SS	pins_RAMPS_14.h	282;"	d
MAX6675_SS	pins_RAMPS_14.h	284;"	d
MAXPATHNAMELENGTH	cardreader.h	87;"	d
MAX_BED_POWER	Configuration.h	240;"	d
MAX_CMD_SIZE	Configuration_adv.h	476;"	d
MAX_DIR_DEPTH	cardreader.h	28;"	d
MAX_FREQ_TIME	planner.cpp	148;"	d	file:
MAX_MEASUREMENT_DELAY	Configuration.h	1078;"	d
MAX_OVERSHOOT_PID_AUTOTUNE	temperature.cpp	401;"	d	file:
MAX_PROBE_X	Conditionals.h	358;"	d
MAX_PROBE_Y	Conditionals.h	360;"	d
MAX_PULSE_WIDTH	servo.h	121;"	d
MAX_REDUNDANT_TEMP_SENSOR_DIFF	Configuration.h	159;"	d
MAX_SERVOS	servo.h	126;"	d
MAX_STEP_FREQUENCY	Conditionals.h	409;"	d
MAX_STEP_FREQUENCY	Conditionals.h	413;"	d
MAX_STEP_FREQUENCY	Conditionals.h	415;"	d
MAX_VFAT_ENTRIES	SdFatConfig.h	128;"	d
MB	pins.h	45;"	d
MEASURED_LOWER_LIMIT	Configuration.h	1077;"	d
MEASURED_UPPER_LIMIT	Configuration.h	1076;"	d
MEASUREMENT_DELAY_CM	Configuration.h	1074;"	d
MECHANICAL_PROBE	Conditionals.h	395;"	d
MEGA_SOFT_SPI	SdFatConfig.h	99;"	d
MENU_ITEM	ultralcd.cpp	230;"	d	file:
MENU_ITEM_DUMMY	ultralcd.cpp	252;"	d	file:
MENU_ITEM_EDIT	ultralcd.cpp	253;"	d	file:
MENU_ITEM_EDIT_CALLBACK	ultralcd.cpp	254;"	d	file:
MENU_MULTIPLIER_ITEM	ultralcd.cpp	243;"	d	file:
MENU_MULTIPLIER_ITEM_EDIT	ultralcd.cpp	256;"	d	file:
MENU_MULTIPLIER_ITEM_EDIT	ultralcd.cpp	259;"	d	file:
MENU_MULTIPLIER_ITEM_EDIT_CALLBACK	ultralcd.cpp	257;"	d	file:
MENU_MULTIPLIER_ITEM_EDIT_CALLBACK	ultralcd.cpp	260;"	d	file:
MICROSTEP1	Conditionals.h	421;"	d
MICROSTEP16	Conditionals.h	425;"	d
MICROSTEP2	Conditionals.h	422;"	d
MICROSTEP4	Conditionals.h	423;"	d
MICROSTEP8	Conditionals.h	424;"	d
MICROSTEP_MODES	Configuration_adv.h	324;"	d
MINIMUM_PLANNER_SPEED	Configuration_adv.h	321;"	d
MIN_PROBE_EDGE	Configuration.h	500;"	d
MIN_PROBE_X	Conditionals.h	357;"	d
MIN_PROBE_Y	Conditionals.h	359;"	d
MIN_PULSE_WIDTH	servo.h	120;"	d
MIN_RETRACT	Configuration_adv.h	498;"	d
MIN_Z_HEIGHT_FOR_HOMING	Configuration.h	422;"	d
MISO	fastio.h	123;"	d
MISO	fastio.h	2052;"	d
MISO	fastio.h	3354;"	d
MISO	fastio.h	463;"	d
MISO	fastio.h	961;"	d
MISO_PIN	Sd2PinMap.h	/^uint8_t const MISO_PIN  = 23;    \/\/ B3$/;"	v
MISO_PIN	Sd2PinMap.h	/^uint8_t const MISO_PIN = 12;  \/\/ B3$/;"	v
MISO_PIN	Sd2PinMap.h	/^uint8_t const MISO_PIN = 12;  \/\/ B4$/;"	v
MISO_PIN	Sd2PinMap.h	/^uint8_t const MISO_PIN = 3;  \/\/ B3$/;"	v
MISO_PIN	Sd2PinMap.h	/^uint8_t const MISO_PIN = 50;  \/\/ B3$/;"	v
MISO_PIN	Sd2PinMap.h	/^uint8_t const MISO_PIN = 6;  \/\/ B6$/;"	v
MISO_PIN	Sd2PinMap.h	335;"	d
MISO_PIN	Sd2PinMap.h	54;"	d
MISO_PIN	pins_RAMPS_14.h	290;"	d
MM_PER_ARC_SEGMENT	Configuration_adv.h	449;"	d
MOSI	fastio.h	124;"	d
MOSI	fastio.h	2053;"	d
MOSI	fastio.h	3355;"	d
MOSI	fastio.h	464;"	d
MOSI	fastio.h	962;"	d
MOSI_PIN	Sd2PinMap.h	/^uint8_t const MOSI_PIN  = 22;    \/\/ B2$/;"	v
MOSI_PIN	Sd2PinMap.h	/^uint8_t const MOSI_PIN = 11;  \/\/ B2$/;"	v
MOSI_PIN	Sd2PinMap.h	/^uint8_t const MOSI_PIN = 11;  \/\/ B3$/;"	v
MOSI_PIN	Sd2PinMap.h	/^uint8_t const MOSI_PIN = 2;  \/\/ B2$/;"	v
MOSI_PIN	Sd2PinMap.h	/^uint8_t const MOSI_PIN = 51;  \/\/ B2$/;"	v
MOSI_PIN	Sd2PinMap.h	/^uint8_t const MOSI_PIN = 5;  \/\/ B5$/;"	v
MOSI_PIN	Sd2PinMap.h	334;"	d
MOSI_PIN	Sd2PinMap.h	53;"	d
MOSI_PIN	pins_RAMPS_14.h	291;"	d
MOTHERBOARD	Configuration.h	81;"	d
MSG_1ST_FAN_SPEED	ultralcd.cpp	1991;"	d	file:
MSG_1ST_FAN_SPEED	ultralcd.cpp	942;"	d	file:
MSG_ACC	language_en.h	260;"	d
MSG_ACTIVE_EXTRUDER	language.h	137;"	d
MSG_AMAX	language_en.h	293;"	d
MSG_AT	language.h	203;"	d
MSG_AUTHOR	language.h	111;"	d
MSG_AUTORETRACT	language_en.h	422;"	d
MSG_AUTOSTART	language_en.h	56;"	d
MSG_AUTOTEMP	language_en.h	227;"	d
MSG_AUTO_HOME	language_en.h	62;"	d
MSG_A_RETRACT	language_en.h	296;"	d
MSG_A_TRAVEL	language_en.h	299;"	d
MSG_B	language.h	201;"	d
MSG_BABYSTEPPING_X	language.h	177;"	d
MSG_BABYSTEPPING_Y	language.h	178;"	d
MSG_BABYSTEPPING_Z	language.h	179;"	d
MSG_BABYSTEP_X	language_en.h	443;"	d
MSG_BABYSTEP_Y	language_en.h	446;"	d
MSG_BABYSTEP_Z	language_en.h	449;"	d
MSG_BED	language_en.h	206;"	d
MSG_BED_DONE	language_en.h	491;"	d
MSG_BED_HEATING	language_en.h	488;"	d
MSG_BED_Z	language_en.h	188;"	d
MSG_BEGIN_FILE_LIST	language.h	123;"	d
MSG_BIAS	language.h	191;"	d
MSG_BROWNOUT_RESET	language.h	108;"	d
MSG_BUSY_PAUSED_FOR_INPUT	language.h	134;"	d
MSG_BUSY_PAUSED_FOR_USER	language.h	133;"	d
MSG_BUSY_PROCESSING	language.h	132;"	d
MSG_CARD_MENU	language_en.h	374;"	d
MSG_CLASSIC_PID	language.h	197;"	d
MSG_CNG_SDCARD	language_en.h	431;"	d
MSG_CONFIGURATION_VER	language.h	112;"	d
MSG_CONTRAST	language_en.h	341;"	d
MSG_CONTROL	language_en.h	215;"	d
MSG_CONTROL_RETRACT	language_en.h	401;"	d
MSG_CONTROL_RETRACTF	language_en.h	407;"	d
MSG_CONTROL_RETRACT_RECOVER	language_en.h	413;"	d
MSG_CONTROL_RETRACT_RECOVERF	language_en.h	419;"	d
MSG_CONTROL_RETRACT_RECOVER_SWAP	language_en.h	416;"	d
MSG_CONTROL_RETRACT_SWAP	language_en.h	404;"	d
MSG_CONTROL_RETRACT_ZLIFT	language_en.h	410;"	d
MSG_COOLDOWN	language_en.h	131;"	d
MSG_COUNT_A	language.h	129;"	d
MSG_COUNT_X	language.h	128;"	d
MSG_D	language.h	192;"	d
MSG_DEBUG_COMMUNICATION	language.h	229;"	d
MSG_DEBUG_DRYRUN	language.h	228;"	d
MSG_DEBUG_ECHO	language.h	225;"	d
MSG_DEBUG_ERRORS	language.h	227;"	d
MSG_DEBUG_INFO	language.h	226;"	d
MSG_DEBUG_LEVELING	language.h	230;"	d
MSG_DEBUG_OFF	language.h	224;"	d
MSG_DEBUG_PREFIX	language.h	223;"	d
MSG_DELTA_CALIBRATE	language_en.h	494;"	d
MSG_DELTA_CALIBRATE_CENTER	language_en.h	506;"	d
MSG_DELTA_CALIBRATE_X	language_en.h	497;"	d
MSG_DELTA_CALIBRATE_Y	language_en.h	500;"	d
MSG_DELTA_CALIBRATE_Z	language_en.h	503;"	d
MSG_DIAM_E1	language_en.h	329;"	d
MSG_DIAM_E2	language_en.h	332;"	d
MSG_DIAM_E3	language_en.h	335;"	d
MSG_DIAM_E4	language_en.h	338;"	d
MSG_DISABLE_STEPPERS	language_en.h	59;"	d
MSG_DWELL	language_en.h	380;"	d
MSG_E	language_en.h	284;"	d
MSG_E1	language_en.h	248;"	d
MSG_E2	language_en.h	251;"	d
MSG_E3	language_en.h	254;"	d
MSG_E4	language_en.h	257;"	d
MSG_ENDSTOPS_HIT	language.h	173;"	d
MSG_ENDSTOP_ABORT	language_en.h	452;"	d
MSG_ENDSTOP_HIT	language.h	152;"	d
MSG_ENDSTOP_OPEN	language.h	153;"	d
MSG_END_FILE_LIST	language.h	124;"	d
MSG_END_HOUR	language_en.h	476;"	d
MSG_END_MINUTE	language_en.h	479;"	d
MSG_ERR_CHECKSUM_MISMATCH	language.h	119;"	d
MSG_ERR_COLD_EXTRUDE_STOP	language.h	174;"	d
MSG_ERR_EEPROM_WRITE	language.h	182;"	d
MSG_ERR_KILLED	language.h	130;"	d
MSG_ERR_LINE_NO	language.h	118;"	d
MSG_ERR_LONG_EXTRUDE_STOP	language.h	175;"	d
MSG_ERR_M303_DISABLED	language.h	150;"	d
MSG_ERR_M421_REQUIRES_XYZ	language.h	147;"	d
MSG_ERR_M428_TOO_FAR	language.h	149;"	d
MSG_ERR_MATERIAL_INDEX	language.h	146;"	d
MSG_ERR_MAXTEMP	language_en.h	464;"	d
MSG_ERR_MAXTEMP_BED	language_en.h	470;"	d
MSG_ERR_MESH_INDEX_OOB	language.h	148;"	d
MSG_ERR_MINTEMP	language_en.h	467;"	d
MSG_ERR_MINTEMP_BED	language_en.h	473;"	d
MSG_ERR_NO_CHECKSUM	language.h	120;"	d
MSG_ERR_NO_LINENUMBER_WITH_CHECKSUM	language.h	121;"	d
MSG_ERR_NO_THERMISTORS	language.h	127;"	d
MSG_ERR_REDUNDANT_TEMP	language_en.h	458;"	d
MSG_ERR_STOPPED	language.h	131;"	d
MSG_ESTEPS	language_en.h	311;"	d
MSG_EXTERNAL_RESET	language.h	107;"	d
MSG_EXTRUDE	language_en.h	140;"	d
MSG_Enqueueing	language.h	105;"	d
MSG_FACTOR	language_en.h	224;"	d
MSG_FAN_SPEED	language_en.h	209;"	d
MSG_FILAMENTCHANGE	language_en.h	425;"	d
MSG_FILAMENT_DIAM	language_en.h	326;"	d
MSG_FILE_PRINTED	language.h	122;"	d
MSG_FILE_SAVED	language.h	117;"	d
MSG_FLOW	language_en.h	212;"	d
MSG_FREE_MEMORY	language.h	113;"	d
MSG_H1	language_en.h	119;"	d
MSG_H2	language_en.h	122;"	d
MSG_H3	language_en.h	125;"	d
MSG_H4	language_en.h	128;"	d
MSG_HEATER_BED	language.h	214;"	d
MSG_HEATING	language_en.h	482;"	d
MSG_HEATING_COMPLETE	language_en.h	485;"	d
MSG_HEATING_FAILED_LCD	language_en.h	455;"	d
MSG_HOME_OFFSETS_APPLIED	language_en.h	83;"	d
MSG_HOTEND_OFFSET	language.h	154;"	d
MSG_INIT_SDCARD	language_en.h	428;"	d
MSG_INVALID_EXTRUDER	language.h	125;"	d
MSG_INVALID_EXTRUDER_NUM	language.h	212;"	d
MSG_INVALID_SOLENOID	language.h	126;"	d
MSG_KD	language.h	200;"	d
MSG_KI	language.h	199;"	d
MSG_KILLED	language_en.h	395;"	d
MSG_KP	language.h	198;"	d
MSG_KU	language.h	195;"	d
MSG_LCD_ENDSTOPS	language_en.h	50;"	d
MSG_LEVEL_BED	language_en.h	149;"	d
MSG_LEVEL_BED_CANCEL	language_en.h	77;"	d
MSG_LEVEL_BED_DONE	language_en.h	74;"	d
MSG_LEVEL_BED_HOMING	language_en.h	65;"	d
MSG_LEVEL_BED_NEXT_POINT	language_en.h	71;"	d
MSG_LEVEL_BED_WAITING	language_en.h	68;"	d
MSG_LOAD_EPROM	language_en.h	347;"	d
MSG_M119_REPORT	language.h	151;"	d
MSG_MAIN	language_en.h	53;"	d
MSG_MARLIN	language.h	101;"	d
MSG_MAX	language_en.h	221;"	d
MSG_MIN	language_en.h	218;"	d
MSG_MOTION	language_en.h	317;"	d
MSG_MOVE_01MM	language_en.h	176;"	d
MSG_MOVE_10MM	language_en.h	182;"	d
MSG_MOVE_1MM	language_en.h	179;"	d
MSG_MOVE_AXIS	language_en.h	146;"	d
MSG_MOVE_E	language_en.h	161;"	d
MSG_MOVE_E1	language_en.h	164;"	d
MSG_MOVE_E2	language_en.h	167;"	d
MSG_MOVE_E3	language_en.h	170;"	d
MSG_MOVE_E4	language_en.h	173;"	d
MSG_MOVE_X	language_en.h	152;"	d
MSG_MOVE_Y	language_en.h	155;"	d
MSG_MOVE_Z	language_en.h	158;"	d
MSG_N1	language_en.h	194;"	d
MSG_N2	language_en.h	197;"	d
MSG_N3	language_en.h	200;"	d
MSG_N4	language_en.h	203;"	d
MSG_NOZZLE	language_en.h	191;"	d
MSG_NO_CARD	language_en.h	377;"	d
MSG_NO_MOVE	language_en.h	392;"	d
MSG_OFF	language_en.h	233;"	d
MSG_OK	language.h	115;"	d
MSG_ON	language_en.h	230;"	d
MSG_PAUSE_PRINT	language_en.h	365;"	d
MSG_PID_AUTOTUNE	language.h	185;"	d
MSG_PID_AUTOTUNE_FAILED	language.h	187;"	d
MSG_PID_AUTOTUNE_FINISHED	language.h	204;"	d
MSG_PID_AUTOTUNE_START	language.h	186;"	d
MSG_PID_BAD_EXTRUDER_NUM	language.h	188;"	d
MSG_PID_C	language_en.h	245;"	d
MSG_PID_D	language_en.h	242;"	d
MSG_PID_DEBUG	language.h	205;"	d
MSG_PID_DEBUG_CTERM	language.h	211;"	d
MSG_PID_DEBUG_DTERM	language.h	210;"	d
MSG_PID_DEBUG_INPUT	language.h	206;"	d
MSG_PID_DEBUG_ITERM	language.h	209;"	d
MSG_PID_DEBUG_OUTPUT	language.h	207;"	d
MSG_PID_DEBUG_PTERM	language.h	208;"	d
MSG_PID_I	language_en.h	239;"	d
MSG_PID_P	language_en.h	236;"	d
MSG_PID_TEMP_TOO_HIGH	language.h	189;"	d
MSG_PID_TIMEOUT	language.h	190;"	d
MSG_PLANNER_BUFFER_BYTES	language.h	114;"	d
MSG_POWERUP	language.h	106;"	d
MSG_PREHEAT_ABS	language_en.h	104;"	d
MSG_PREHEAT_ABS_ALL	language_en.h	110;"	d
MSG_PREHEAT_ABS_BEDONLY	language_en.h	113;"	d
MSG_PREHEAT_ABS_N	language_en.h	107;"	d
MSG_PREHEAT_ABS_SETTINGS	language_en.h	116;"	d
MSG_PREHEAT_PLA	language_en.h	89;"	d
MSG_PREHEAT_PLA_ALL	language_en.h	95;"	d
MSG_PREHEAT_PLA_BEDONLY	language_en.h	98;"	d
MSG_PREHEAT_PLA_N	language_en.h	92;"	d
MSG_PREHEAT_PLA_SETTINGS	language_en.h	101;"	d
MSG_PREPARE	language_en.h	359;"	d
MSG_PRINT_ABORTED	language_en.h	389;"	d
MSG_REDUNDANCY	language.h	216;"	d
MSG_REFRESH	language_en.h	353;"	d
MSG_RESEND	language.h	135;"	d
MSG_RESTORE_FAILSAFE	language_en.h	350;"	d
MSG_RESUME_PRINT	language_en.h	368;"	d
MSG_RESUMING	language_en.h	386;"	d
MSG_RETRACT	language_en.h	143;"	d
MSG_SD_CANT_ENTER_SUBDIR	language.h	170;"	d
MSG_SD_CANT_OPEN_SUBDIR	language.h	156;"	d
MSG_SD_CARD_OK	language.h	160;"	d
MSG_SD_ERR_WRITE_TO_FILE	language.h	169;"	d
MSG_SD_FILE_OPENED	language.h	163;"	d
MSG_SD_FILE_SELECTED	language.h	165;"	d
MSG_SD_INIT_FAIL	language.h	157;"	d
MSG_SD_INSERTED	language_en.h	44;"	d
MSG_SD_NOT_PRINTING	language.h	168;"	d
MSG_SD_OPENROOT_FAIL	language.h	159;"	d
MSG_SD_OPEN_FILE_FAIL	language.h	162;"	d
MSG_SD_PRINTING_BYTE	language.h	167;"	d
MSG_SD_REMOVED	language_en.h	47;"	d
MSG_SD_SIZE	language.h	164;"	d
MSG_SD_VOL_INIT_FAIL	language.h	158;"	d
MSG_SD_WORKDIR_FAIL	language.h	161;"	d
MSG_SD_WRITE_TO_FILE	language.h	166;"	d
MSG_SERIAL_ERROR_MENU_STRUCTURE	language.h	180;"	d
MSG_SET_HOME_OFFSETS	language_en.h	80;"	d
MSG_SET_ORIGIN	language_en.h	86;"	d
MSG_SOFTWARE_RESET	language.h	110;"	d
MSG_SPEED	language_en.h	185;"	d
MSG_STEPPER_TOO_HIGH	language.h	172;"	d
MSG_STOPPED	language_en.h	398;"	d
MSG_STOPPED_HEATER	language.h	215;"	d
MSG_STOP_PRINT	language_en.h	371;"	d
MSG_STORE_EPROM	language_en.h	344;"	d
MSG_SWITCH_PS_OFF	language_en.h	137;"	d
MSG_SWITCH_PS_ON	language_en.h	134;"	d
MSG_T	language.h	202;"	d
MSG_TEMPERATURE	language_en.h	314;"	d
MSG_THERMAL_RUNAWAY	language_en.h	461;"	d
MSG_TOO_COLD_FOR_M600	language.h	176;"	d
MSG_TU	language.h	196;"	d
MSG_TUNE	language_en.h	362;"	d
MSG_T_HEATING_FAILED	language.h	217;"	d
MSG_T_MAX	language.h	194;"	d
MSG_T_MAXTEMP	language.h	219;"	d
MSG_T_MIN	language.h	193;"	d
MSG_T_MINTEMP	language.h	220;"	d
MSG_T_THERMAL_RUNAWAY	language.h	218;"	d
MSG_UNKNOWN_COMMAND	language.h	136;"	d
MSG_USERWAIT	language_en.h	383;"	d
MSG_VE_JERK	language_en.h	269;"	d
MSG_VMAX	language_en.h	272;"	d
MSG_VMIN	language_en.h	287;"	d
MSG_VOLUMETRIC	language_en.h	320;"	d
MSG_VOLUMETRIC_ENABLED	language_en.h	323;"	d
MSG_VTRAV_MIN	language_en.h	290;"	d
MSG_VXY_JERK	language_en.h	263;"	d
MSG_VZ_JERK	language_en.h	266;"	d
MSG_WAIT	language.h	116;"	d
MSG_WATCH	language_en.h	356;"	d
MSG_WATCHDOG_RESET	language.h	109;"	d
MSG_X	language_en.h	275;"	d
MSG_XSTEPS	language_en.h	302;"	d
MSG_X_MAX	language.h	139;"	d
MSG_X_MIN	language.h	138;"	d
MSG_Y	language_en.h	278;"	d
MSG_YSTEPS	language_en.h	305;"	d
MSG_YX_UNHOMED	language_en.h	437;"	d
MSG_Y_MAX	language.h	141;"	d
MSG_Y_MIN	language.h	140;"	d
MSG_Z	language_en.h	281;"	d
MSG_Z2_MAX	language.h	144;"	d
MSG_ZPROBE_OUT	language_en.h	434;"	d
MSG_ZPROBE_ZOFFSET	language_en.h	440;"	d
MSG_ZSTEPS	language_en.h	308;"	d
MSG_Z_MAX	language.h	143;"	d
MSG_Z_MIN	language.h	142;"	d
MSG_Z_PROBE	language.h	145;"	d
MYSERIAL	Marlin.h	69;"	d
MYSERIAL	Marlin.h	71;"	d
MYSERIAL	Marlin.h	74;"	d
M_PI	Conditionals.h	34;"	d
M_RXCIEx	MarlinSerial.h	64;"	d
M_RXCx	MarlinSerial.h	69;"	d
M_RXENx	MarlinSerial.h	62;"	d
M_TXENx	MarlinSerial.h	63;"	d
M_U2Xx	MarlinSerial.h	71;"	d
M_UBRRxH	MarlinSerial.h	67;"	d
M_UBRRxL	MarlinSerial.h	68;"	d
M_UCSRxA	MarlinSerial.h	60;"	d
M_UCSRxB	MarlinSerial.h	61;"	d
M_UDREx	MarlinSerial.h	65;"	d
M_UDRx	MarlinSerial.h	66;"	d
M_USARTx_RX_vect	MarlinSerial.h	70;"	d
MarlinBusyState	Marlin_main.cpp	/^enum MarlinBusyState {$/;"	g	file:
MarlinSerial	MarlinSerial.cpp	/^MarlinSerial::MarlinSerial() { }$/;"	f	class:MarlinSerial
MarlinSerial	MarlinSerial.h	/^class MarlinSerial { \/\/: public Stream$/;"	c
MarlinSerial_h	MarlinSerial.h	31;"	d
MeasureTemp_0	temperature.cpp	/^  MeasureTemp_0,$/;"	e	enum:TempState	file:
MeasureTemp_1	temperature.cpp	/^  MeasureTemp_1,$/;"	e	enum:TempState	file:
MeasureTemp_2	temperature.cpp	/^  MeasureTemp_2,$/;"	e	enum:TempState	file:
MeasureTemp_3	temperature.cpp	/^  MeasureTemp_3,$/;"	e	enum:TempState	file:
MeasureTemp_BED	temperature.cpp	/^  MeasureTemp_BED,$/;"	e	enum:TempState	file:
Measure_FILWIDTH	temperature.cpp	/^  Measure_FILWIDTH,$/;"	e	enum:TempState	file:
MeshLevelingState	Marlin_main.cpp	/^enum MeshLevelingState { MeshReport, MeshStart, MeshNext, MeshSet, MeshSetZOffset };$/;"	g	file:
MeshNext	Marlin_main.cpp	/^enum MeshLevelingState { MeshReport, MeshStart, MeshNext, MeshSet, MeshSetZOffset };$/;"	e	enum:MeshLevelingState	file:
MeshReport	Marlin_main.cpp	/^enum MeshLevelingState { MeshReport, MeshStart, MeshNext, MeshSet, MeshSetZOffset };$/;"	e	enum:MeshLevelingState	file:
MeshSet	Marlin_main.cpp	/^enum MeshLevelingState { MeshReport, MeshStart, MeshNext, MeshSet, MeshSetZOffset };$/;"	e	enum:MeshLevelingState	file:
MeshSetZOffset	Marlin_main.cpp	/^enum MeshLevelingState { MeshReport, MeshStart, MeshNext, MeshSet, MeshSetZOffset };$/;"	e	enum:MeshLevelingState	file:
MeshStart	Marlin_main.cpp	/^enum MeshLevelingState { MeshReport, MeshStart, MeshNext, MeshSet, MeshSetZOffset };$/;"	e	enum:MeshLevelingState	file:
MultiU16X8toH16	stepper.cpp	202;"	d	file:
MultiU24X32toH16	stepper.cpp	233;"	d	file:
NEWPANEL	Conditionals.h	109;"	d
NEWPANEL	Conditionals.h	114;"	d
NEWPANEL	Conditionals.h	121;"	d
NEWPANEL	Conditionals.h	127;"	d
NEWPANEL	Conditionals.h	141;"	d
NEWPANEL	Conditionals.h	164;"	d
NEWPANEL	Conditionals.h	177;"	d
NEWPANEL	Conditionals.h	188;"	d
NEWPANEL	Conditionals.h	201;"	d
NEWPANEL	Conditionals.h	53;"	d
NOLESS	macros.h	41;"	d
NOMORE	macros.h	42;"	d
NORM_E_DIR	stepper_indirection.h	181;"	d
NORM_E_DIR	stepper_indirection.h	185;"	d
NORM_E_DIR	stepper_indirection.h	193;"	d
NORM_E_DIR	stepper_indirection.h	198;"	d
NORM_E_DIR	stepper_indirection.h	203;"	d
NOT_BUSY	Marlin_main.cpp	/^  NOT_BUSY,           \/\/ Not in a handler$/;"	e	enum:MarlinBusyState	file:
NUMERIC	macros.h	54;"	d
NUMERIC_SIGNED	macros.h	55;"	d
NUM_AXIS	Marlin.h	202;"	d
NUM_SERVOS	Configuration.h	1031;"	d
N_ARC_CORRECTION	Configuration_adv.h	450;"	d
OC0A	fastio.h	132;"	d
OC0A	fastio.h	3363;"	d
OC0A	fastio.h	472;"	d
OC0A	fastio.h	970;"	d
OC0B	fastio.h	133;"	d
OC0B	fastio.h	3364;"	d
OC0B	fastio.h	473;"	d
OC0B	fastio.h	971;"	d
OC1A	fastio.h	134;"	d
OC1A	fastio.h	3365;"	d
OC1A	fastio.h	474;"	d
OC1A	fastio.h	972;"	d
OC1B	fastio.h	135;"	d
OC1B	fastio.h	3366;"	d
OC1B	fastio.h	475;"	d
OC1B	fastio.h	973;"	d
OC2A	fastio.h	136;"	d
OC2A	fastio.h	3367;"	d
OC2A	fastio.h	476;"	d
OC2A	fastio.h	974;"	d
OC2B	fastio.h	137;"	d
OC2B	fastio.h	477;"	d
OC2B	fastio.h	975;"	d
OC3A	fastio.h	3368;"	d
OC3A	fastio.h	976;"	d
OC3B	fastio.h	3369;"	d
OC3B	fastio.h	977;"	d
OC3C	fastio.h	3370;"	d
OC3C	fastio.h	978;"	d
OC4A	fastio.h	979;"	d
OC4B	fastio.h	980;"	d
OC4C	fastio.h	981;"	d
OC5A	fastio.h	982;"	d
OC5B	fastio.h	983;"	d
OC5C	fastio.h	984;"	d
OCR1A_nominal	stepper.cpp	/^static unsigned short OCR1A_nominal;$/;"	v	file:
OCT	MarlinSerial.h	76;"	d
OUT_WRITE	fastio.h	108;"	d
OVERSAMPLENR	thermistortables.h	29;"	d
O_ACCMODE	SdBaseFile.h	/^uint8_t const O_ACCMODE = (O_READ | O_WRITE);$/;"	v
O_APPEND	SdBaseFile.h	/^uint8_t const O_APPEND = 0X04;$/;"	v
O_AT_END	SdBaseFile.h	/^uint8_t const O_AT_END = 0X20;$/;"	v
O_CREAT	SdBaseFile.h	/^uint8_t const O_CREAT = 0X40;$/;"	v
O_EXCL	SdBaseFile.h	/^uint8_t const O_EXCL = 0X80;$/;"	v
O_RDONLY	SdBaseFile.h	/^uint8_t const O_RDONLY = O_READ;$/;"	v
O_RDWR	SdBaseFile.h	/^uint8_t const O_RDWR = (O_READ | O_WRITE);$/;"	v
O_READ	SdBaseFile.h	/^uint8_t const O_READ = 0X01;$/;"	v
O_SYNC	SdBaseFile.h	/^uint8_t const O_SYNC = 0X08;$/;"	v
O_TRUNC	SdBaseFile.h	/^uint8_t const O_TRUNC = 0X10;$/;"	v
O_WRITE	SdBaseFile.h	/^uint8_t const O_WRITE = 0X02;$/;"	v
O_WRONLY	SdBaseFile.h	/^uint8_t const O_WRONLY = O_WRITE;$/;"	v
PA0	fastio.h	1508;"	d
PA0	fastio.h	2405;"	d
PA0	fastio.h	3049;"	d
PA0	fastio.h	3706;"	d
PA0	fastio.h	726;"	d
PA0_DDR	fastio.h	1512;"	d
PA0_DDR	fastio.h	2410;"	d
PA0_DDR	fastio.h	3054;"	d
PA0_DDR	fastio.h	3710;"	d
PA0_DDR	fastio.h	730;"	d
PA0_PIN	fastio.h	1509;"	d
PA0_PIN	fastio.h	2406;"	d
PA0_PIN	fastio.h	3050;"	d
PA0_PIN	fastio.h	3707;"	d
PA0_PIN	fastio.h	727;"	d
PA0_PWM	fastio.h	1513;"	d
PA0_PWM	fastio.h	2409;"	d
PA0_PWM	fastio.h	3053;"	d
PA0_PWM	fastio.h	3711;"	d
PA0_PWM	fastio.h	731;"	d
PA0_RPORT	fastio.h	1510;"	d
PA0_RPORT	fastio.h	2407;"	d
PA0_RPORT	fastio.h	3051;"	d
PA0_RPORT	fastio.h	3708;"	d
PA0_RPORT	fastio.h	728;"	d
PA0_WPORT	fastio.h	1511;"	d
PA0_WPORT	fastio.h	2408;"	d
PA0_WPORT	fastio.h	3052;"	d
PA0_WPORT	fastio.h	3709;"	d
PA0_WPORT	fastio.h	729;"	d
PA1	fastio.h	1514;"	d
PA1	fastio.h	2411;"	d
PA1	fastio.h	3055;"	d
PA1	fastio.h	3712;"	d
PA1	fastio.h	733;"	d
PA1_DDR	fastio.h	1518;"	d
PA1_DDR	fastio.h	2416;"	d
PA1_DDR	fastio.h	3060;"	d
PA1_DDR	fastio.h	3716;"	d
PA1_DDR	fastio.h	737;"	d
PA1_PIN	fastio.h	1515;"	d
PA1_PIN	fastio.h	2412;"	d
PA1_PIN	fastio.h	3056;"	d
PA1_PIN	fastio.h	3713;"	d
PA1_PIN	fastio.h	734;"	d
PA1_PWM	fastio.h	1519;"	d
PA1_PWM	fastio.h	2415;"	d
PA1_PWM	fastio.h	3059;"	d
PA1_PWM	fastio.h	3717;"	d
PA1_PWM	fastio.h	738;"	d
PA1_RPORT	fastio.h	1516;"	d
PA1_RPORT	fastio.h	2413;"	d
PA1_RPORT	fastio.h	3057;"	d
PA1_RPORT	fastio.h	3714;"	d
PA1_RPORT	fastio.h	735;"	d
PA1_WPORT	fastio.h	1517;"	d
PA1_WPORT	fastio.h	2414;"	d
PA1_WPORT	fastio.h	3058;"	d
PA1_WPORT	fastio.h	3715;"	d
PA1_WPORT	fastio.h	736;"	d
PA2	fastio.h	1520;"	d
PA2	fastio.h	2417;"	d
PA2	fastio.h	3061;"	d
PA2	fastio.h	3718;"	d
PA2	fastio.h	740;"	d
PA2_DDR	fastio.h	1524;"	d
PA2_DDR	fastio.h	2422;"	d
PA2_DDR	fastio.h	3066;"	d
PA2_DDR	fastio.h	3722;"	d
PA2_DDR	fastio.h	744;"	d
PA2_PIN	fastio.h	1521;"	d
PA2_PIN	fastio.h	2418;"	d
PA2_PIN	fastio.h	3062;"	d
PA2_PIN	fastio.h	3719;"	d
PA2_PIN	fastio.h	741;"	d
PA2_PWM	fastio.h	1525;"	d
PA2_PWM	fastio.h	2421;"	d
PA2_PWM	fastio.h	3065;"	d
PA2_PWM	fastio.h	3723;"	d
PA2_PWM	fastio.h	745;"	d
PA2_RPORT	fastio.h	1522;"	d
PA2_RPORT	fastio.h	2419;"	d
PA2_RPORT	fastio.h	3063;"	d
PA2_RPORT	fastio.h	3720;"	d
PA2_RPORT	fastio.h	742;"	d
PA2_WPORT	fastio.h	1523;"	d
PA2_WPORT	fastio.h	2420;"	d
PA2_WPORT	fastio.h	3064;"	d
PA2_WPORT	fastio.h	3721;"	d
PA2_WPORT	fastio.h	743;"	d
PA3	fastio.h	1526;"	d
PA3	fastio.h	2423;"	d
PA3	fastio.h	3067;"	d
PA3	fastio.h	3724;"	d
PA3	fastio.h	747;"	d
PA3_DDR	fastio.h	1530;"	d
PA3_DDR	fastio.h	2428;"	d
PA3_DDR	fastio.h	3072;"	d
PA3_DDR	fastio.h	3728;"	d
PA3_DDR	fastio.h	751;"	d
PA3_PIN	fastio.h	1527;"	d
PA3_PIN	fastio.h	2424;"	d
PA3_PIN	fastio.h	3068;"	d
PA3_PIN	fastio.h	3725;"	d
PA3_PIN	fastio.h	748;"	d
PA3_PWM	fastio.h	1531;"	d
PA3_PWM	fastio.h	2427;"	d
PA3_PWM	fastio.h	3071;"	d
PA3_PWM	fastio.h	3729;"	d
PA3_PWM	fastio.h	752;"	d
PA3_RPORT	fastio.h	1528;"	d
PA3_RPORT	fastio.h	2425;"	d
PA3_RPORT	fastio.h	3069;"	d
PA3_RPORT	fastio.h	3726;"	d
PA3_RPORT	fastio.h	749;"	d
PA3_WPORT	fastio.h	1529;"	d
PA3_WPORT	fastio.h	2426;"	d
PA3_WPORT	fastio.h	3070;"	d
PA3_WPORT	fastio.h	3727;"	d
PA3_WPORT	fastio.h	750;"	d
PA4	fastio.h	1532;"	d
PA4	fastio.h	2429;"	d
PA4	fastio.h	3073;"	d
PA4	fastio.h	3730;"	d
PA4	fastio.h	754;"	d
PA4_DDR	fastio.h	1536;"	d
PA4_DDR	fastio.h	2434;"	d
PA4_DDR	fastio.h	3078;"	d
PA4_DDR	fastio.h	3734;"	d
PA4_DDR	fastio.h	758;"	d
PA4_PIN	fastio.h	1533;"	d
PA4_PIN	fastio.h	2430;"	d
PA4_PIN	fastio.h	3074;"	d
PA4_PIN	fastio.h	3731;"	d
PA4_PIN	fastio.h	755;"	d
PA4_PWM	fastio.h	1537;"	d
PA4_PWM	fastio.h	2433;"	d
PA4_PWM	fastio.h	3077;"	d
PA4_PWM	fastio.h	3735;"	d
PA4_PWM	fastio.h	759;"	d
PA4_RPORT	fastio.h	1534;"	d
PA4_RPORT	fastio.h	2431;"	d
PA4_RPORT	fastio.h	3075;"	d
PA4_RPORT	fastio.h	3732;"	d
PA4_RPORT	fastio.h	756;"	d
PA4_WPORT	fastio.h	1535;"	d
PA4_WPORT	fastio.h	2432;"	d
PA4_WPORT	fastio.h	3076;"	d
PA4_WPORT	fastio.h	3733;"	d
PA4_WPORT	fastio.h	757;"	d
PA5	fastio.h	1538;"	d
PA5	fastio.h	2435;"	d
PA5	fastio.h	3079;"	d
PA5	fastio.h	3736;"	d
PA5	fastio.h	761;"	d
PA5_DDR	fastio.h	1542;"	d
PA5_DDR	fastio.h	2440;"	d
PA5_DDR	fastio.h	3084;"	d
PA5_DDR	fastio.h	3740;"	d
PA5_DDR	fastio.h	765;"	d
PA5_PIN	fastio.h	1539;"	d
PA5_PIN	fastio.h	2436;"	d
PA5_PIN	fastio.h	3080;"	d
PA5_PIN	fastio.h	3737;"	d
PA5_PIN	fastio.h	762;"	d
PA5_PWM	fastio.h	1543;"	d
PA5_PWM	fastio.h	2439;"	d
PA5_PWM	fastio.h	3083;"	d
PA5_PWM	fastio.h	3741;"	d
PA5_PWM	fastio.h	766;"	d
PA5_RPORT	fastio.h	1540;"	d
PA5_RPORT	fastio.h	2437;"	d
PA5_RPORT	fastio.h	3081;"	d
PA5_RPORT	fastio.h	3738;"	d
PA5_RPORT	fastio.h	763;"	d
PA5_WPORT	fastio.h	1541;"	d
PA5_WPORT	fastio.h	2438;"	d
PA5_WPORT	fastio.h	3082;"	d
PA5_WPORT	fastio.h	3739;"	d
PA5_WPORT	fastio.h	764;"	d
PA6	fastio.h	1544;"	d
PA6	fastio.h	2441;"	d
PA6	fastio.h	3085;"	d
PA6	fastio.h	3742;"	d
PA6	fastio.h	768;"	d
PA6_DDR	fastio.h	1548;"	d
PA6_DDR	fastio.h	2446;"	d
PA6_DDR	fastio.h	3090;"	d
PA6_DDR	fastio.h	3746;"	d
PA6_DDR	fastio.h	772;"	d
PA6_PIN	fastio.h	1545;"	d
PA6_PIN	fastio.h	2442;"	d
PA6_PIN	fastio.h	3086;"	d
PA6_PIN	fastio.h	3743;"	d
PA6_PIN	fastio.h	769;"	d
PA6_PWM	fastio.h	1549;"	d
PA6_PWM	fastio.h	2445;"	d
PA6_PWM	fastio.h	3089;"	d
PA6_PWM	fastio.h	3747;"	d
PA6_PWM	fastio.h	773;"	d
PA6_RPORT	fastio.h	1546;"	d
PA6_RPORT	fastio.h	2443;"	d
PA6_RPORT	fastio.h	3087;"	d
PA6_RPORT	fastio.h	3744;"	d
PA6_RPORT	fastio.h	770;"	d
PA6_WPORT	fastio.h	1547;"	d
PA6_WPORT	fastio.h	2444;"	d
PA6_WPORT	fastio.h	3088;"	d
PA6_WPORT	fastio.h	3745;"	d
PA6_WPORT	fastio.h	771;"	d
PA7	fastio.h	1550;"	d
PA7	fastio.h	2447;"	d
PA7	fastio.h	3091;"	d
PA7	fastio.h	3748;"	d
PA7	fastio.h	775;"	d
PA7_DDR	fastio.h	1554;"	d
PA7_DDR	fastio.h	2452;"	d
PA7_DDR	fastio.h	3096;"	d
PA7_DDR	fastio.h	3752;"	d
PA7_DDR	fastio.h	779;"	d
PA7_PIN	fastio.h	1551;"	d
PA7_PIN	fastio.h	2448;"	d
PA7_PIN	fastio.h	3092;"	d
PA7_PIN	fastio.h	3749;"	d
PA7_PIN	fastio.h	776;"	d
PA7_PWM	fastio.h	1555;"	d
PA7_PWM	fastio.h	2451;"	d
PA7_PWM	fastio.h	3095;"	d
PA7_PWM	fastio.h	3753;"	d
PA7_PWM	fastio.h	780;"	d
PA7_RPORT	fastio.h	1552;"	d
PA7_RPORT	fastio.h	2449;"	d
PA7_RPORT	fastio.h	3093;"	d
PA7_RPORT	fastio.h	3750;"	d
PA7_RPORT	fastio.h	777;"	d
PA7_WPORT	fastio.h	1553;"	d
PA7_WPORT	fastio.h	2450;"	d
PA7_WPORT	fastio.h	3094;"	d
PA7_WPORT	fastio.h	3751;"	d
PA7_WPORT	fastio.h	778;"	d
PACKED	SdFatStructs.h	/^} PACKED;$/;"	v	typeref:struct:directoryEntry
PACKED	SdFatStructs.h	/^} PACKED;$/;"	v	typeref:struct:directoryVFATEntry
PACKED	SdFatStructs.h	/^} PACKED;$/;"	v	typeref:struct:fat32_boot
PACKED	SdFatStructs.h	/^} PACKED;$/;"	v	typeref:struct:fat32_fsinfo
PACKED	SdFatStructs.h	/^} PACKED;$/;"	v	typeref:struct:fat_boot
PACKED	SdFatStructs.h	/^} PACKED;$/;"	v	typeref:struct:masterBootRecord
PACKED	SdFatStructs.h	/^} PACKED;$/;"	v	typeref:struct:partitionTable
PACKED	SdFatStructs.h	35;"	d
PAUSED_FOR_INPUT	Marlin_main.cpp	/^  PAUSED_FOR_INPUT    \/\/ Blocking pending text input (concept)$/;"	e	enum:MarlinBusyState	file:
PAUSED_FOR_USER	Marlin_main.cpp	/^  PAUSED_FOR_USER,    \/\/ Blocking pending any input$/;"	e	enum:MarlinBusyState	file:
PB0	fastio.h	1557;"	d
PB0	fastio.h	2454;"	d
PB0	fastio.h	280;"	d
PB0	fastio.h	3098;"	d
PB0	fastio.h	3755;"	d
PB0	fastio.h	783;"	d
PB0_DDR	fastio.h	1561;"	d
PB0_DDR	fastio.h	2459;"	d
PB0_DDR	fastio.h	284;"	d
PB0_DDR	fastio.h	3103;"	d
PB0_DDR	fastio.h	3759;"	d
PB0_DDR	fastio.h	787;"	d
PB0_PIN	fastio.h	1558;"	d
PB0_PIN	fastio.h	2455;"	d
PB0_PIN	fastio.h	281;"	d
PB0_PIN	fastio.h	3099;"	d
PB0_PIN	fastio.h	3756;"	d
PB0_PIN	fastio.h	784;"	d
PB0_PWM	fastio.h	1562;"	d
PB0_PWM	fastio.h	2458;"	d
PB0_PWM	fastio.h	285;"	d
PB0_PWM	fastio.h	3102;"	d
PB0_PWM	fastio.h	3760;"	d
PB0_PWM	fastio.h	788;"	d
PB0_RPORT	fastio.h	1559;"	d
PB0_RPORT	fastio.h	2456;"	d
PB0_RPORT	fastio.h	282;"	d
PB0_RPORT	fastio.h	3100;"	d
PB0_RPORT	fastio.h	3757;"	d
PB0_RPORT	fastio.h	785;"	d
PB0_WPORT	fastio.h	1560;"	d
PB0_WPORT	fastio.h	2457;"	d
PB0_WPORT	fastio.h	283;"	d
PB0_WPORT	fastio.h	3101;"	d
PB0_WPORT	fastio.h	3758;"	d
PB0_WPORT	fastio.h	786;"	d
PB1	fastio.h	1563;"	d
PB1	fastio.h	2460;"	d
PB1	fastio.h	287;"	d
PB1	fastio.h	3104;"	d
PB1	fastio.h	3761;"	d
PB1	fastio.h	790;"	d
PB1_DDR	fastio.h	1567;"	d
PB1_DDR	fastio.h	2465;"	d
PB1_DDR	fastio.h	291;"	d
PB1_DDR	fastio.h	3109;"	d
PB1_DDR	fastio.h	3765;"	d
PB1_DDR	fastio.h	794;"	d
PB1_PIN	fastio.h	1564;"	d
PB1_PIN	fastio.h	2461;"	d
PB1_PIN	fastio.h	288;"	d
PB1_PIN	fastio.h	3105;"	d
PB1_PIN	fastio.h	3762;"	d
PB1_PIN	fastio.h	791;"	d
PB1_PWM	fastio.h	1568;"	d
PB1_PWM	fastio.h	2464;"	d
PB1_PWM	fastio.h	292;"	d
PB1_PWM	fastio.h	3108;"	d
PB1_PWM	fastio.h	3766;"	d
PB1_PWM	fastio.h	795;"	d
PB1_RPORT	fastio.h	1565;"	d
PB1_RPORT	fastio.h	2462;"	d
PB1_RPORT	fastio.h	289;"	d
PB1_RPORT	fastio.h	3106;"	d
PB1_RPORT	fastio.h	3763;"	d
PB1_RPORT	fastio.h	792;"	d
PB1_WPORT	fastio.h	1566;"	d
PB1_WPORT	fastio.h	2463;"	d
PB1_WPORT	fastio.h	290;"	d
PB1_WPORT	fastio.h	3107;"	d
PB1_WPORT	fastio.h	3764;"	d
PB1_WPORT	fastio.h	793;"	d
PB2	fastio.h	1569;"	d
PB2	fastio.h	2466;"	d
PB2	fastio.h	294;"	d
PB2	fastio.h	3110;"	d
PB2	fastio.h	3767;"	d
PB2	fastio.h	797;"	d
PB2_DDR	fastio.h	1573;"	d
PB2_DDR	fastio.h	2471;"	d
PB2_DDR	fastio.h	298;"	d
PB2_DDR	fastio.h	3115;"	d
PB2_DDR	fastio.h	3771;"	d
PB2_DDR	fastio.h	801;"	d
PB2_PIN	fastio.h	1570;"	d
PB2_PIN	fastio.h	2467;"	d
PB2_PIN	fastio.h	295;"	d
PB2_PIN	fastio.h	3111;"	d
PB2_PIN	fastio.h	3768;"	d
PB2_PIN	fastio.h	798;"	d
PB2_PWM	fastio.h	1574;"	d
PB2_PWM	fastio.h	2470;"	d
PB2_PWM	fastio.h	299;"	d
PB2_PWM	fastio.h	3114;"	d
PB2_PWM	fastio.h	3772;"	d
PB2_PWM	fastio.h	802;"	d
PB2_RPORT	fastio.h	1571;"	d
PB2_RPORT	fastio.h	2468;"	d
PB2_RPORT	fastio.h	296;"	d
PB2_RPORT	fastio.h	3112;"	d
PB2_RPORT	fastio.h	3769;"	d
PB2_RPORT	fastio.h	799;"	d
PB2_WPORT	fastio.h	1572;"	d
PB2_WPORT	fastio.h	2469;"	d
PB2_WPORT	fastio.h	297;"	d
PB2_WPORT	fastio.h	3113;"	d
PB2_WPORT	fastio.h	3770;"	d
PB2_WPORT	fastio.h	800;"	d
PB3	fastio.h	1575;"	d
PB3	fastio.h	2472;"	d
PB3	fastio.h	301;"	d
PB3	fastio.h	3116;"	d
PB3	fastio.h	3773;"	d
PB3	fastio.h	804;"	d
PB3_DDR	fastio.h	1579;"	d
PB3_DDR	fastio.h	2477;"	d
PB3_DDR	fastio.h	305;"	d
PB3_DDR	fastio.h	3121;"	d
PB3_DDR	fastio.h	3777;"	d
PB3_DDR	fastio.h	808;"	d
PB3_PIN	fastio.h	1576;"	d
PB3_PIN	fastio.h	2473;"	d
PB3_PIN	fastio.h	302;"	d
PB3_PIN	fastio.h	3117;"	d
PB3_PIN	fastio.h	3774;"	d
PB3_PIN	fastio.h	805;"	d
PB3_PWM	fastio.h	1580;"	d
PB3_PWM	fastio.h	2476;"	d
PB3_PWM	fastio.h	306;"	d
PB3_PWM	fastio.h	3120;"	d
PB3_PWM	fastio.h	3778;"	d
PB3_PWM	fastio.h	809;"	d
PB3_RPORT	fastio.h	1577;"	d
PB3_RPORT	fastio.h	2474;"	d
PB3_RPORT	fastio.h	303;"	d
PB3_RPORT	fastio.h	3118;"	d
PB3_RPORT	fastio.h	3775;"	d
PB3_RPORT	fastio.h	806;"	d
PB3_WPORT	fastio.h	1578;"	d
PB3_WPORT	fastio.h	2475;"	d
PB3_WPORT	fastio.h	304;"	d
PB3_WPORT	fastio.h	3119;"	d
PB3_WPORT	fastio.h	3776;"	d
PB3_WPORT	fastio.h	807;"	d
PB4	fastio.h	1581;"	d
PB4	fastio.h	2478;"	d
PB4	fastio.h	308;"	d
PB4	fastio.h	3122;"	d
PB4	fastio.h	3779;"	d
PB4	fastio.h	811;"	d
PB4_DDR	fastio.h	1585;"	d
PB4_DDR	fastio.h	2483;"	d
PB4_DDR	fastio.h	3127;"	d
PB4_DDR	fastio.h	312;"	d
PB4_DDR	fastio.h	3783;"	d
PB4_DDR	fastio.h	815;"	d
PB4_PIN	fastio.h	1582;"	d
PB4_PIN	fastio.h	2479;"	d
PB4_PIN	fastio.h	309;"	d
PB4_PIN	fastio.h	3123;"	d
PB4_PIN	fastio.h	3780;"	d
PB4_PIN	fastio.h	812;"	d
PB4_PWM	fastio.h	1586;"	d
PB4_PWM	fastio.h	2482;"	d
PB4_PWM	fastio.h	3126;"	d
PB4_PWM	fastio.h	313;"	d
PB4_PWM	fastio.h	3784;"	d
PB4_PWM	fastio.h	816;"	d
PB4_RPORT	fastio.h	1583;"	d
PB4_RPORT	fastio.h	2480;"	d
PB4_RPORT	fastio.h	310;"	d
PB4_RPORT	fastio.h	3124;"	d
PB4_RPORT	fastio.h	3781;"	d
PB4_RPORT	fastio.h	813;"	d
PB4_WPORT	fastio.h	1584;"	d
PB4_WPORT	fastio.h	2481;"	d
PB4_WPORT	fastio.h	311;"	d
PB4_WPORT	fastio.h	3125;"	d
PB4_WPORT	fastio.h	3782;"	d
PB4_WPORT	fastio.h	814;"	d
PB5	fastio.h	1587;"	d
PB5	fastio.h	2484;"	d
PB5	fastio.h	3128;"	d
PB5	fastio.h	315;"	d
PB5	fastio.h	3785;"	d
PB5	fastio.h	818;"	d
PB5_DDR	fastio.h	1591;"	d
PB5_DDR	fastio.h	2489;"	d
PB5_DDR	fastio.h	3133;"	d
PB5_DDR	fastio.h	319;"	d
PB5_DDR	fastio.h	3789;"	d
PB5_DDR	fastio.h	822;"	d
PB5_PIN	fastio.h	1588;"	d
PB5_PIN	fastio.h	2485;"	d
PB5_PIN	fastio.h	3129;"	d
PB5_PIN	fastio.h	316;"	d
PB5_PIN	fastio.h	3786;"	d
PB5_PIN	fastio.h	819;"	d
PB5_PWM	fastio.h	1592;"	d
PB5_PWM	fastio.h	2488;"	d
PB5_PWM	fastio.h	3132;"	d
PB5_PWM	fastio.h	320;"	d
PB5_PWM	fastio.h	3790;"	d
PB5_PWM	fastio.h	823;"	d
PB5_RPORT	fastio.h	1589;"	d
PB5_RPORT	fastio.h	2486;"	d
PB5_RPORT	fastio.h	3130;"	d
PB5_RPORT	fastio.h	317;"	d
PB5_RPORT	fastio.h	3787;"	d
PB5_RPORT	fastio.h	820;"	d
PB5_WPORT	fastio.h	1590;"	d
PB5_WPORT	fastio.h	2487;"	d
PB5_WPORT	fastio.h	3131;"	d
PB5_WPORT	fastio.h	318;"	d
PB5_WPORT	fastio.h	3788;"	d
PB5_WPORT	fastio.h	821;"	d
PB6	fastio.h	1593;"	d
PB6	fastio.h	2490;"	d
PB6	fastio.h	3134;"	d
PB6	fastio.h	322;"	d
PB6	fastio.h	3791;"	d
PB6	fastio.h	825;"	d
PB6_DDR	fastio.h	1597;"	d
PB6_DDR	fastio.h	2495;"	d
PB6_DDR	fastio.h	3139;"	d
PB6_DDR	fastio.h	326;"	d
PB6_DDR	fastio.h	3795;"	d
PB6_DDR	fastio.h	829;"	d
PB6_PIN	fastio.h	1594;"	d
PB6_PIN	fastio.h	2491;"	d
PB6_PIN	fastio.h	3135;"	d
PB6_PIN	fastio.h	323;"	d
PB6_PIN	fastio.h	3792;"	d
PB6_PIN	fastio.h	826;"	d
PB6_PWM	fastio.h	1598;"	d
PB6_PWM	fastio.h	2494;"	d
PB6_PWM	fastio.h	3138;"	d
PB6_PWM	fastio.h	327;"	d
PB6_PWM	fastio.h	3796;"	d
PB6_PWM	fastio.h	830;"	d
PB6_RPORT	fastio.h	1595;"	d
PB6_RPORT	fastio.h	2492;"	d
PB6_RPORT	fastio.h	3136;"	d
PB6_RPORT	fastio.h	324;"	d
PB6_RPORT	fastio.h	3793;"	d
PB6_RPORT	fastio.h	827;"	d
PB6_WPORT	fastio.h	1596;"	d
PB6_WPORT	fastio.h	2493;"	d
PB6_WPORT	fastio.h	3137;"	d
PB6_WPORT	fastio.h	325;"	d
PB6_WPORT	fastio.h	3794;"	d
PB6_WPORT	fastio.h	828;"	d
PB7	fastio.h	1599;"	d
PB7	fastio.h	2496;"	d
PB7	fastio.h	3140;"	d
PB7	fastio.h	329;"	d
PB7	fastio.h	3797;"	d
PB7	fastio.h	832;"	d
PB7_DDR	fastio.h	1603;"	d
PB7_DDR	fastio.h	2501;"	d
PB7_DDR	fastio.h	3145;"	d
PB7_DDR	fastio.h	333;"	d
PB7_DDR	fastio.h	3801;"	d
PB7_DDR	fastio.h	836;"	d
PB7_PIN	fastio.h	1600;"	d
PB7_PIN	fastio.h	2497;"	d
PB7_PIN	fastio.h	3141;"	d
PB7_PIN	fastio.h	330;"	d
PB7_PIN	fastio.h	3798;"	d
PB7_PIN	fastio.h	833;"	d
PB7_PWM	fastio.h	1604;"	d
PB7_PWM	fastio.h	2500;"	d
PB7_PWM	fastio.h	3144;"	d
PB7_PWM	fastio.h	334;"	d
PB7_PWM	fastio.h	3802;"	d
PB7_PWM	fastio.h	837;"	d
PB7_RPORT	fastio.h	1601;"	d
PB7_RPORT	fastio.h	2498;"	d
PB7_RPORT	fastio.h	3142;"	d
PB7_RPORT	fastio.h	331;"	d
PB7_RPORT	fastio.h	3799;"	d
PB7_RPORT	fastio.h	834;"	d
PB7_WPORT	fastio.h	1602;"	d
PB7_WPORT	fastio.h	2499;"	d
PB7_WPORT	fastio.h	3143;"	d
PB7_WPORT	fastio.h	332;"	d
PB7_WPORT	fastio.h	3800;"	d
PB7_WPORT	fastio.h	835;"	d
PC0	fastio.h	1606;"	d
PC0	fastio.h	2503;"	d
PC0	fastio.h	3147;"	d
PC0	fastio.h	337;"	d
PC0	fastio.h	3804;"	d
PC0	fastio.h	840;"	d
PC0_DDR	fastio.h	1610;"	d
PC0_DDR	fastio.h	2508;"	d
PC0_DDR	fastio.h	3152;"	d
PC0_DDR	fastio.h	341;"	d
PC0_DDR	fastio.h	3808;"	d
PC0_DDR	fastio.h	844;"	d
PC0_PIN	fastio.h	1607;"	d
PC0_PIN	fastio.h	2504;"	d
PC0_PIN	fastio.h	3148;"	d
PC0_PIN	fastio.h	338;"	d
PC0_PIN	fastio.h	3805;"	d
PC0_PIN	fastio.h	841;"	d
PC0_PWM	fastio.h	1611;"	d
PC0_PWM	fastio.h	2507;"	d
PC0_PWM	fastio.h	3151;"	d
PC0_PWM	fastio.h	342;"	d
PC0_PWM	fastio.h	3809;"	d
PC0_PWM	fastio.h	845;"	d
PC0_RPORT	fastio.h	1608;"	d
PC0_RPORT	fastio.h	2505;"	d
PC0_RPORT	fastio.h	3149;"	d
PC0_RPORT	fastio.h	339;"	d
PC0_RPORT	fastio.h	3806;"	d
PC0_RPORT	fastio.h	842;"	d
PC0_WPORT	fastio.h	1609;"	d
PC0_WPORT	fastio.h	2506;"	d
PC0_WPORT	fastio.h	3150;"	d
PC0_WPORT	fastio.h	340;"	d
PC0_WPORT	fastio.h	3807;"	d
PC0_WPORT	fastio.h	843;"	d
PC1	fastio.h	1612;"	d
PC1	fastio.h	2509;"	d
PC1	fastio.h	3153;"	d
PC1	fastio.h	344;"	d
PC1	fastio.h	3810;"	d
PC1	fastio.h	847;"	d
PC1_DDR	fastio.h	1616;"	d
PC1_DDR	fastio.h	2514;"	d
PC1_DDR	fastio.h	3158;"	d
PC1_DDR	fastio.h	348;"	d
PC1_DDR	fastio.h	3814;"	d
PC1_DDR	fastio.h	851;"	d
PC1_PIN	fastio.h	1613;"	d
PC1_PIN	fastio.h	2510;"	d
PC1_PIN	fastio.h	3154;"	d
PC1_PIN	fastio.h	345;"	d
PC1_PIN	fastio.h	3811;"	d
PC1_PIN	fastio.h	848;"	d
PC1_PWM	fastio.h	1617;"	d
PC1_PWM	fastio.h	2513;"	d
PC1_PWM	fastio.h	3157;"	d
PC1_PWM	fastio.h	349;"	d
PC1_PWM	fastio.h	3815;"	d
PC1_PWM	fastio.h	852;"	d
PC1_RPORT	fastio.h	1614;"	d
PC1_RPORT	fastio.h	2511;"	d
PC1_RPORT	fastio.h	3155;"	d
PC1_RPORT	fastio.h	346;"	d
PC1_RPORT	fastio.h	3812;"	d
PC1_RPORT	fastio.h	849;"	d
PC1_WPORT	fastio.h	1615;"	d
PC1_WPORT	fastio.h	2512;"	d
PC1_WPORT	fastio.h	3156;"	d
PC1_WPORT	fastio.h	347;"	d
PC1_WPORT	fastio.h	3813;"	d
PC1_WPORT	fastio.h	850;"	d
PC2	fastio.h	1618;"	d
PC2	fastio.h	2515;"	d
PC2	fastio.h	3159;"	d
PC2	fastio.h	351;"	d
PC2	fastio.h	3816;"	d
PC2	fastio.h	854;"	d
PC2_DDR	fastio.h	1622;"	d
PC2_DDR	fastio.h	2520;"	d
PC2_DDR	fastio.h	3164;"	d
PC2_DDR	fastio.h	355;"	d
PC2_DDR	fastio.h	3820;"	d
PC2_DDR	fastio.h	858;"	d
PC2_PIN	fastio.h	1619;"	d
PC2_PIN	fastio.h	2516;"	d
PC2_PIN	fastio.h	3160;"	d
PC2_PIN	fastio.h	352;"	d
PC2_PIN	fastio.h	3817;"	d
PC2_PIN	fastio.h	855;"	d
PC2_PWM	fastio.h	1623;"	d
PC2_PWM	fastio.h	2519;"	d
PC2_PWM	fastio.h	3163;"	d
PC2_PWM	fastio.h	356;"	d
PC2_PWM	fastio.h	3821;"	d
PC2_PWM	fastio.h	859;"	d
PC2_RPORT	fastio.h	1620;"	d
PC2_RPORT	fastio.h	2517;"	d
PC2_RPORT	fastio.h	3161;"	d
PC2_RPORT	fastio.h	353;"	d
PC2_RPORT	fastio.h	3818;"	d
PC2_RPORT	fastio.h	856;"	d
PC2_WPORT	fastio.h	1621;"	d
PC2_WPORT	fastio.h	2518;"	d
PC2_WPORT	fastio.h	3162;"	d
PC2_WPORT	fastio.h	354;"	d
PC2_WPORT	fastio.h	3819;"	d
PC2_WPORT	fastio.h	857;"	d
PC3	fastio.h	1624;"	d
PC3	fastio.h	2521;"	d
PC3	fastio.h	3165;"	d
PC3	fastio.h	358;"	d
PC3	fastio.h	3822;"	d
PC3	fastio.h	861;"	d
PC3_DDR	fastio.h	1628;"	d
PC3_DDR	fastio.h	2526;"	d
PC3_DDR	fastio.h	3170;"	d
PC3_DDR	fastio.h	362;"	d
PC3_DDR	fastio.h	3826;"	d
PC3_DDR	fastio.h	865;"	d
PC3_PIN	fastio.h	1625;"	d
PC3_PIN	fastio.h	2522;"	d
PC3_PIN	fastio.h	3166;"	d
PC3_PIN	fastio.h	359;"	d
PC3_PIN	fastio.h	3823;"	d
PC3_PIN	fastio.h	862;"	d
PC3_PWM	fastio.h	1629;"	d
PC3_PWM	fastio.h	2525;"	d
PC3_PWM	fastio.h	3169;"	d
PC3_PWM	fastio.h	363;"	d
PC3_PWM	fastio.h	3827;"	d
PC3_PWM	fastio.h	866;"	d
PC3_RPORT	fastio.h	1626;"	d
PC3_RPORT	fastio.h	2523;"	d
PC3_RPORT	fastio.h	3167;"	d
PC3_RPORT	fastio.h	360;"	d
PC3_RPORT	fastio.h	3824;"	d
PC3_RPORT	fastio.h	863;"	d
PC3_WPORT	fastio.h	1627;"	d
PC3_WPORT	fastio.h	2524;"	d
PC3_WPORT	fastio.h	3168;"	d
PC3_WPORT	fastio.h	361;"	d
PC3_WPORT	fastio.h	3825;"	d
PC3_WPORT	fastio.h	864;"	d
PC4	fastio.h	1630;"	d
PC4	fastio.h	2527;"	d
PC4	fastio.h	3171;"	d
PC4	fastio.h	365;"	d
PC4	fastio.h	3828;"	d
PC4	fastio.h	868;"	d
PC4_DDR	fastio.h	1634;"	d
PC4_DDR	fastio.h	2532;"	d
PC4_DDR	fastio.h	3176;"	d
PC4_DDR	fastio.h	369;"	d
PC4_DDR	fastio.h	3832;"	d
PC4_DDR	fastio.h	872;"	d
PC4_PIN	fastio.h	1631;"	d
PC4_PIN	fastio.h	2528;"	d
PC4_PIN	fastio.h	3172;"	d
PC4_PIN	fastio.h	366;"	d
PC4_PIN	fastio.h	3829;"	d
PC4_PIN	fastio.h	869;"	d
PC4_PWM	fastio.h	1635;"	d
PC4_PWM	fastio.h	2531;"	d
PC4_PWM	fastio.h	3175;"	d
PC4_PWM	fastio.h	370;"	d
PC4_PWM	fastio.h	3833;"	d
PC4_PWM	fastio.h	873;"	d
PC4_RPORT	fastio.h	1632;"	d
PC4_RPORT	fastio.h	2529;"	d
PC4_RPORT	fastio.h	3173;"	d
PC4_RPORT	fastio.h	367;"	d
PC4_RPORT	fastio.h	3830;"	d
PC4_RPORT	fastio.h	870;"	d
PC4_WPORT	fastio.h	1633;"	d
PC4_WPORT	fastio.h	2530;"	d
PC4_WPORT	fastio.h	3174;"	d
PC4_WPORT	fastio.h	368;"	d
PC4_WPORT	fastio.h	3831;"	d
PC4_WPORT	fastio.h	871;"	d
PC5	fastio.h	1636;"	d
PC5	fastio.h	2533;"	d
PC5	fastio.h	3177;"	d
PC5	fastio.h	372;"	d
PC5	fastio.h	3834;"	d
PC5	fastio.h	875;"	d
PC5_DDR	fastio.h	1640;"	d
PC5_DDR	fastio.h	2538;"	d
PC5_DDR	fastio.h	3182;"	d
PC5_DDR	fastio.h	376;"	d
PC5_DDR	fastio.h	3838;"	d
PC5_DDR	fastio.h	879;"	d
PC5_PIN	fastio.h	1637;"	d
PC5_PIN	fastio.h	2534;"	d
PC5_PIN	fastio.h	3178;"	d
PC5_PIN	fastio.h	373;"	d
PC5_PIN	fastio.h	3835;"	d
PC5_PIN	fastio.h	876;"	d
PC5_PWM	fastio.h	1641;"	d
PC5_PWM	fastio.h	2537;"	d
PC5_PWM	fastio.h	3181;"	d
PC5_PWM	fastio.h	377;"	d
PC5_PWM	fastio.h	3839;"	d
PC5_PWM	fastio.h	880;"	d
PC5_RPORT	fastio.h	1638;"	d
PC5_RPORT	fastio.h	2535;"	d
PC5_RPORT	fastio.h	3179;"	d
PC5_RPORT	fastio.h	374;"	d
PC5_RPORT	fastio.h	3836;"	d
PC5_RPORT	fastio.h	877;"	d
PC5_WPORT	fastio.h	1639;"	d
PC5_WPORT	fastio.h	2536;"	d
PC5_WPORT	fastio.h	3180;"	d
PC5_WPORT	fastio.h	375;"	d
PC5_WPORT	fastio.h	3837;"	d
PC5_WPORT	fastio.h	878;"	d
PC6	fastio.h	1642;"	d
PC6	fastio.h	2539;"	d
PC6	fastio.h	3183;"	d
PC6	fastio.h	379;"	d
PC6	fastio.h	3840;"	d
PC6	fastio.h	882;"	d
PC6_DDR	fastio.h	1646;"	d
PC6_DDR	fastio.h	2544;"	d
PC6_DDR	fastio.h	3188;"	d
PC6_DDR	fastio.h	383;"	d
PC6_DDR	fastio.h	3844;"	d
PC6_DDR	fastio.h	886;"	d
PC6_PIN	fastio.h	1643;"	d
PC6_PIN	fastio.h	2540;"	d
PC6_PIN	fastio.h	3184;"	d
PC6_PIN	fastio.h	380;"	d
PC6_PIN	fastio.h	3841;"	d
PC6_PIN	fastio.h	883;"	d
PC6_PWM	fastio.h	1647;"	d
PC6_PWM	fastio.h	2543;"	d
PC6_PWM	fastio.h	3187;"	d
PC6_PWM	fastio.h	3845;"	d
PC6_PWM	fastio.h	384;"	d
PC6_PWM	fastio.h	887;"	d
PC6_RPORT	fastio.h	1644;"	d
PC6_RPORT	fastio.h	2541;"	d
PC6_RPORT	fastio.h	3185;"	d
PC6_RPORT	fastio.h	381;"	d
PC6_RPORT	fastio.h	3842;"	d
PC6_RPORT	fastio.h	884;"	d
PC6_WPORT	fastio.h	1645;"	d
PC6_WPORT	fastio.h	2542;"	d
PC6_WPORT	fastio.h	3186;"	d
PC6_WPORT	fastio.h	382;"	d
PC6_WPORT	fastio.h	3843;"	d
PC6_WPORT	fastio.h	885;"	d
PC7	fastio.h	1648;"	d
PC7	fastio.h	2545;"	d
PC7	fastio.h	3189;"	d
PC7	fastio.h	3846;"	d
PC7	fastio.h	386;"	d
PC7	fastio.h	889;"	d
PC7_DDR	fastio.h	1652;"	d
PC7_DDR	fastio.h	2550;"	d
PC7_DDR	fastio.h	3194;"	d
PC7_DDR	fastio.h	3850;"	d
PC7_DDR	fastio.h	390;"	d
PC7_DDR	fastio.h	893;"	d
PC7_PIN	fastio.h	1649;"	d
PC7_PIN	fastio.h	2546;"	d
PC7_PIN	fastio.h	3190;"	d
PC7_PIN	fastio.h	3847;"	d
PC7_PIN	fastio.h	387;"	d
PC7_PIN	fastio.h	890;"	d
PC7_PWM	fastio.h	1653;"	d
PC7_PWM	fastio.h	2549;"	d
PC7_PWM	fastio.h	3193;"	d
PC7_PWM	fastio.h	3851;"	d
PC7_PWM	fastio.h	391;"	d
PC7_PWM	fastio.h	894;"	d
PC7_RPORT	fastio.h	1650;"	d
PC7_RPORT	fastio.h	2547;"	d
PC7_RPORT	fastio.h	3191;"	d
PC7_RPORT	fastio.h	3848;"	d
PC7_RPORT	fastio.h	388;"	d
PC7_RPORT	fastio.h	891;"	d
PC7_WPORT	fastio.h	1651;"	d
PC7_WPORT	fastio.h	2548;"	d
PC7_WPORT	fastio.h	3192;"	d
PC7_WPORT	fastio.h	3849;"	d
PC7_WPORT	fastio.h	389;"	d
PC7_WPORT	fastio.h	892;"	d
PD0	fastio.h	1655;"	d
PD0	fastio.h	2552;"	d
PD0	fastio.h	3196;"	d
PD0	fastio.h	3853;"	d
PD0	fastio.h	394;"	d
PD0	fastio.h	897;"	d
PD0_DDR	fastio.h	1659;"	d
PD0_DDR	fastio.h	2557;"	d
PD0_DDR	fastio.h	3201;"	d
PD0_DDR	fastio.h	3857;"	d
PD0_DDR	fastio.h	398;"	d
PD0_DDR	fastio.h	901;"	d
PD0_PIN	fastio.h	1656;"	d
PD0_PIN	fastio.h	2553;"	d
PD0_PIN	fastio.h	3197;"	d
PD0_PIN	fastio.h	3854;"	d
PD0_PIN	fastio.h	395;"	d
PD0_PIN	fastio.h	898;"	d
PD0_PWM	fastio.h	1660;"	d
PD0_PWM	fastio.h	2556;"	d
PD0_PWM	fastio.h	3200;"	d
PD0_PWM	fastio.h	3858;"	d
PD0_PWM	fastio.h	399;"	d
PD0_PWM	fastio.h	902;"	d
PD0_RPORT	fastio.h	1657;"	d
PD0_RPORT	fastio.h	2554;"	d
PD0_RPORT	fastio.h	3198;"	d
PD0_RPORT	fastio.h	3855;"	d
PD0_RPORT	fastio.h	396;"	d
PD0_RPORT	fastio.h	899;"	d
PD0_WPORT	fastio.h	1658;"	d
PD0_WPORT	fastio.h	2555;"	d
PD0_WPORT	fastio.h	3199;"	d
PD0_WPORT	fastio.h	3856;"	d
PD0_WPORT	fastio.h	397;"	d
PD0_WPORT	fastio.h	900;"	d
PD1	fastio.h	1661;"	d
PD1	fastio.h	2558;"	d
PD1	fastio.h	3202;"	d
PD1	fastio.h	3859;"	d
PD1	fastio.h	401;"	d
PD1	fastio.h	904;"	d
PD1_DDR	fastio.h	1665;"	d
PD1_DDR	fastio.h	2563;"	d
PD1_DDR	fastio.h	3207;"	d
PD1_DDR	fastio.h	3863;"	d
PD1_DDR	fastio.h	405;"	d
PD1_DDR	fastio.h	908;"	d
PD1_PIN	fastio.h	1662;"	d
PD1_PIN	fastio.h	2559;"	d
PD1_PIN	fastio.h	3203;"	d
PD1_PIN	fastio.h	3860;"	d
PD1_PIN	fastio.h	402;"	d
PD1_PIN	fastio.h	905;"	d
PD1_PWM	fastio.h	1666;"	d
PD1_PWM	fastio.h	2562;"	d
PD1_PWM	fastio.h	3206;"	d
PD1_PWM	fastio.h	3864;"	d
PD1_PWM	fastio.h	406;"	d
PD1_PWM	fastio.h	909;"	d
PD1_RPORT	fastio.h	1663;"	d
PD1_RPORT	fastio.h	2560;"	d
PD1_RPORT	fastio.h	3204;"	d
PD1_RPORT	fastio.h	3861;"	d
PD1_RPORT	fastio.h	403;"	d
PD1_RPORT	fastio.h	906;"	d
PD1_WPORT	fastio.h	1664;"	d
PD1_WPORT	fastio.h	2561;"	d
PD1_WPORT	fastio.h	3205;"	d
PD1_WPORT	fastio.h	3862;"	d
PD1_WPORT	fastio.h	404;"	d
PD1_WPORT	fastio.h	907;"	d
PD2	fastio.h	1667;"	d
PD2	fastio.h	2564;"	d
PD2	fastio.h	3208;"	d
PD2	fastio.h	3865;"	d
PD2	fastio.h	408;"	d
PD2	fastio.h	911;"	d
PD2_DDR	fastio.h	1671;"	d
PD2_DDR	fastio.h	2569;"	d
PD2_DDR	fastio.h	3213;"	d
PD2_DDR	fastio.h	3869;"	d
PD2_DDR	fastio.h	412;"	d
PD2_DDR	fastio.h	915;"	d
PD2_PIN	fastio.h	1668;"	d
PD2_PIN	fastio.h	2565;"	d
PD2_PIN	fastio.h	3209;"	d
PD2_PIN	fastio.h	3866;"	d
PD2_PIN	fastio.h	409;"	d
PD2_PIN	fastio.h	912;"	d
PD2_PWM	fastio.h	1672;"	d
PD2_PWM	fastio.h	2568;"	d
PD2_PWM	fastio.h	3212;"	d
PD2_PWM	fastio.h	3870;"	d
PD2_PWM	fastio.h	413;"	d
PD2_PWM	fastio.h	916;"	d
PD2_RPORT	fastio.h	1669;"	d
PD2_RPORT	fastio.h	2566;"	d
PD2_RPORT	fastio.h	3210;"	d
PD2_RPORT	fastio.h	3867;"	d
PD2_RPORT	fastio.h	410;"	d
PD2_RPORT	fastio.h	913;"	d
PD2_WPORT	fastio.h	1670;"	d
PD2_WPORT	fastio.h	2567;"	d
PD2_WPORT	fastio.h	3211;"	d
PD2_WPORT	fastio.h	3868;"	d
PD2_WPORT	fastio.h	411;"	d
PD2_WPORT	fastio.h	914;"	d
PD3	fastio.h	1673;"	d
PD3	fastio.h	2570;"	d
PD3	fastio.h	3214;"	d
PD3	fastio.h	3871;"	d
PD3	fastio.h	415;"	d
PD3	fastio.h	918;"	d
PD3_DDR	fastio.h	1677;"	d
PD3_DDR	fastio.h	2575;"	d
PD3_DDR	fastio.h	3219;"	d
PD3_DDR	fastio.h	3875;"	d
PD3_DDR	fastio.h	419;"	d
PD3_DDR	fastio.h	922;"	d
PD3_PIN	fastio.h	1674;"	d
PD3_PIN	fastio.h	2571;"	d
PD3_PIN	fastio.h	3215;"	d
PD3_PIN	fastio.h	3872;"	d
PD3_PIN	fastio.h	416;"	d
PD3_PIN	fastio.h	919;"	d
PD3_PWM	fastio.h	1678;"	d
PD3_PWM	fastio.h	2574;"	d
PD3_PWM	fastio.h	3218;"	d
PD3_PWM	fastio.h	3876;"	d
PD3_PWM	fastio.h	420;"	d
PD3_PWM	fastio.h	923;"	d
PD3_RPORT	fastio.h	1675;"	d
PD3_RPORT	fastio.h	2572;"	d
PD3_RPORT	fastio.h	3216;"	d
PD3_RPORT	fastio.h	3873;"	d
PD3_RPORT	fastio.h	417;"	d
PD3_RPORT	fastio.h	920;"	d
PD3_WPORT	fastio.h	1676;"	d
PD3_WPORT	fastio.h	2573;"	d
PD3_WPORT	fastio.h	3217;"	d
PD3_WPORT	fastio.h	3874;"	d
PD3_WPORT	fastio.h	418;"	d
PD3_WPORT	fastio.h	921;"	d
PD4	fastio.h	1679;"	d
PD4	fastio.h	2576;"	d
PD4	fastio.h	3220;"	d
PD4	fastio.h	3877;"	d
PD4	fastio.h	422;"	d
PD4	fastio.h	925;"	d
PD4_DDR	fastio.h	1683;"	d
PD4_DDR	fastio.h	2581;"	d
PD4_DDR	fastio.h	3225;"	d
PD4_DDR	fastio.h	3881;"	d
PD4_DDR	fastio.h	426;"	d
PD4_DDR	fastio.h	929;"	d
PD4_PIN	fastio.h	1680;"	d
PD4_PIN	fastio.h	2577;"	d
PD4_PIN	fastio.h	3221;"	d
PD4_PIN	fastio.h	3878;"	d
PD4_PIN	fastio.h	423;"	d
PD4_PIN	fastio.h	926;"	d
PD4_PWM	fastio.h	1684;"	d
PD4_PWM	fastio.h	2580;"	d
PD4_PWM	fastio.h	3224;"	d
PD4_PWM	fastio.h	3882;"	d
PD4_PWM	fastio.h	427;"	d
PD4_PWM	fastio.h	930;"	d
PD4_RPORT	fastio.h	1681;"	d
PD4_RPORT	fastio.h	2578;"	d
PD4_RPORT	fastio.h	3222;"	d
PD4_RPORT	fastio.h	3879;"	d
PD4_RPORT	fastio.h	424;"	d
PD4_RPORT	fastio.h	927;"	d
PD4_WPORT	fastio.h	1682;"	d
PD4_WPORT	fastio.h	2579;"	d
PD4_WPORT	fastio.h	3223;"	d
PD4_WPORT	fastio.h	3880;"	d
PD4_WPORT	fastio.h	425;"	d
PD4_WPORT	fastio.h	928;"	d
PD5	fastio.h	1685;"	d
PD5	fastio.h	2582;"	d
PD5	fastio.h	3226;"	d
PD5	fastio.h	3883;"	d
PD5	fastio.h	429;"	d
PD5	fastio.h	932;"	d
PD5_DDR	fastio.h	1689;"	d
PD5_DDR	fastio.h	2587;"	d
PD5_DDR	fastio.h	3231;"	d
PD5_DDR	fastio.h	3887;"	d
PD5_DDR	fastio.h	433;"	d
PD5_DDR	fastio.h	936;"	d
PD5_PIN	fastio.h	1686;"	d
PD5_PIN	fastio.h	2583;"	d
PD5_PIN	fastio.h	3227;"	d
PD5_PIN	fastio.h	3884;"	d
PD5_PIN	fastio.h	430;"	d
PD5_PIN	fastio.h	933;"	d
PD5_PWM	fastio.h	1690;"	d
PD5_PWM	fastio.h	2586;"	d
PD5_PWM	fastio.h	3230;"	d
PD5_PWM	fastio.h	3888;"	d
PD5_PWM	fastio.h	434;"	d
PD5_PWM	fastio.h	937;"	d
PD5_RPORT	fastio.h	1687;"	d
PD5_RPORT	fastio.h	2584;"	d
PD5_RPORT	fastio.h	3228;"	d
PD5_RPORT	fastio.h	3885;"	d
PD5_RPORT	fastio.h	431;"	d
PD5_RPORT	fastio.h	934;"	d
PD5_WPORT	fastio.h	1688;"	d
PD5_WPORT	fastio.h	2585;"	d
PD5_WPORT	fastio.h	3229;"	d
PD5_WPORT	fastio.h	3886;"	d
PD5_WPORT	fastio.h	432;"	d
PD5_WPORT	fastio.h	935;"	d
PD6	fastio.h	1691;"	d
PD6	fastio.h	2588;"	d
PD6	fastio.h	3232;"	d
PD6	fastio.h	3889;"	d
PD6	fastio.h	436;"	d
PD6	fastio.h	939;"	d
PD6_DDR	fastio.h	1695;"	d
PD6_DDR	fastio.h	2593;"	d
PD6_DDR	fastio.h	3237;"	d
PD6_DDR	fastio.h	3893;"	d
PD6_DDR	fastio.h	440;"	d
PD6_DDR	fastio.h	943;"	d
PD6_PIN	fastio.h	1692;"	d
PD6_PIN	fastio.h	2589;"	d
PD6_PIN	fastio.h	3233;"	d
PD6_PIN	fastio.h	3890;"	d
PD6_PIN	fastio.h	437;"	d
PD6_PIN	fastio.h	940;"	d
PD6_PWM	fastio.h	1696;"	d
PD6_PWM	fastio.h	2592;"	d
PD6_PWM	fastio.h	3236;"	d
PD6_PWM	fastio.h	3894;"	d
PD6_PWM	fastio.h	441;"	d
PD6_PWM	fastio.h	944;"	d
PD6_RPORT	fastio.h	1693;"	d
PD6_RPORT	fastio.h	2590;"	d
PD6_RPORT	fastio.h	3234;"	d
PD6_RPORT	fastio.h	3891;"	d
PD6_RPORT	fastio.h	438;"	d
PD6_RPORT	fastio.h	941;"	d
PD6_WPORT	fastio.h	1694;"	d
PD6_WPORT	fastio.h	2591;"	d
PD6_WPORT	fastio.h	3235;"	d
PD6_WPORT	fastio.h	3892;"	d
PD6_WPORT	fastio.h	439;"	d
PD6_WPORT	fastio.h	942;"	d
PD7	fastio.h	1697;"	d
PD7	fastio.h	2594;"	d
PD7	fastio.h	3238;"	d
PD7	fastio.h	3895;"	d
PD7	fastio.h	443;"	d
PD7	fastio.h	946;"	d
PD7_DDR	fastio.h	1701;"	d
PD7_DDR	fastio.h	2599;"	d
PD7_DDR	fastio.h	3243;"	d
PD7_DDR	fastio.h	3899;"	d
PD7_DDR	fastio.h	447;"	d
PD7_DDR	fastio.h	950;"	d
PD7_PIN	fastio.h	1698;"	d
PD7_PIN	fastio.h	2595;"	d
PD7_PIN	fastio.h	3239;"	d
PD7_PIN	fastio.h	3896;"	d
PD7_PIN	fastio.h	444;"	d
PD7_PIN	fastio.h	947;"	d
PD7_PWM	fastio.h	1702;"	d
PD7_PWM	fastio.h	2598;"	d
PD7_PWM	fastio.h	3242;"	d
PD7_PWM	fastio.h	3900;"	d
PD7_PWM	fastio.h	448;"	d
PD7_PWM	fastio.h	951;"	d
PD7_RPORT	fastio.h	1699;"	d
PD7_RPORT	fastio.h	2596;"	d
PD7_RPORT	fastio.h	3240;"	d
PD7_RPORT	fastio.h	3897;"	d
PD7_RPORT	fastio.h	445;"	d
PD7_RPORT	fastio.h	948;"	d
PD7_WPORT	fastio.h	1700;"	d
PD7_WPORT	fastio.h	2597;"	d
PD7_WPORT	fastio.h	3241;"	d
PD7_WPORT	fastio.h	3898;"	d
PD7_WPORT	fastio.h	446;"	d
PD7_WPORT	fastio.h	949;"	d
PE0	fastio.h	1704;"	d
PE0	fastio.h	2601;"	d
PE0	fastio.h	3245;"	d
PE0	fastio.h	3902;"	d
PE0_DDR	fastio.h	1708;"	d
PE0_DDR	fastio.h	2606;"	d
PE0_DDR	fastio.h	3250;"	d
PE0_DDR	fastio.h	3906;"	d
PE0_PIN	fastio.h	1705;"	d
PE0_PIN	fastio.h	2602;"	d
PE0_PIN	fastio.h	3246;"	d
PE0_PIN	fastio.h	3903;"	d
PE0_PWM	fastio.h	1709;"	d
PE0_PWM	fastio.h	2605;"	d
PE0_PWM	fastio.h	3249;"	d
PE0_PWM	fastio.h	3907;"	d
PE0_RPORT	fastio.h	1706;"	d
PE0_RPORT	fastio.h	2603;"	d
PE0_RPORT	fastio.h	3247;"	d
PE0_RPORT	fastio.h	3904;"	d
PE0_WPORT	fastio.h	1707;"	d
PE0_WPORT	fastio.h	2604;"	d
PE0_WPORT	fastio.h	3248;"	d
PE0_WPORT	fastio.h	3905;"	d
PE1	fastio.h	1710;"	d
PE1	fastio.h	2607;"	d
PE1	fastio.h	3251;"	d
PE1	fastio.h	3908;"	d
PE1_DDR	fastio.h	1714;"	d
PE1_DDR	fastio.h	2612;"	d
PE1_DDR	fastio.h	3256;"	d
PE1_DDR	fastio.h	3912;"	d
PE1_PIN	fastio.h	1711;"	d
PE1_PIN	fastio.h	2608;"	d
PE1_PIN	fastio.h	3252;"	d
PE1_PIN	fastio.h	3909;"	d
PE1_PWM	fastio.h	1715;"	d
PE1_PWM	fastio.h	2611;"	d
PE1_PWM	fastio.h	3255;"	d
PE1_PWM	fastio.h	3913;"	d
PE1_RPORT	fastio.h	1712;"	d
PE1_RPORT	fastio.h	2609;"	d
PE1_RPORT	fastio.h	3253;"	d
PE1_RPORT	fastio.h	3910;"	d
PE1_WPORT	fastio.h	1713;"	d
PE1_WPORT	fastio.h	2610;"	d
PE1_WPORT	fastio.h	3254;"	d
PE1_WPORT	fastio.h	3911;"	d
PE2	fastio.h	1716;"	d
PE2	fastio.h	2613;"	d
PE2	fastio.h	3257;"	d
PE2	fastio.h	3914;"	d
PE2_DDR	fastio.h	1720;"	d
PE2_DDR	fastio.h	2618;"	d
PE2_DDR	fastio.h	3262;"	d
PE2_DDR	fastio.h	3918;"	d
PE2_PIN	fastio.h	1717;"	d
PE2_PIN	fastio.h	2614;"	d
PE2_PIN	fastio.h	3258;"	d
PE2_PIN	fastio.h	3915;"	d
PE2_PWM	fastio.h	1721;"	d
PE2_PWM	fastio.h	2617;"	d
PE2_PWM	fastio.h	3261;"	d
PE2_PWM	fastio.h	3919;"	d
PE2_RPORT	fastio.h	1718;"	d
PE2_RPORT	fastio.h	2615;"	d
PE2_RPORT	fastio.h	3259;"	d
PE2_RPORT	fastio.h	3916;"	d
PE2_WPORT	fastio.h	1719;"	d
PE2_WPORT	fastio.h	2616;"	d
PE2_WPORT	fastio.h	3260;"	d
PE2_WPORT	fastio.h	3917;"	d
PE3	fastio.h	1722;"	d
PE3	fastio.h	2619;"	d
PE3	fastio.h	3263;"	d
PE3	fastio.h	3920;"	d
PE3_DDR	fastio.h	1726;"	d
PE3_DDR	fastio.h	2624;"	d
PE3_DDR	fastio.h	3268;"	d
PE3_DDR	fastio.h	3924;"	d
PE3_PIN	fastio.h	1723;"	d
PE3_PIN	fastio.h	2620;"	d
PE3_PIN	fastio.h	3264;"	d
PE3_PIN	fastio.h	3921;"	d
PE3_PWM	fastio.h	1727;"	d
PE3_PWM	fastio.h	2623;"	d
PE3_PWM	fastio.h	3267;"	d
PE3_PWM	fastio.h	3925;"	d
PE3_RPORT	fastio.h	1724;"	d
PE3_RPORT	fastio.h	2621;"	d
PE3_RPORT	fastio.h	3265;"	d
PE3_RPORT	fastio.h	3922;"	d
PE3_WPORT	fastio.h	1725;"	d
PE3_WPORT	fastio.h	2622;"	d
PE3_WPORT	fastio.h	3266;"	d
PE3_WPORT	fastio.h	3923;"	d
PE4	fastio.h	1728;"	d
PE4	fastio.h	2625;"	d
PE4	fastio.h	3269;"	d
PE4	fastio.h	3926;"	d
PE4_DDR	fastio.h	1732;"	d
PE4_DDR	fastio.h	2630;"	d
PE4_DDR	fastio.h	3274;"	d
PE4_DDR	fastio.h	3930;"	d
PE4_PIN	fastio.h	1729;"	d
PE4_PIN	fastio.h	2626;"	d
PE4_PIN	fastio.h	3270;"	d
PE4_PIN	fastio.h	3927;"	d
PE4_PWM	fastio.h	1733;"	d
PE4_PWM	fastio.h	2629;"	d
PE4_PWM	fastio.h	3273;"	d
PE4_PWM	fastio.h	3931;"	d
PE4_RPORT	fastio.h	1730;"	d
PE4_RPORT	fastio.h	2627;"	d
PE4_RPORT	fastio.h	3271;"	d
PE4_RPORT	fastio.h	3928;"	d
PE4_WPORT	fastio.h	1731;"	d
PE4_WPORT	fastio.h	2628;"	d
PE4_WPORT	fastio.h	3272;"	d
PE4_WPORT	fastio.h	3929;"	d
PE5	fastio.h	1734;"	d
PE5	fastio.h	2631;"	d
PE5	fastio.h	3275;"	d
PE5	fastio.h	3932;"	d
PE5_DDR	fastio.h	1738;"	d
PE5_DDR	fastio.h	2636;"	d
PE5_DDR	fastio.h	3280;"	d
PE5_DDR	fastio.h	3936;"	d
PE5_PIN	fastio.h	1735;"	d
PE5_PIN	fastio.h	2632;"	d
PE5_PIN	fastio.h	3276;"	d
PE5_PIN	fastio.h	3933;"	d
PE5_PWM	fastio.h	1739;"	d
PE5_PWM	fastio.h	2635;"	d
PE5_PWM	fastio.h	3279;"	d
PE5_PWM	fastio.h	3937;"	d
PE5_RPORT	fastio.h	1736;"	d
PE5_RPORT	fastio.h	2633;"	d
PE5_RPORT	fastio.h	3277;"	d
PE5_RPORT	fastio.h	3934;"	d
PE5_WPORT	fastio.h	1737;"	d
PE5_WPORT	fastio.h	2634;"	d
PE5_WPORT	fastio.h	3278;"	d
PE5_WPORT	fastio.h	3935;"	d
PE6	fastio.h	1740;"	d
PE6	fastio.h	2637;"	d
PE6	fastio.h	3281;"	d
PE6	fastio.h	3938;"	d
PE6_DDR	fastio.h	1744;"	d
PE6_DDR	fastio.h	2642;"	d
PE6_DDR	fastio.h	3286;"	d
PE6_DDR	fastio.h	3942;"	d
PE6_PIN	fastio.h	1741;"	d
PE6_PIN	fastio.h	2638;"	d
PE6_PIN	fastio.h	3282;"	d
PE6_PIN	fastio.h	3939;"	d
PE6_PWM	fastio.h	1745;"	d
PE6_PWM	fastio.h	2641;"	d
PE6_PWM	fastio.h	3285;"	d
PE6_PWM	fastio.h	3943;"	d
PE6_RPORT	fastio.h	1742;"	d
PE6_RPORT	fastio.h	2639;"	d
PE6_RPORT	fastio.h	3283;"	d
PE6_RPORT	fastio.h	3940;"	d
PE6_WPORT	fastio.h	1743;"	d
PE6_WPORT	fastio.h	2640;"	d
PE6_WPORT	fastio.h	3284;"	d
PE6_WPORT	fastio.h	3941;"	d
PE7	fastio.h	1746;"	d
PE7	fastio.h	2643;"	d
PE7	fastio.h	3287;"	d
PE7	fastio.h	3944;"	d
PE7_DDR	fastio.h	1750;"	d
PE7_DDR	fastio.h	2648;"	d
PE7_DDR	fastio.h	3292;"	d
PE7_DDR	fastio.h	3948;"	d
PE7_PIN	fastio.h	1747;"	d
PE7_PIN	fastio.h	2644;"	d
PE7_PIN	fastio.h	3288;"	d
PE7_PIN	fastio.h	3945;"	d
PE7_PWM	fastio.h	1751;"	d
PE7_PWM	fastio.h	2647;"	d
PE7_PWM	fastio.h	3291;"	d
PE7_PWM	fastio.h	3949;"	d
PE7_RPORT	fastio.h	1748;"	d
PE7_RPORT	fastio.h	2645;"	d
PE7_RPORT	fastio.h	3289;"	d
PE7_RPORT	fastio.h	3946;"	d
PE7_WPORT	fastio.h	1749;"	d
PE7_WPORT	fastio.h	2646;"	d
PE7_WPORT	fastio.h	3290;"	d
PE7_WPORT	fastio.h	3947;"	d
PENDING	macros.h	60;"	d
PF0	fastio.h	1753;"	d
PF0	fastio.h	2650;"	d
PF0	fastio.h	3294;"	d
PF0	fastio.h	3951;"	d
PF0_DDR	fastio.h	1757;"	d
PF0_DDR	fastio.h	2655;"	d
PF0_DDR	fastio.h	3299;"	d
PF0_DDR	fastio.h	3955;"	d
PF0_PIN	fastio.h	1754;"	d
PF0_PIN	fastio.h	2651;"	d
PF0_PIN	fastio.h	3295;"	d
PF0_PIN	fastio.h	3952;"	d
PF0_PWM	fastio.h	1758;"	d
PF0_PWM	fastio.h	2654;"	d
PF0_PWM	fastio.h	3298;"	d
PF0_PWM	fastio.h	3956;"	d
PF0_RPORT	fastio.h	1755;"	d
PF0_RPORT	fastio.h	2652;"	d
PF0_RPORT	fastio.h	3296;"	d
PF0_RPORT	fastio.h	3953;"	d
PF0_WPORT	fastio.h	1756;"	d
PF0_WPORT	fastio.h	2653;"	d
PF0_WPORT	fastio.h	3297;"	d
PF0_WPORT	fastio.h	3954;"	d
PF1	fastio.h	1759;"	d
PF1	fastio.h	2656;"	d
PF1	fastio.h	3300;"	d
PF1	fastio.h	3957;"	d
PF1_DDR	fastio.h	1763;"	d
PF1_DDR	fastio.h	2661;"	d
PF1_DDR	fastio.h	3305;"	d
PF1_DDR	fastio.h	3961;"	d
PF1_PIN	fastio.h	1760;"	d
PF1_PIN	fastio.h	2657;"	d
PF1_PIN	fastio.h	3301;"	d
PF1_PIN	fastio.h	3958;"	d
PF1_PWM	fastio.h	1764;"	d
PF1_PWM	fastio.h	2660;"	d
PF1_PWM	fastio.h	3304;"	d
PF1_PWM	fastio.h	3962;"	d
PF1_RPORT	fastio.h	1761;"	d
PF1_RPORT	fastio.h	2658;"	d
PF1_RPORT	fastio.h	3302;"	d
PF1_RPORT	fastio.h	3959;"	d
PF1_WPORT	fastio.h	1762;"	d
PF1_WPORT	fastio.h	2659;"	d
PF1_WPORT	fastio.h	3303;"	d
PF1_WPORT	fastio.h	3960;"	d
PF2	fastio.h	1765;"	d
PF2	fastio.h	2662;"	d
PF2	fastio.h	3306;"	d
PF2	fastio.h	3963;"	d
PF2_DDR	fastio.h	1769;"	d
PF2_DDR	fastio.h	2667;"	d
PF2_DDR	fastio.h	3311;"	d
PF2_DDR	fastio.h	3967;"	d
PF2_PIN	fastio.h	1766;"	d
PF2_PIN	fastio.h	2663;"	d
PF2_PIN	fastio.h	3307;"	d
PF2_PIN	fastio.h	3964;"	d
PF2_PWM	fastio.h	1770;"	d
PF2_PWM	fastio.h	2666;"	d
PF2_PWM	fastio.h	3310;"	d
PF2_PWM	fastio.h	3968;"	d
PF2_RPORT	fastio.h	1767;"	d
PF2_RPORT	fastio.h	2664;"	d
PF2_RPORT	fastio.h	3308;"	d
PF2_RPORT	fastio.h	3965;"	d
PF2_WPORT	fastio.h	1768;"	d
PF2_WPORT	fastio.h	2665;"	d
PF2_WPORT	fastio.h	3309;"	d
PF2_WPORT	fastio.h	3966;"	d
PF3	fastio.h	1771;"	d
PF3	fastio.h	2668;"	d
PF3	fastio.h	3312;"	d
PF3	fastio.h	3969;"	d
PF3_DDR	fastio.h	1775;"	d
PF3_DDR	fastio.h	2673;"	d
PF3_DDR	fastio.h	3317;"	d
PF3_DDR	fastio.h	3973;"	d
PF3_PIN	fastio.h	1772;"	d
PF3_PIN	fastio.h	2669;"	d
PF3_PIN	fastio.h	3313;"	d
PF3_PIN	fastio.h	3970;"	d
PF3_PWM	fastio.h	1776;"	d
PF3_PWM	fastio.h	2672;"	d
PF3_PWM	fastio.h	3316;"	d
PF3_PWM	fastio.h	3974;"	d
PF3_RPORT	fastio.h	1773;"	d
PF3_RPORT	fastio.h	2670;"	d
PF3_RPORT	fastio.h	3314;"	d
PF3_RPORT	fastio.h	3971;"	d
PF3_WPORT	fastio.h	1774;"	d
PF3_WPORT	fastio.h	2671;"	d
PF3_WPORT	fastio.h	3315;"	d
PF3_WPORT	fastio.h	3972;"	d
PF4	fastio.h	1777;"	d
PF4	fastio.h	2674;"	d
PF4	fastio.h	3318;"	d
PF4	fastio.h	3975;"	d
PF4_DDR	fastio.h	1781;"	d
PF4_DDR	fastio.h	2679;"	d
PF4_DDR	fastio.h	3323;"	d
PF4_DDR	fastio.h	3979;"	d
PF4_PIN	fastio.h	1778;"	d
PF4_PIN	fastio.h	2675;"	d
PF4_PIN	fastio.h	3319;"	d
PF4_PIN	fastio.h	3976;"	d
PF4_PWM	fastio.h	1782;"	d
PF4_PWM	fastio.h	2678;"	d
PF4_PWM	fastio.h	3322;"	d
PF4_PWM	fastio.h	3980;"	d
PF4_RPORT	fastio.h	1779;"	d
PF4_RPORT	fastio.h	2676;"	d
PF4_RPORT	fastio.h	3320;"	d
PF4_RPORT	fastio.h	3977;"	d
PF4_WPORT	fastio.h	1780;"	d
PF4_WPORT	fastio.h	2677;"	d
PF4_WPORT	fastio.h	3321;"	d
PF4_WPORT	fastio.h	3978;"	d
PF5	fastio.h	1783;"	d
PF5	fastio.h	2680;"	d
PF5	fastio.h	3324;"	d
PF5	fastio.h	3981;"	d
PF5_DDR	fastio.h	1787;"	d
PF5_DDR	fastio.h	2685;"	d
PF5_DDR	fastio.h	3329;"	d
PF5_DDR	fastio.h	3985;"	d
PF5_PIN	fastio.h	1784;"	d
PF5_PIN	fastio.h	2681;"	d
PF5_PIN	fastio.h	3325;"	d
PF5_PIN	fastio.h	3982;"	d
PF5_PWM	fastio.h	1788;"	d
PF5_PWM	fastio.h	2684;"	d
PF5_PWM	fastio.h	3328;"	d
PF5_PWM	fastio.h	3986;"	d
PF5_RPORT	fastio.h	1785;"	d
PF5_RPORT	fastio.h	2682;"	d
PF5_RPORT	fastio.h	3326;"	d
PF5_RPORT	fastio.h	3983;"	d
PF5_WPORT	fastio.h	1786;"	d
PF5_WPORT	fastio.h	2683;"	d
PF5_WPORT	fastio.h	3327;"	d
PF5_WPORT	fastio.h	3984;"	d
PF6	fastio.h	1789;"	d
PF6	fastio.h	2686;"	d
PF6	fastio.h	3330;"	d
PF6	fastio.h	3987;"	d
PF6_DDR	fastio.h	1793;"	d
PF6_DDR	fastio.h	2691;"	d
PF6_DDR	fastio.h	3335;"	d
PF6_DDR	fastio.h	3991;"	d
PF6_PIN	fastio.h	1790;"	d
PF6_PIN	fastio.h	2687;"	d
PF6_PIN	fastio.h	3331;"	d
PF6_PIN	fastio.h	3988;"	d
PF6_PWM	fastio.h	1794;"	d
PF6_PWM	fastio.h	2690;"	d
PF6_PWM	fastio.h	3334;"	d
PF6_PWM	fastio.h	3992;"	d
PF6_RPORT	fastio.h	1791;"	d
PF6_RPORT	fastio.h	2688;"	d
PF6_RPORT	fastio.h	3332;"	d
PF6_RPORT	fastio.h	3989;"	d
PF6_WPORT	fastio.h	1792;"	d
PF6_WPORT	fastio.h	2689;"	d
PF6_WPORT	fastio.h	3333;"	d
PF6_WPORT	fastio.h	3990;"	d
PF7	fastio.h	1795;"	d
PF7	fastio.h	2692;"	d
PF7	fastio.h	3336;"	d
PF7	fastio.h	3993;"	d
PF7_DDR	fastio.h	1799;"	d
PF7_DDR	fastio.h	2697;"	d
PF7_DDR	fastio.h	3341;"	d
PF7_DDR	fastio.h	3997;"	d
PF7_PIN	fastio.h	1796;"	d
PF7_PIN	fastio.h	2693;"	d
PF7_PIN	fastio.h	3337;"	d
PF7_PIN	fastio.h	3994;"	d
PF7_PWM	fastio.h	1800;"	d
PF7_PWM	fastio.h	2696;"	d
PF7_PWM	fastio.h	3340;"	d
PF7_PWM	fastio.h	3998;"	d
PF7_RPORT	fastio.h	1797;"	d
PF7_RPORT	fastio.h	2694;"	d
PF7_RPORT	fastio.h	3338;"	d
PF7_RPORT	fastio.h	3995;"	d
PF7_WPORT	fastio.h	1798;"	d
PF7_WPORT	fastio.h	2695;"	d
PF7_WPORT	fastio.h	3339;"	d
PF7_WPORT	fastio.h	3996;"	d
PG0	fastio.h	1802;"	d
PG0	fastio.h	4000;"	d
PG0_DDR	fastio.h	1806;"	d
PG0_DDR	fastio.h	4004;"	d
PG0_PIN	fastio.h	1803;"	d
PG0_PIN	fastio.h	4001;"	d
PG0_PWM	fastio.h	1807;"	d
PG0_PWM	fastio.h	4005;"	d
PG0_RPORT	fastio.h	1804;"	d
PG0_RPORT	fastio.h	4002;"	d
PG0_WPORT	fastio.h	1805;"	d
PG0_WPORT	fastio.h	4003;"	d
PG1	fastio.h	1808;"	d
PG1	fastio.h	4006;"	d
PG1_DDR	fastio.h	1812;"	d
PG1_DDR	fastio.h	4010;"	d
PG1_PIN	fastio.h	1809;"	d
PG1_PIN	fastio.h	4007;"	d
PG1_PWM	fastio.h	1813;"	d
PG1_PWM	fastio.h	4011;"	d
PG1_RPORT	fastio.h	1810;"	d
PG1_RPORT	fastio.h	4008;"	d
PG1_WPORT	fastio.h	1811;"	d
PG1_WPORT	fastio.h	4009;"	d
PG2	fastio.h	1814;"	d
PG2	fastio.h	4012;"	d
PG2_DDR	fastio.h	1818;"	d
PG2_DDR	fastio.h	4016;"	d
PG2_PIN	fastio.h	1815;"	d
PG2_PIN	fastio.h	4013;"	d
PG2_PWM	fastio.h	1819;"	d
PG2_PWM	fastio.h	4017;"	d
PG2_RPORT	fastio.h	1816;"	d
PG2_RPORT	fastio.h	4014;"	d
PG2_WPORT	fastio.h	1817;"	d
PG2_WPORT	fastio.h	4015;"	d
PG3	fastio.h	1820;"	d
PG3	fastio.h	4018;"	d
PG3_DDR	fastio.h	1824;"	d
PG3_DDR	fastio.h	4022;"	d
PG3_PIN	fastio.h	1821;"	d
PG3_PIN	fastio.h	4019;"	d
PG3_PWM	fastio.h	1825;"	d
PG3_PWM	fastio.h	4023;"	d
PG3_RPORT	fastio.h	1822;"	d
PG3_RPORT	fastio.h	4020;"	d
PG3_WPORT	fastio.h	1823;"	d
PG3_WPORT	fastio.h	4021;"	d
PG4	fastio.h	1826;"	d
PG4	fastio.h	4024;"	d
PG4_DDR	fastio.h	1830;"	d
PG4_DDR	fastio.h	4028;"	d
PG4_PIN	fastio.h	1827;"	d
PG4_PIN	fastio.h	4025;"	d
PG4_PWM	fastio.h	1831;"	d
PG4_PWM	fastio.h	4029;"	d
PG4_RPORT	fastio.h	1828;"	d
PG4_RPORT	fastio.h	4026;"	d
PG4_WPORT	fastio.h	1829;"	d
PG4_WPORT	fastio.h	4027;"	d
PG5	fastio.h	1832;"	d
PG5	fastio.h	4030;"	d
PG5_DDR	fastio.h	1836;"	d
PG5_DDR	fastio.h	4034;"	d
PG5_PIN	fastio.h	1833;"	d
PG5_PIN	fastio.h	4031;"	d
PG5_PWM	fastio.h	1837;"	d
PG5_PWM	fastio.h	4035;"	d
PG5_RPORT	fastio.h	1834;"	d
PG5_RPORT	fastio.h	4032;"	d
PG5_WPORT	fastio.h	1835;"	d
PG5_WPORT	fastio.h	4033;"	d
PG6	fastio.h	1838;"	d
PG6_DDR	fastio.h	1842;"	d
PG6_PIN	fastio.h	1839;"	d
PG6_PWM	fastio.h	1843;"	d
PG6_RPORT	fastio.h	1840;"	d
PG6_WPORT	fastio.h	1841;"	d
PG7	fastio.h	1844;"	d
PG7_DDR	fastio.h	1848;"	d
PG7_PIN	fastio.h	1845;"	d
PG7_PWM	fastio.h	1849;"	d
PG7_RPORT	fastio.h	1846;"	d
PG7_WPORT	fastio.h	1847;"	d
PGM_RD_W	temperature.cpp	852;"	d	file:
PH0	fastio.h	1851;"	d
PH0_DDR	fastio.h	1855;"	d
PH0_PIN	fastio.h	1852;"	d
PH0_PWM	fastio.h	1856;"	d
PH0_RPORT	fastio.h	1853;"	d
PH0_WPORT	fastio.h	1854;"	d
PH1	fastio.h	1857;"	d
PH1_DDR	fastio.h	1861;"	d
PH1_PIN	fastio.h	1858;"	d
PH1_PWM	fastio.h	1862;"	d
PH1_RPORT	fastio.h	1859;"	d
PH1_WPORT	fastio.h	1860;"	d
PH2	fastio.h	1863;"	d
PH2_DDR	fastio.h	1867;"	d
PH2_PIN	fastio.h	1864;"	d
PH2_PWM	fastio.h	1868;"	d
PH2_RPORT	fastio.h	1865;"	d
PH2_WPORT	fastio.h	1866;"	d
PH3	fastio.h	1869;"	d
PH3_DDR	fastio.h	1873;"	d
PH3_PIN	fastio.h	1870;"	d
PH3_PWM	fastio.h	1874;"	d
PH3_RPORT	fastio.h	1871;"	d
PH3_WPORT	fastio.h	1872;"	d
PH4	fastio.h	1875;"	d
PH4_DDR	fastio.h	1879;"	d
PH4_PIN	fastio.h	1876;"	d
PH4_PWM	fastio.h	1880;"	d
PH4_RPORT	fastio.h	1877;"	d
PH4_WPORT	fastio.h	1878;"	d
PH5	fastio.h	1881;"	d
PH5_DDR	fastio.h	1885;"	d
PH5_PIN	fastio.h	1882;"	d
PH5_PWM	fastio.h	1886;"	d
PH5_RPORT	fastio.h	1883;"	d
PH5_WPORT	fastio.h	1884;"	d
PH6	fastio.h	1887;"	d
PH6_DDR	fastio.h	1891;"	d
PH6_PIN	fastio.h	1888;"	d
PH6_PWM	fastio.h	1892;"	d
PH6_RPORT	fastio.h	1889;"	d
PH6_WPORT	fastio.h	1890;"	d
PH7	fastio.h	1893;"	d
PH7_DDR	fastio.h	1897;"	d
PH7_PIN	fastio.h	1894;"	d
PH7_PWM	fastio.h	1898;"	d
PH7_RPORT	fastio.h	1895;"	d
PH7_WPORT	fastio.h	1896;"	d
PIDTEMP	Configuration.h	199;"	d
PIDTEMPBED	Configuration.h	232;"	d
PID_BED_INTEGRAL_DRIVE_MAX	Configuration.h	246;"	d
PID_FUNCTIONAL_RANGE	Configuration.h	209;"	d
PID_INTEGRAL_DRIVE_MAX	Configuration.h	211;"	d
PID_MAX	Configuration.h	201;"	d
PID_MENU_ITEMS	ultralcd.cpp	2043;"	d	file:
PID_PARAM	temperature.h	89;"	d
PID_PARAM	temperature.h	95;"	d
PID_autotune	temperature.cpp	/^  void PID_autotune(float temp, int extruder, int ncycles, bool set_result\/*=false*\/) {$/;"	f
PID_dT	temperature.cpp	62;"	d	file:
PINS_H	pins.h	24;"	d
PIN_EXISTS	macros.h	58;"	d
PJ0	fastio.h	1900;"	d
PJ0_DDR	fastio.h	1904;"	d
PJ0_PIN	fastio.h	1901;"	d
PJ0_PWM	fastio.h	1905;"	d
PJ0_RPORT	fastio.h	1902;"	d
PJ0_WPORT	fastio.h	1903;"	d
PJ1	fastio.h	1906;"	d
PJ1_DDR	fastio.h	1910;"	d
PJ1_PIN	fastio.h	1907;"	d
PJ1_PWM	fastio.h	1911;"	d
PJ1_RPORT	fastio.h	1908;"	d
PJ1_WPORT	fastio.h	1909;"	d
PJ2	fastio.h	1912;"	d
PJ2_DDR	fastio.h	1916;"	d
PJ2_PIN	fastio.h	1913;"	d
PJ2_PWM	fastio.h	1917;"	d
PJ2_RPORT	fastio.h	1914;"	d
PJ2_WPORT	fastio.h	1915;"	d
PJ3	fastio.h	1918;"	d
PJ3_DDR	fastio.h	1922;"	d
PJ3_PIN	fastio.h	1919;"	d
PJ3_PWM	fastio.h	1923;"	d
PJ3_RPORT	fastio.h	1920;"	d
PJ3_WPORT	fastio.h	1921;"	d
PJ4	fastio.h	1924;"	d
PJ4_DDR	fastio.h	1928;"	d
PJ4_PIN	fastio.h	1925;"	d
PJ4_PWM	fastio.h	1929;"	d
PJ4_RPORT	fastio.h	1926;"	d
PJ4_WPORT	fastio.h	1927;"	d
PJ5	fastio.h	1930;"	d
PJ5_DDR	fastio.h	1934;"	d
PJ5_PIN	fastio.h	1931;"	d
PJ5_PWM	fastio.h	1935;"	d
PJ5_RPORT	fastio.h	1932;"	d
PJ5_WPORT	fastio.h	1933;"	d
PJ6	fastio.h	1936;"	d
PJ6_DDR	fastio.h	1940;"	d
PJ6_PIN	fastio.h	1937;"	d
PJ6_PWM	fastio.h	1941;"	d
PJ6_RPORT	fastio.h	1938;"	d
PJ6_WPORT	fastio.h	1939;"	d
PJ7	fastio.h	1942;"	d
PJ7_DDR	fastio.h	1946;"	d
PJ7_PIN	fastio.h	1943;"	d
PJ7_PWM	fastio.h	1947;"	d
PJ7_RPORT	fastio.h	1944;"	d
PJ7_WPORT	fastio.h	1945;"	d
PK0	fastio.h	1949;"	d
PK0_DDR	fastio.h	1953;"	d
PK0_PIN	fastio.h	1950;"	d
PK0_PWM	fastio.h	1954;"	d
PK0_RPORT	fastio.h	1951;"	d
PK0_WPORT	fastio.h	1952;"	d
PK1	fastio.h	1955;"	d
PK1_DDR	fastio.h	1959;"	d
PK1_PIN	fastio.h	1956;"	d
PK1_PWM	fastio.h	1960;"	d
PK1_RPORT	fastio.h	1957;"	d
PK1_WPORT	fastio.h	1958;"	d
PK2	fastio.h	1961;"	d
PK2_DDR	fastio.h	1965;"	d
PK2_PIN	fastio.h	1962;"	d
PK2_PWM	fastio.h	1966;"	d
PK2_RPORT	fastio.h	1963;"	d
PK2_WPORT	fastio.h	1964;"	d
PK3	fastio.h	1967;"	d
PK3_DDR	fastio.h	1971;"	d
PK3_PIN	fastio.h	1968;"	d
PK3_PWM	fastio.h	1972;"	d
PK3_RPORT	fastio.h	1969;"	d
PK3_WPORT	fastio.h	1970;"	d
PK4	fastio.h	1973;"	d
PK4_DDR	fastio.h	1977;"	d
PK4_PIN	fastio.h	1974;"	d
PK4_PWM	fastio.h	1978;"	d
PK4_RPORT	fastio.h	1975;"	d
PK4_WPORT	fastio.h	1976;"	d
PK5	fastio.h	1979;"	d
PK5_DDR	fastio.h	1983;"	d
PK5_PIN	fastio.h	1980;"	d
PK5_PWM	fastio.h	1984;"	d
PK5_RPORT	fastio.h	1981;"	d
PK5_WPORT	fastio.h	1982;"	d
PK6	fastio.h	1985;"	d
PK6_DDR	fastio.h	1989;"	d
PK6_PIN	fastio.h	1986;"	d
PK6_PWM	fastio.h	1990;"	d
PK6_RPORT	fastio.h	1987;"	d
PK6_WPORT	fastio.h	1988;"	d
PK7	fastio.h	1991;"	d
PK7_DDR	fastio.h	1995;"	d
PK7_PIN	fastio.h	1992;"	d
PK7_PWM	fastio.h	1996;"	d
PK7_RPORT	fastio.h	1993;"	d
PK7_WPORT	fastio.h	1994;"	d
PL0	fastio.h	1998;"	d
PL0_DDR	fastio.h	2002;"	d
PL0_PIN	fastio.h	1999;"	d
PL0_PWM	fastio.h	2003;"	d
PL0_RPORT	fastio.h	2000;"	d
PL0_WPORT	fastio.h	2001;"	d
PL1	fastio.h	2004;"	d
PL1_DDR	fastio.h	2008;"	d
PL1_PIN	fastio.h	2005;"	d
PL1_PWM	fastio.h	2009;"	d
PL1_RPORT	fastio.h	2006;"	d
PL1_WPORT	fastio.h	2007;"	d
PL2	fastio.h	2010;"	d
PL2_DDR	fastio.h	2014;"	d
PL2_PIN	fastio.h	2011;"	d
PL2_PWM	fastio.h	2015;"	d
PL2_RPORT	fastio.h	2012;"	d
PL2_WPORT	fastio.h	2013;"	d
PL3	fastio.h	2016;"	d
PL3_DDR	fastio.h	2020;"	d
PL3_PIN	fastio.h	2017;"	d
PL3_PWM	fastio.h	2021;"	d
PL3_RPORT	fastio.h	2018;"	d
PL3_WPORT	fastio.h	2019;"	d
PL4	fastio.h	2022;"	d
PL4_DDR	fastio.h	2026;"	d
PL4_PIN	fastio.h	2023;"	d
PL4_PWM	fastio.h	2027;"	d
PL4_RPORT	fastio.h	2024;"	d
PL4_WPORT	fastio.h	2025;"	d
PL5	fastio.h	2028;"	d
PL5_DDR	fastio.h	2032;"	d
PL5_PIN	fastio.h	2029;"	d
PL5_PWM	fastio.h	2033;"	d
PL5_RPORT	fastio.h	2030;"	d
PL5_WPORT	fastio.h	2031;"	d
PL6	fastio.h	2034;"	d
PL6_DDR	fastio.h	2038;"	d
PL6_PIN	fastio.h	2035;"	d
PL6_PWM	fastio.h	2039;"	d
PL6_RPORT	fastio.h	2036;"	d
PL6_WPORT	fastio.h	2037;"	d
PL7	fastio.h	2040;"	d
PL7_DDR	fastio.h	2044;"	d
PL7_PIN	fastio.h	2041;"	d
PL7_PWM	fastio.h	2045;"	d
PL7_RPORT	fastio.h	2042;"	d
PL7_WPORT	fastio.h	2043;"	d
PLANNER_H	planner.h	47;"	d
PLA_PREHEAT_FAN_SPEED	Configuration.h	710;"	d
PLA_PREHEAT_HOTEND_TEMP	Configuration.h	708;"	d
PLA_PREHEAT_HPB_TEMP	Configuration.h	709;"	d
POWER_SUPPLY	Conditionals.h	458;"	d
POWER_SUPPLY	Configuration.h	100;"	d
PREVENT_DANGEROUS_EXTRUDE	Configuration.h	261;"	d
PREVENT_LENGTHY_EXTRUDE	Configuration.h	263;"	d
PROGMEM	Marlin_main.cpp	/^const char echomagic[] PROGMEM = "echo:";$/;"	v
PROGMEM	Marlin_main.cpp	/^const char errormagic[] PROGMEM = "Error:";$/;"	v
PROGMEM	Sd2Card.cpp	/^static const uint16_t crctab[] PROGMEM = {$/;"	v	file:
PROGMEM	speed_lookuptable.h	/^const uint16_t speed_lookuptable_fast[256][2] PROGMEM = {$/;"	v
PROGMEM	speed_lookuptable.h	/^const uint16_t speed_lookuptable_fast[256][2] PROGMEM = {\\$/;"	v
PROGMEM	speed_lookuptable.h	/^const uint16_t speed_lookuptable_slow[256][2] PROGMEM = {$/;"	v
PROGMEM	speed_lookuptable.h	/^const uint16_t speed_lookuptable_slow[256][2] PROGMEM = {\\$/;"	v
PROGMEM	thermistortables.h	/^  const short temptable_998[][2] PROGMEM = {$/;"	v
PROGMEM	thermistortables.h	/^  const short temptable_999[][2] PROGMEM = {$/;"	v
PROGMEM	thermistortables.h	/^const short temptable_1010[][2] PROGMEM = {$/;"	v
PROGMEM	thermistortables.h	/^const short temptable_1047[][2] PROGMEM = {$/;"	v
PROGMEM	thermistortables.h	/^const short temptable_10[][2] PROGMEM = {$/;"	v
PROGMEM	thermistortables.h	/^const short temptable_110[][2] PROGMEM = {$/;"	v
PROGMEM	thermistortables.h	/^const short temptable_11[][2] PROGMEM = {$/;"	v
PROGMEM	thermistortables.h	/^const short temptable_12[][2] PROGMEM = {$/;"	v
PROGMEM	thermistortables.h	/^const short temptable_13[][2] PROGMEM = {$/;"	v
PROGMEM	thermistortables.h	/^const short temptable_147[][2] PROGMEM = {$/;"	v
PROGMEM	thermistortables.h	/^const short temptable_1[][2] PROGMEM = {$/;"	v
PROGMEM	thermistortables.h	/^const short temptable_20[][2] PROGMEM = {$/;"	v
PROGMEM	thermistortables.h	/^const short temptable_2[][2] PROGMEM = {$/;"	v
PROGMEM	thermistortables.h	/^const short temptable_3[][2] PROGMEM = {$/;"	v
PROGMEM	thermistortables.h	/^const short temptable_4[][2] PROGMEM = {$/;"	v
PROGMEM	thermistortables.h	/^const short temptable_51[][2] PROGMEM = {$/;"	v
PROGMEM	thermistortables.h	/^const short temptable_52[][2] PROGMEM = {$/;"	v
PROGMEM	thermistortables.h	/^const short temptable_55[][2] PROGMEM = {$/;"	v
PROGMEM	thermistortables.h	/^const short temptable_5[][2] PROGMEM = {$/;"	v
PROGMEM	thermistortables.h	/^const short temptable_60[][2] PROGMEM = {$/;"	v
PROGMEM	thermistortables.h	/^const short temptable_6[][2] PROGMEM = {$/;"	v
PROGMEM	thermistortables.h	/^const short temptable_70[][2] PROGMEM = {$/;"	v
PROGMEM	thermistortables.h	/^const short temptable_71[][2] PROGMEM = {$/;"	v
PROGMEM	thermistortables.h	/^const short temptable_7[][2] PROGMEM = {$/;"	v
PROGMEM	thermistortables.h	/^const short temptable_8[][2] PROGMEM = {$/;"	v
PROGMEM	thermistortables.h	/^const short temptable_9[][2] PROGMEM = {$/;"	v
PROGRESS_BAR_BAR_TIME	Configuration_adv.h	374;"	d
PROGRESS_BAR_MSG_TIME	Configuration_adv.h	376;"	d
PROGRESS_MSG_EXPIRE	Configuration_adv.h	378;"	d
PS_ON_ASLEEP	Conditionals.h	462;"	d
PS_ON_ASLEEP	Conditionals.h	465;"	d
PS_ON_AWAKE	Conditionals.h	461;"	d
PS_ON_AWAKE	Conditionals.h	464;"	d
PS_ON_PIN	pins_RAMPS_14.h	118;"	d
PWM_MOTOR_CURRENT	stepper.cpp	118;"	d	file:
P_AXIS	stepper.cpp	316;"	d	file:
PgmPrint	SdFatUtil.h	41;"	d
PgmPrintln	SdFatUtil.h	43;"	d
Pin	servo.h	/^  ServoPin_t Pin;$/;"	m	struct:__anon4
PrepareTemp_0	temperature.cpp	/^  PrepareTemp_0,$/;"	e	enum:TempState	file:
PrepareTemp_1	temperature.cpp	/^  PrepareTemp_1,$/;"	e	enum:TempState	file:
PrepareTemp_2	temperature.cpp	/^  PrepareTemp_2,$/;"	e	enum:TempState	file:
PrepareTemp_3	temperature.cpp	/^  PrepareTemp_3,$/;"	e	enum:TempState	file:
PrepareTemp_BED	temperature.cpp	/^  PrepareTemp_BED,$/;"	e	enum:TempState	file:
Prepare_FILWIDTH	temperature.cpp	/^  Prepare_FILWIDTH,$/;"	e	enum:TempState	file:
ProbeAction	Marlin_main.cpp	/^enum ProbeAction {$/;"	g	file:
ProbeDeploy	Marlin_main.cpp	/^  ProbeDeploy        = _BV(0),$/;"	e	enum:ProbeAction	file:
ProbeDeployAndStow	Marlin_main.cpp	/^  ProbeDeployAndStow = (ProbeDeploy | ProbeStow)$/;"	e	enum:ProbeAction	file:
ProbeStay	Marlin_main.cpp	/^  ProbeStay          = 0,$/;"	e	enum:ProbeAction	file:
ProbeStow	Marlin_main.cpp	/^  ProbeStow          = _BV(1),$/;"	e	enum:ProbeAction	file:
PtA	thermistortables.h	1200;"	d
PtAdVal	thermistortables.h	1203;"	d
PtB	thermistortables.h	1201;"	d
PtLine	thermistortables.h	1204;"	d
PtRt	thermistortables.h	1202;"	d
QUICK_HOME	Conditionals.h	331;"	d
R1_IDLE_STATE	SdInfo.h	/^uint8_t const R1_IDLE_STATE = 0X01;$/;"	v
R1_ILLEGAL_COMMAND	SdInfo.h	/^uint8_t const R1_ILLEGAL_COMMAND = 0X04;$/;"	v
R1_READY_STATE	SdInfo.h	/^uint8_t const R1_READY_STATE = 0X00;$/;"	v
RADIANS	macros.h	37;"	d
RB	ultralcd.cpp	/^static float RF = 0, LF = 0, RB = 0, LB = 0;$/;"	v	file:
READ	fastio.h	87;"	d
REFRESH_INTERVAL	servo.h	123;"	d
REPRAPWORLD_BTN_OFFSET	ultralcd.h	95;"	d
REPRAPWORLD_KEYPAD_MOVE_HOME	ultralcd.h	119;"	d
REPRAPWORLD_KEYPAD_MOVE_X_LEFT	ultralcd.h	121;"	d
REPRAPWORLD_KEYPAD_MOVE_X_RIGHT	ultralcd.h	118;"	d
REPRAPWORLD_KEYPAD_MOVE_Y_DOWN	ultralcd.h	117;"	d
REPRAPWORLD_KEYPAD_MOVE_Y_UP	ultralcd.h	120;"	d
REPRAPWORLD_KEYPAD_MOVE_Z_DOWN	ultralcd.h	115;"	d
REPRAPWORLD_KEYPAD_MOVE_Z_UP	ultralcd.h	116;"	d
REPRAP_DISCOUNT_FULL_GRAPHIC_SMART_CONTROLLER	Conditionals.h	86;"	d
REPRAP_DISCOUNT_SMART_CONTROLLER	Conditionals.h	104;"	d
REPRAP_DISCOUNT_SMART_CONTROLLER	Configuration.h	877;"	d
RETRACT_FEEDRATE	Configuration_adv.h	501;"	d
RETRACT_LENGTH	Configuration_adv.h	499;"	d
RETRACT_LENGTH_SWAP	Configuration_adv.h	500;"	d
RETRACT_RECOVER_FEEDRATE	Configuration_adv.h	505;"	d
RETRACT_RECOVER_LENGTH	Configuration_adv.h	503;"	d
RETRACT_RECOVER_LENGTH_SWAP	Configuration_adv.h	504;"	d
RETRACT_ZLIFT	Configuration_adv.h	502;"	d
REV_E_DIR	stepper_indirection.h	182;"	d
REV_E_DIR	stepper_indirection.h	186;"	d
REV_E_DIR	stepper_indirection.h	194;"	d
REV_E_DIR	stepper_indirection.h	199;"	d
REV_E_DIR	stepper_indirection.h	204;"	d
RF	ultralcd.cpp	/^static float RF = 0, LF = 0, RB = 0, LB = 0;$/;"	v	file:
RIGHT_PROBE_BED_POSITION	Configuration.h	495;"	d
RUNPLAN	Marlin_main.cpp	6026;"	d	file:
RXD	fastio.h	118;"	d
RXD	fastio.h	3349;"	d
RXD	fastio.h	453;"	d
RXD	fastio.h	956;"	d
RXD0	fastio.h	455;"	d
RXD1	fastio.h	458;"	d
RX_BUFFER_SIZE	MarlinSerial.h	88;"	d
Running	Marlin_main.cpp	/^bool Running = true;$/;"	v
SBI	macros.h	32;"	d
SCARA_move_to_cal	Marlin_main.cpp	/^bool SCARA_move_to_cal(uint8_t delta_x, uint8_t delta_y) {$/;"	f
SCK	fastio.h	122;"	d
SCK	fastio.h	2051;"	d
SCK	fastio.h	3353;"	d
SCK	fastio.h	462;"	d
SCK	fastio.h	960;"	d
SCK_PIN	Sd2PinMap.h	/^uint8_t const SCK_PIN   = 21;    \/\/ B1$/;"	v
SCK_PIN	Sd2PinMap.h	/^uint8_t const SCK_PIN = 10;   \/\/ B1$/;"	v
SCK_PIN	Sd2PinMap.h	/^uint8_t const SCK_PIN = 13;   \/\/ B5$/;"	v
SCK_PIN	Sd2PinMap.h	/^uint8_t const SCK_PIN = 1;   \/\/ B1$/;"	v
SCK_PIN	Sd2PinMap.h	/^uint8_t const SCK_PIN = 52;   \/\/ B1$/;"	v
SCK_PIN	Sd2PinMap.h	/^uint8_t const SCK_PIN = 7;   \/\/ B7$/;"	v
SCK_PIN	Sd2PinMap.h	55;"	d
SCK_PIN	pins_RAMPS_14.h	289;"	d
SCL	fastio.h	128;"	d
SCL	fastio.h	3359;"	d
SCL	fastio.h	468;"	d
SCL	fastio.h	966;"	d
SCL_PIN	Sd2PinMap.h	/^uint8_t const SCL_PIN = 0;  \/\/ D0$/;"	v
SCL_PIN	Sd2PinMap.h	/^uint8_t const SCL_PIN = 18;  \/\/ C2$/;"	v
SCL_PIN	Sd2PinMap.h	/^uint8_t const SCL_PIN = 19;  \/\/ C5$/;"	v
SCL_PIN	Sd2PinMap.h	/^uint8_t const SCL_PIN = 21;  \/\/ D0$/;"	v
SCL_PIN	Sd2PinMap.h	/^uint8_t const SCL_PIN = 40;$/;"	v
SCL_PIN	Sd2PinMap.h	/^uint8_t const SCL_PIN = 5;  \/\/ D0$/;"	v
SDA	fastio.h	129;"	d
SDA	fastio.h	3360;"	d
SDA	fastio.h	469;"	d
SDA	fastio.h	967;"	d
SDA_PIN	Sd2PinMap.h	/^uint8_t const SDA_PIN = 17;  \/\/ C1$/;"	v
SDA_PIN	Sd2PinMap.h	/^uint8_t const SDA_PIN = 18;  \/\/ C4$/;"	v
SDA_PIN	Sd2PinMap.h	/^uint8_t const SDA_PIN = 1;  \/\/ D1$/;"	v
SDA_PIN	Sd2PinMap.h	/^uint8_t const SDA_PIN = 20;  \/\/ D1$/;"	v
SDA_PIN	Sd2PinMap.h	/^uint8_t const SDA_PIN = 41;$/;"	v
SDA_PIN	Sd2PinMap.h	/^uint8_t const SDA_PIN = 6;  \/\/ D1$/;"	v
SDCARD_RATHERRECENTFIRST	Configuration_adv.h	364;"	d
SDPOWER	pins_RAMPS_14.h	90;"	d
SDSS	pins_RAMPS_14.h	213;"	d
SDSS	pins_RAMPS_14.h	91;"	d
SDSUPPORT	Configuration.h	771;"	d
SD_CARD_ERROR_ACMD23	Sd2Card.h	/^uint8_t const SD_CARD_ERROR_ACMD23 = 0X9;$/;"	v
SD_CARD_ERROR_ACMD41	Sd2Card.h	/^uint8_t const SD_CARD_ERROR_ACMD41 = 0XA;$/;"	v
SD_CARD_ERROR_BAD_CSD	Sd2Card.h	/^uint8_t const SD_CARD_ERROR_BAD_CSD = 0XB;$/;"	v
SD_CARD_ERROR_CMD0	Sd2Card.h	/^uint8_t const SD_CARD_ERROR_CMD0 = 0X1;$/;"	v
SD_CARD_ERROR_CMD12	Sd2Card.h	/^uint8_t const SD_CARD_ERROR_CMD12 = 0X3;$/;"	v
SD_CARD_ERROR_CMD17	Sd2Card.h	/^uint8_t const SD_CARD_ERROR_CMD17 = 0X4;$/;"	v
SD_CARD_ERROR_CMD18	Sd2Card.h	/^uint8_t const SD_CARD_ERROR_CMD18 = 0X5;$/;"	v
SD_CARD_ERROR_CMD24	Sd2Card.h	/^uint8_t const SD_CARD_ERROR_CMD24 = 0X6;$/;"	v
SD_CARD_ERROR_CMD25	Sd2Card.h	/^uint8_t const SD_CARD_ERROR_CMD25 = 0X7;$/;"	v
SD_CARD_ERROR_CMD58	Sd2Card.h	/^uint8_t const SD_CARD_ERROR_CMD58 = 0X8;$/;"	v
SD_CARD_ERROR_CMD8	Sd2Card.h	/^uint8_t const SD_CARD_ERROR_CMD8 = 0X2;$/;"	v
SD_CARD_ERROR_CRC	Sd2Card.h	/^uint8_t const SD_CARD_ERROR_CRC = 0X20;$/;"	v
SD_CARD_ERROR_ERASE	Sd2Card.h	/^uint8_t const SD_CARD_ERROR_ERASE = 0XC;$/;"	v
SD_CARD_ERROR_ERASE_SINGLE_BLOCK	Sd2Card.h	/^uint8_t const SD_CARD_ERROR_ERASE_SINGLE_BLOCK = 0XD;$/;"	v
SD_CARD_ERROR_ERASE_TIMEOUT	Sd2Card.h	/^uint8_t const SD_CARD_ERROR_ERASE_TIMEOUT = 0XE;$/;"	v
SD_CARD_ERROR_INIT_NOT_CALLED	Sd2Card.h	/^uint8_t const SD_CARD_ERROR_INIT_NOT_CALLED = 0X19;$/;"	v
SD_CARD_ERROR_READ	Sd2Card.h	/^uint8_t const SD_CARD_ERROR_READ = 0XF;$/;"	v
SD_CARD_ERROR_READ_REG	Sd2Card.h	/^uint8_t const SD_CARD_ERROR_READ_REG = 0X10;$/;"	v
SD_CARD_ERROR_READ_TIMEOUT	Sd2Card.h	/^uint8_t const SD_CARD_ERROR_READ_TIMEOUT = 0X11;$/;"	v
SD_CARD_ERROR_SCK_RATE	Sd2Card.h	/^uint8_t const SD_CARD_ERROR_SCK_RATE = 0X18;$/;"	v
SD_CARD_ERROR_STOP_TRAN	Sd2Card.h	/^uint8_t const SD_CARD_ERROR_STOP_TRAN = 0X12;$/;"	v
SD_CARD_ERROR_WRITE	Sd2Card.h	/^uint8_t const SD_CARD_ERROR_WRITE = 0X13;$/;"	v
SD_CARD_ERROR_WRITE_BLOCK_ZERO	Sd2Card.h	/^uint8_t const SD_CARD_ERROR_WRITE_BLOCK_ZERO = 0X14;  \/\/ REMOVE - not used$/;"	v
SD_CARD_ERROR_WRITE_MULTIPLE	Sd2Card.h	/^uint8_t const SD_CARD_ERROR_WRITE_MULTIPLE = 0X15;$/;"	v
SD_CARD_ERROR_WRITE_PROGRAMMING	Sd2Card.h	/^uint8_t const SD_CARD_ERROR_WRITE_PROGRAMMING = 0X16;$/;"	v
SD_CARD_ERROR_WRITE_TIMEOUT	Sd2Card.h	/^uint8_t const SD_CARD_ERROR_WRITE_TIMEOUT = 0X17;$/;"	v
SD_CARD_TYPE_SD1	Sd2Card.h	/^uint8_t const SD_CARD_TYPE_SD1  = 1;$/;"	v
SD_CARD_TYPE_SD2	Sd2Card.h	/^uint8_t const SD_CARD_TYPE_SD2  = 2;$/;"	v
SD_CARD_TYPE_SDHC	Sd2Card.h	/^uint8_t const SD_CARD_TYPE_SDHC = 3;$/;"	v
SD_CHIP_SELECT_PIN	Sd2Card.h	/^  uint8_t const  SD_CHIP_SELECT_PIN = SS_PIN;$/;"	v
SD_CHIP_SELECT_PIN	Sd2Card.h	/^  uint8_t const SD_CHIP_SELECT_PIN = SOFT_SPI_CS_PIN;$/;"	v
SD_DETECT_INVERTED	Conditionals.h	436;"	d
SD_DETECT_INVERTED	Conditionals.h	68;"	d
SD_DETECT_INVERTED	Configuration_adv.h	359;"	d
SD_DETECT_PIN	pins_RAMPS_14.h	180;"	d
SD_DETECT_PIN	pins_RAMPS_14.h	186;"	d
SD_DETECT_PIN	pins_RAMPS_14.h	195;"	d
SD_DETECT_PIN	pins_RAMPS_14.h	200;"	d
SD_DETECT_PIN	pins_RAMPS_14.h	227;"	d
SD_DETECT_PIN	pins_RAMPS_14.h	252;"	d
SD_ERASE_TIMEOUT	Sd2Card.h	/^uint16_t const SD_ERASE_TIMEOUT = 10000;$/;"	v
SD_FINISHED_RELEASECOMMAND	Configuration_adv.h	362;"	d
SD_FINISHED_STEPPERRELEASE	Configuration_adv.h	361;"	d
SD_INIT_TIMEOUT	Sd2Card.h	/^uint16_t const SD_INIT_TIMEOUT = 2000;$/;"	v
SD_PROCEDURE_DEPTH	cardreader.h	86;"	d
SD_READ_TIMEOUT	Sd2Card.h	/^uint16_t const SD_READ_TIMEOUT = 300;$/;"	v
SD_WRITE_TIMEOUT	Sd2Card.h	/^uint16_t const SD_WRITE_TIMEOUT = 600;$/;"	v
SENSITIVE_PINS	pins.h	164;"	d
SERIAL_CHAR	Marlin.h	77;"	d
SERIAL_ECHO	Marlin.h	98;"	d
SERIAL_ECHOLN	Marlin.h	100;"	d
SERIAL_ECHOLNPGM	Marlin.h	101;"	d
SERIAL_ECHOPAIR	Marlin.h	103;"	d
SERIAL_ECHOPGM	Marlin.h	99;"	d
SERIAL_ECHO_START	Marlin.h	97;"	d
SERIAL_EOL	Marlin.h	78;"	d
SERIAL_ERROR	Marlin.h	92;"	d
SERIAL_ERRORLN	Marlin.h	94;"	d
SERIAL_ERRORLNPGM	Marlin.h	95;"	d
SERIAL_ERRORPGM	Marlin.h	93;"	d
SERIAL_ERROR_START	Marlin.h	91;"	d
SERIAL_PORT	Configuration.h	69;"	d
SERIAL_PORT	MarlinSerial.h	41;"	d
SERIAL_PROTOCOL	Marlin.h	81;"	d
SERIAL_PROTOCOLCHAR	Marlin.h	80;"	d
SERIAL_PROTOCOLLN	Marlin.h	84;"	d
SERIAL_PROTOCOLLNPGM	Marlin.h	85;"	d
SERIAL_PROTOCOLPGM	Marlin.h	83;"	d
SERIAL_PROTOCOL_F	Marlin.h	82;"	d
SERIAL_REGNAME	MarlinSerial.h	51;"	d
SERIAL_REGNAME_INTERNAL	MarlinSerial.h	53;"	d
SERIAL_REGNAME_INTERNAL	MarlinSerial.h	55;"	d
SERVO	servo.cpp	94;"	d	file:
SERVO0_PIN	pins_RAMPS_14.h	54;"	d
SERVO0_PIN	pins_RAMPS_14.h	56;"	d
SERVO1_PIN	pins_RAMPS_14.h	58;"	d
SERVO2_PIN	pins_RAMPS_14.h	59;"	d
SERVO3_PIN	pins_RAMPS_14.h	60;"	d
SERVOS_PER_TIMER	servo.h	125;"	d
SERVO_DEACTIVATION_DELAY	Configuration.h	1053;"	d
SERVO_ENDSTOP_ANGLES	Configuration.h	1041;"	d
SERVO_ENDSTOP_IDS	Conditionals.h	746;"	d
SERVO_INDEX	servo.cpp	93;"	d	file:
SERVO_INDEX_TO_CHANNEL	servo.cpp	92;"	d	file:
SERVO_INDEX_TO_TIMER	servo.cpp	91;"	d	file:
SERVO_LEVELING	Conditionals.h	364;"	d
SERVO_MAX	servo.cpp	97;"	d	file:
SERVO_MIN	servo.cpp	96;"	d	file:
SET_ADMUX_ADCSRA	temperature.cpp	1648;"	d	file:
SET_BIT	macros.h	34;"	d
SET_ENDSTOP_BIT	stepper.cpp	357;"	d	file:
SET_INPUT	fastio.h	95;"	d
SET_OUTPUT	fastio.h	97;"	d
SET_SPI_SS_HIGH	SdFatConfig.h	89;"	d
SET_STEP_DIR	stepper.cpp	588;"	d	file:
SHIFT_CLK	pins_RAMPS_14.h	239;"	d
SHIFT_LD	pins_RAMPS_14.h	240;"	d
SHIFT_OUT	pins_RAMPS_14.h	238;"	d
SHORT_BUILD_VERSION	planner.cpp	/^char SHORT_BUILD_VERSION[5];$/;"	v
SHOW_BOOTSCREEN	Configuration.h	59;"	d
SIGNAL	MarlinSerial.cpp	/^  SIGNAL(M_USARTx_RX_vect) {$/;"	f
SIGNAL	servo.cpp	/^    SIGNAL (TIMER1_COMPA_vect) { handle_interrupts(_timer1, &TCNT1, &OCR1A); }$/;"	f
SIGNAL	servo.cpp	/^    SIGNAL (TIMER3_COMPA_vect) { handle_interrupts(_timer3, &TCNT3, &OCR3A); }$/;"	f
SIGNAL	servo.cpp	/^    SIGNAL (TIMER4_COMPA_vect) { handle_interrupts(_timer4, &TCNT4, &OCR4A); }$/;"	f
SIGNAL	servo.cpp	/^    SIGNAL (TIMER5_COMPA_vect) { handle_interrupts(_timer5, &TCNT5, &OCR5A); }$/;"	f
SIN_60	Marlin_main.cpp	410;"	d	file:
SLED_DOCKING_OFFSET	Marlin_main.cpp	2144;"	d	file:
SLED_PIN	pins_RAMPS_14.h	151;"	d
SLOWDOWN	Conditionals.h	330;"	d
SOFTWARE_SPI	Sd2Card.h	130;"	d
SOFTWARE_SPI	Sd2Card.h	132;"	d
SOFT_PWM_SCALE	Configuration.h	999;"	d
SOFT_PWM_SCALE	temperature.cpp	209;"	d	file:
SOFT_SPI_CS_PIN	SdFatConfig.h	/^  uint8_t const SOFT_SPI_CS_PIN = 10;$/;"	v
SOFT_SPI_MISO_PIN	SdFatConfig.h	/^  uint8_t const SOFT_SPI_MISO_PIN = 12;$/;"	v
SOFT_SPI_MOSI_PIN	SdFatConfig.h	/^  uint8_t const SOFT_SPI_MOSI_PIN = 11;$/;"	v
SOFT_SPI_SCK_PIN	SdFatConfig.h	/^  uint8_t const SOFT_SPI_SCK_PIN = 13;$/;"	v
SOURCE_CODE_URL	language.h	73;"	d
SOURCE_CODE_URL	language.h	74;"	d
SPEED_LOOKUPTABLE_H	speed_lookuptable.h	24;"	d
SPI_EIGHTH_SPEED	Sd2Card.h	/^uint8_t const SPI_EIGHTH_SPEED = 3;$/;"	v
SPI_FULL_SPEED	Sd2Card.h	/^uint8_t const SPI_FULL_SPEED = 0;$/;"	v
SPI_HALF_SPEED	Sd2Card.h	/^uint8_t const SPI_HALF_SPEED = 1;$/;"	v
SPI_MISO_PIN	Sd2Card.h	/^  uint8_t const  SPI_MISO_PIN = MISO_PIN;$/;"	v
SPI_MISO_PIN	Sd2Card.h	/^  uint8_t const SPI_MISO_PIN = SOFT_SPI_MISO_PIN;$/;"	v
SPI_MOSI_PIN	Sd2Card.h	/^  uint8_t const  SPI_MOSI_PIN = MOSI_PIN;$/;"	v
SPI_MOSI_PIN	Sd2Card.h	/^  uint8_t const SPI_MOSI_PIN = SOFT_SPI_MOSI_PIN;$/;"	v
SPI_QUARTER_SPEED	Sd2Card.h	/^uint8_t const SPI_QUARTER_SPEED = 2;$/;"	v
SPI_SCK_PIN	Sd2Card.h	/^  uint8_t const  SPI_SCK_PIN = SCK_PIN;$/;"	v
SPI_SCK_PIN	Sd2Card.h	/^  uint8_t const SPI_SCK_PIN = SOFT_SPI_SCK_PIN;$/;"	v
SPI_SD_INIT_RATE	SdFatConfig.h	83;"	d
SPI_SIXTEENTH_SPEED	Sd2Card.h	/^uint8_t const SPI_SIXTEENTH_SPEED = 4;$/;"	v
SPI_SPEED	cardreader.cpp	221;"	d	file:
SR_LCD_2W_NL	Conditionals.h	186;"	d
SS	fastio.h	125;"	d
SS	fastio.h	2054;"	d
SS	fastio.h	3356;"	d
SS	fastio.h	465;"	d
SS	fastio.h	963;"	d
SS_PIN	Sd2PinMap.h	/^uint8_t const SS_PIN    = 20;    \/\/ B0$/;"	v
SS_PIN	Sd2PinMap.h	/^uint8_t const SS_PIN = 0;    \/\/ B0$/;"	v
SS_PIN	Sd2PinMap.h	/^uint8_t const SS_PIN = 10;    \/\/ B2$/;"	v
SS_PIN	Sd2PinMap.h	/^uint8_t const SS_PIN = 16;    \/\/ B0$/;"	v
SS_PIN	Sd2PinMap.h	/^uint8_t const SS_PIN = 4;    \/\/ B4$/;"	v
SS_PIN	Sd2PinMap.h	/^uint8_t const SS_PIN = 53;    \/\/ B0$/;"	v
START_ADC	temperature.cpp	1650;"	d	file:
START_MENU	ultralcd.cpp	182;"	d	file:
STEPPER_DAC_H	stepper_dac.h	45;"	d
STEPPER_INDIRECTION_H	stepper_indirection.h	45;"	d
STEPS_PER_CUBIC_MM_E	Conditionals.h	432;"	d
STEP_ADD	stepper.cpp	729;"	d	file:
STEP_E_ONCE	stepper.cpp	833;"	d	file:
STEP_IF_COUNTER	stepper.cpp	740;"	d	file:
STOPWATCH_H	stopwatch.h	24;"	d
STOP_TRAN_TOKEN	SdInfo.h	/^uint8_t const STOP_TRAN_TOKEN = 0XFD;$/;"	v
STPWTCH_PAUSED	stopwatch.h	/^  STPWTCH_PAUSED$/;"	e	enum:StopwatchStatus
STPWTCH_RUNNING	stopwatch.h	/^  STPWTCH_RUNNING,$/;"	e	enum:StopwatchStatus
STPWTCH_STOPPED	stopwatch.h	/^  STPWTCH_STOPPED,$/;"	e	enum:StopwatchStatus
STRINGIFY	macros.h	28;"	d
STRINGIFY_	macros.h	27;"	d
STRING_CONFIG_H_AUTHOR	Configuration.h	58;"	d
STRING_SPLASH_LINE1	Configuration.h	60;"	d
SWITCH_ENABLED_	macros.h	50;"	d
SWITCH_ENABLED_0	macros.h	48;"	d
SWITCH_ENABLED_1	macros.h	49;"	d
SWITCH_ENABLED_false	macros.h	46;"	d
SWITCH_ENABLED_true	macros.h	47;"	d
Sd2Card	Sd2Card.h	/^  Sd2Card() : errorCode_(SD_CARD_ERROR_INIT_NOT_CALLED), type_(0) {}$/;"	f	class:Sd2Card
Sd2Card	Sd2Card.h	/^class Sd2Card {$/;"	c
Sd2Card_h	Sd2Card.h	34;"	d
Sd2PinMap_h	Sd2PinMap.h	36;"	d
SdBaseFile	SdBaseFile.cpp	/^SdBaseFile::SdBaseFile(const char* path, uint8_t oflag) {$/;"	f	class:SdBaseFile
SdBaseFile	SdBaseFile.h	/^  SdBaseFile() : writeError(false), type_(FAT_FILE_TYPE_CLOSED) {}$/;"	f	class:SdBaseFile
SdBaseFile	SdBaseFile.h	/^class SdBaseFile {$/;"	c
SdBaseFile_h	SdBaseFile.h	33;"	d
SdFatConfig_h	SdFatConfig.h	37;"	d
SdFatStructs_h	SdFatStructs.h	33;"	d
SdFatUtil	SdFatUtil.h	/^namespace SdFatUtil {$/;"	n
SdFatUtil_h	SdFatUtil.h	33;"	d
SdFile	SdFile.cpp	/^SdFile::SdFile(const char* path, uint8_t oflag) : SdBaseFile(path, oflag) {$/;"	f	class:SdFile
SdFile	SdFile.h	/^  SdFile() {}$/;"	f	class:SdFile
SdFile	SdFile.h	/^class SdFile : public SdBaseFile, public Print {$/;"	c
SdFile_h	SdFile.h	39;"	d
SdInfo_h	SdInfo.h	33;"	d
SdVolume	SdVolume.h	/^  SdVolume() : fatType_(0) {}$/;"	f	class:SdVolume
SdVolume	SdVolume.h	/^class SdVolume {$/;"	c
SdVolume_h	SdVolume.h	32;"	d
SerialPrint_P	SdFatUtil.cpp	/^void SdFatUtil::SerialPrint_P(PGM_P str) {$/;"	f	class:SdFatUtil
SerialPrintln_P	SdFatUtil.cpp	/^void SdFatUtil::SerialPrintln_P(PGM_P str) {$/;"	f	class:SdFatUtil
Servo	servo.cpp	/^Servo::Servo() {$/;"	f	class:Servo
Servo	servo.h	/^class Servo {$/;"	c
ServoCount	servo.cpp	/^uint8_t ServoCount = 0;                                     \/\/ the total number of attached servos$/;"	v
ServoInfo_t	servo.h	/^} ServoInfo_t;$/;"	t	typeref:struct:__anon4
ServoPin_t	servo.h	/^} ServoPin_t;$/;"	t	typeref:struct:__anon3
Servo_VERSION	servo.h	118;"	d
StartupDelay	temperature.cpp	/^  StartupDelay \/\/ Startup, delay initial temp reading a tiny bit so the hardware can settle$/;"	e	enum:TempState	file:
Stopped_gcode_LastN	Marlin_main.cpp	/^static long gcode_N, gcode_LastN, Stopped_gcode_LastN = 0;$/;"	v	file:
Stopwatch	stopwatch.cpp	/^Stopwatch::Stopwatch() {$/;"	f	class:Stopwatch
Stopwatch	stopwatch.h	/^class Stopwatch {$/;"	c
StopwatchStatus	stopwatch.h	/^enum StopwatchStatus {$/;"	g
TEMPERATURE_H	temperature.h	44;"	d
TEMP_0_PIN	pins_RAMPS_14.h	138;"	d
TEMP_1_PIN	pins_RAMPS_14.h	139;"	d
TEMP_2_PIN	pins_RAMPS_14.h	140;"	d
TEMP_3_PIN	pins.h	38;"	d
TEMP_BED_CONDITIONS	Marlin_main.cpp	4478;"	d	file:
TEMP_BED_HYSTERESIS	Configuration.h	168;"	d
TEMP_BED_PIN	pins_RAMPS_14.h	148;"	d
TEMP_BED_RESIDENCY_TIME	Configuration.h	167;"	d
TEMP_BED_WINDOW	Configuration.h	169;"	d
TEMP_CONDITIONS	Marlin_main.cpp	4405;"	d	file:
TEMP_HYSTERESIS	Configuration.h	163;"	d
TEMP_MAX_ROUTINE	temperature.cpp	1130;"	d	file:
TEMP_MIN_ROUTINE	temperature.cpp	1122;"	d	file:
TEMP_RESIDENCY_TIME	Configuration.h	162;"	d
TEMP_SENSOR_0	Configuration.h	151;"	d
TEMP_SENSOR_1	Configuration.h	152;"	d
TEMP_SENSOR_2	Configuration.h	153;"	d
TEMP_SENSOR_3	Configuration.h	154;"	d
TEMP_SENSOR_AD595_GAIN	Configuration_adv.h	137;"	d
TEMP_SENSOR_AD595_OFFSET	Configuration_adv.h	136;"	d
TEMP_SENSOR_BED	Configuration.h	155;"	d
TEMP_WINDOW	Configuration.h	164;"	d
TEST	macros.h	31;"	d
TEST_ENDSTOP	stepper.cpp	361;"	d	file:
THERMAL_PROTECTION_BED_HYSTERESIS	Configuration_adv.h	89;"	d
THERMAL_PROTECTION_BED_PERIOD	Configuration_adv.h	88;"	d
THERMAL_PROTECTION_HYSTERESIS	Configuration_adv.h	67;"	d
THERMAL_PROTECTION_PERIOD	Configuration_adv.h	66;"	d
THERMISTORBED	Conditionals.h	531;"	d
THERMISTORHEATER_0	Conditionals.h	483;"	d
THERMISTORHEATER_1	Conditionals.h	495;"	d
THERMISTORHEATER_2	Conditionals.h	507;"	d
THERMISTORHEATER_3	Conditionals.h	519;"	d
THERMISTORTABLES_H_	thermistortables.h	24;"	d
TOGGLE	fastio.h	92;"	d
TOOLCHANGE_PARK_ZLIFT	Configuration_adv.h	254;"	d
TOOLCHANGE_UNPARK_ZLIFT	Configuration_adv.h	255;"	d
TOWER_1	Marlin_main.cpp	405;"	d	file:
TOWER_2	Marlin_main.cpp	406;"	d	file:
TOWER_3	Marlin_main.cpp	407;"	d	file:
TRFirstHeating	temperature.cpp	/^  enum TRState { TRReset, TRInactive, TRFirstHeating, TRStable, TRRunaway };$/;"	e	enum:TRState	file:
TRIM_DURATION	servo.cpp	80;"	d	file:
TRInactive	temperature.cpp	/^  enum TRState { TRReset, TRInactive, TRFirstHeating, TRStable, TRRunaway };$/;"	e	enum:TRState	file:
TRReset	temperature.cpp	/^  enum TRState { TRReset, TRInactive, TRFirstHeating, TRStable, TRRunaway };$/;"	e	enum:TRState	file:
TRRunaway	temperature.cpp	/^  enum TRState { TRReset, TRInactive, TRFirstHeating, TRStable, TRRunaway };$/;"	e	enum:TRState	file:
TRStable	temperature.cpp	/^  enum TRState { TRReset, TRInactive, TRFirstHeating, TRStable, TRRunaway };$/;"	e	enum:TRState	file:
TRState	temperature.cpp	/^  enum TRState { TRReset, TRInactive, TRFirstHeating, TRStable, TRRunaway };$/;"	g	file:
TT_NAME	thermistortables.h	1284;"	d
TWIBUS_H	twibus.h	24;"	d
TWIBus	twibus.cpp	/^TWIBus::TWIBus() {$/;"	f	class:TWIBus
TWIBus	twibus.h	/^class TWIBus {$/;"	c
TXD	fastio.h	119;"	d
TXD	fastio.h	3350;"	d
TXD	fastio.h	454;"	d
TXD	fastio.h	957;"	d
TXD0	fastio.h	456;"	d
TXD1	fastio.h	459;"	d
T_ACCESS	SdBaseFile.h	/^uint8_t const T_ACCESS = 1;$/;"	v
T_CREATE	SdBaseFile.h	/^uint8_t const T_CREATE = 2;$/;"	v
T_WRITE	SdBaseFile.h	/^uint8_t const T_WRITE = 4;$/;"	v
TempState	temperature.cpp	/^enum TempState {$/;"	g	file:
Timer1Service	servo.cpp	/^    void Timer1Service() { handle_interrupts(_timer1, &TCNT1, &OCR1A); }$/;"	f
Timer3Service	servo.cpp	/^    void Timer3Service() { handle_interrupts(_timer3, &TCNT3, &OCR3A); }$/;"	f
U8GLIB_LM6059_AF	Conditionals.h	67;"	d
U8GLIB_ST7920	Conditionals.h	103;"	d
UART_PRESENT	MarlinSerial.h	45;"	d
ULTIMAKERCONTROLLER	Conditionals.h	59;"	d
ULTIMAKERCONTROLLER	Conditionals.h	82;"	d
ULTIPANEL	Conditionals.h	108;"	d
ULTIPANEL	Conditionals.h	113;"	d
ULTIPANEL	Conditionals.h	120;"	d
ULTIPANEL	Conditionals.h	126;"	d
ULTIPANEL	Conditionals.h	140;"	d
ULTIPANEL	Conditionals.h	163;"	d
ULTIPANEL	Conditionals.h	176;"	d
ULTIPANEL	Conditionals.h	187;"	d
ULTIPANEL	Conditionals.h	52;"	d
ULTIPANEL_FEEDMULTIPLY	Configuration_adv.h	302;"	d
ULTRALCD_H	ultralcd.h	24;"	d
ULTRALCD_IMPLEMENTATION_HITACHI_HD44780_H	ultralcd_implementation_hitachi_HD44780.h	27;"	d
ULTRA_LCD	Conditionals.h	202;"	d
ULTRA_LCD	Conditionals.h	57;"	d
ULTRA_LCD	Conditionals.h	77;"	d
UNUSED	Marlin.h	29;"	d
UPDATE_ENDSTOP	stepper.cpp	380;"	d	file:
USE_CXA_PURE_VIRTUAL	SdFatConfig.h	119;"	d
USE_MULTIPLE_CARDS	SdFatConfig.h	47;"	d
USE_SOFTWARE_SPI	SdFatConfig.h	104;"	d
USE_WATCHDOG	Configuration_adv.h	408;"	d
USE_XMAX_PLUG	Conditionals.h	570;"	d
USE_XMIN_PLUG	Configuration.h	296;"	d
USE_YMIN_PLUG	Configuration.h	297;"	d
USE_ZMIN_PLUG	Configuration.h	298;"	d
VECTOR_3_H	vector_3.h	42;"	d
WATCHDOG_H	watchdog.h	24;"	d
WATCH_TEMP_INCREASE	Configuration_adv.h	79;"	d
WATCH_TEMP_PERIOD	Configuration_adv.h	78;"	d
WEBSITE_URL	language.h	92;"	d
WEBSITE_URL	language.h	93;"	d
WRITE	fastio.h	89;"	d
WRITE_FAN	Conditionals.h	721;"	d
WRITE_FAN0	Conditionals.h	722;"	d
WRITE_FAN1	Conditionals.h	725;"	d
WRITE_FAN2	Conditionals.h	728;"	d
WRITE_FAN_N	Conditionals.h	730;"	d
WRITE_HEATER_0	Conditionals.h	699;"	d
WRITE_HEATER_0	Conditionals.h	701;"	d
WRITE_HEATER_0P	Conditionals.h	688;"	d
WRITE_HEATER_1	Conditionals.h	690;"	d
WRITE_HEATER_2	Conditionals.h	692;"	d
WRITE_HEATER_3	Conditionals.h	694;"	d
WRITE_HEATER_BED	Conditionals.h	704;"	d
WRITE_MULTIPLE_TOKEN	SdInfo.h	/^uint8_t const WRITE_MULTIPLE_TOKEN = 0XFC;$/;"	v
X2_DIR_INIT	stepper_indirection.h	372;"	d
X2_DIR_INIT	stepper_indirection.h	373;"	d
X2_DIR_INIT	stepper_indirection.h	67;"	d
X2_DIR_PIN	Configuration_adv.h	239;"	d
X2_DIR_READ	stepper_indirection.h	378;"	d
X2_DIR_READ	stepper_indirection.h	379;"	d
X2_DIR_READ	stepper_indirection.h	69;"	d
X2_DIR_WRITE	stepper_indirection.h	375;"	d
X2_DIR_WRITE	stepper_indirection.h	376;"	d
X2_DIR_WRITE	stepper_indirection.h	68;"	d
X2_ENABLE_INIT	stepper_indirection.h	230;"	d
X2_ENABLE_INIT	stepper_indirection.h	231;"	d
X2_ENABLE_INIT	stepper_indirection.h	363;"	d
X2_ENABLE_INIT	stepper_indirection.h	364;"	d
X2_ENABLE_INIT	stepper_indirection.h	71;"	d
X2_ENABLE_PIN	Configuration_adv.h	237;"	d
X2_ENABLE_READ	stepper_indirection.h	236;"	d
X2_ENABLE_READ	stepper_indirection.h	237;"	d
X2_ENABLE_READ	stepper_indirection.h	369;"	d
X2_ENABLE_READ	stepper_indirection.h	370;"	d
X2_ENABLE_READ	stepper_indirection.h	73;"	d
X2_ENABLE_WRITE	stepper_indirection.h	233;"	d
X2_ENABLE_WRITE	stepper_indirection.h	234;"	d
X2_ENABLE_WRITE	stepper_indirection.h	366;"	d
X2_ENABLE_WRITE	stepper_indirection.h	367;"	d
X2_ENABLE_WRITE	stepper_indirection.h	72;"	d
X2_HOME_DIR	Configuration_adv.h	229;"	d
X2_HOME_POS	Configuration_adv.h	230;"	d
X2_K_VAL	Configuration_adv.h	603;"	d
X2_MAX_CURRENT	Configuration_adv.h	539;"	d
X2_MAX_POS	Configuration_adv.h	228;"	d
X2_MICROSTEPS	Configuration_adv.h	541;"	d
X2_MICROSTEPS	Configuration_adv.h	602;"	d
X2_MIN_POS	Configuration_adv.h	227;"	d
X2_OVERCURRENT	Configuration_adv.h	604;"	d
X2_SENSE_RESISTOR	Configuration_adv.h	540;"	d
X2_STALLCURRENT	Configuration_adv.h	605;"	d
X2_STEP_INIT	stepper_indirection.h	63;"	d
X2_STEP_PIN	Configuration_adv.h	238;"	d
X2_STEP_READ	stepper_indirection.h	65;"	d
X2_STEP_WRITE	stepper_indirection.h	64;"	d
XYZ_CONSTS_FROM_CONFIG	Marlin_main.cpp	1237;"	d	file:
XY_TRAVEL_SPEED	Conditionals.h	387;"	d
XY_TRAVEL_SPEED	Configuration.h	540;"	d
X_APPLY_DIR	stepper.cpp	141;"	d	file:
X_APPLY_DIR	stepper.cpp	158;"	d	file:
X_APPLY_STEP	stepper.cpp	149;"	d	file:
X_APPLY_STEP	stepper.cpp	159;"	d	file:
X_AXIS	Marlin.h	/^enum AxisEnum {X_AXIS = 0, A_AXIS = 0, Y_AXIS = 1, B_AXIS = 1, Z_AXIS = 2, C_AXIS = 2, E_AXIS = 3, X_HEAD = 4, Y_HEAD = 5, Z_HEAD = 5};$/;"	e	enum:AxisEnum
X_DIR_INIT	stepper_indirection.h	351;"	d
X_DIR_INIT	stepper_indirection.h	352;"	d
X_DIR_INIT	stepper_indirection.h	54;"	d
X_DIR_PIN	pins_RAMPS_14.h	63;"	d
X_DIR_READ	stepper_indirection.h	357;"	d
X_DIR_READ	stepper_indirection.h	358;"	d
X_DIR_READ	stepper_indirection.h	56;"	d
X_DIR_WRITE	stepper_indirection.h	354;"	d
X_DIR_WRITE	stepper_indirection.h	355;"	d
X_DIR_WRITE	stepper_indirection.h	55;"	d
X_ENABLE_INIT	stepper_indirection.h	218;"	d
X_ENABLE_INIT	stepper_indirection.h	219;"	d
X_ENABLE_INIT	stepper_indirection.h	342;"	d
X_ENABLE_INIT	stepper_indirection.h	343;"	d
X_ENABLE_INIT	stepper_indirection.h	58;"	d
X_ENABLE_ON	Configuration.h	376;"	d
X_ENABLE_PIN	pins_RAMPS_14.h	64;"	d
X_ENABLE_READ	stepper_indirection.h	224;"	d
X_ENABLE_READ	stepper_indirection.h	225;"	d
X_ENABLE_READ	stepper_indirection.h	348;"	d
X_ENABLE_READ	stepper_indirection.h	349;"	d
X_ENABLE_READ	stepper_indirection.h	60;"	d
X_ENABLE_WRITE	stepper_indirection.h	221;"	d
X_ENABLE_WRITE	stepper_indirection.h	222;"	d
X_ENABLE_WRITE	stepper_indirection.h	345;"	d
X_ENABLE_WRITE	stepper_indirection.h	346;"	d
X_ENABLE_WRITE	stepper_indirection.h	59;"	d
X_ENDSTOP_SERVO_NR	Conditionals.h	736;"	d
X_HEAD	Marlin.h	/^enum AxisEnum {X_AXIS = 0, A_AXIS = 0, Y_AXIS = 1, B_AXIS = 1, Z_AXIS = 2, C_AXIS = 2, E_AXIS = 3, X_HEAD = 4, Y_HEAD = 5, Z_HEAD = 5};$/;"	e	enum:AxisEnum
X_HOME_BUMP_MM	Configuration_adv.h	265;"	d
X_HOME_DIR	Configuration.h	428;"	d
X_HOME_POS	Conditionals.h	338;"	d
X_HOME_POS	Conditionals.h	343;"	d
X_HOME_POS	Conditionals.h	346;"	d
X_K_VAL	Configuration_adv.h	597;"	d
X_MAX	Marlin.h	/^enum EndstopEnum {X_MIN = 0, Y_MIN = 1, Z_MIN = 2, Z_MIN_PROBE = 3, X_MAX = 4, Y_MAX = 5, Z_MAX = 6, Z2_MIN = 7, Z2_MAX = 8};$/;"	e	enum:EndstopEnum
X_MAX_CURRENT	Configuration_adv.h	534;"	d
X_MAX_ENDSTOP_INVERTING	Configuration.h	/^const bool X_MAX_ENDSTOP_INVERTING = true; \/\/ set to true to invert the logic of the endstop.$/;"	v
X_MAX_LENGTH	Conditionals.h	311;"	d
X_MAX_PIN	pins.h	113;"	d
X_MAX_PIN	pins.h	114;"	d
X_MAX_PIN	pins.h	80;"	d
X_MAX_PIN	pins.h	83;"	d
X_MAX_PIN	pins_RAMPS_14.h	67;"	d
X_MAX_POS	Configuration.h	441;"	d
X_MICROSTEPS	Configuration_adv.h	536;"	d
X_MICROSTEPS	Configuration_adv.h	596;"	d
X_MIN	Marlin.h	/^enum EndstopEnum {X_MIN = 0, Y_MIN = 1, Z_MIN = 2, Z_MIN_PROBE = 3, X_MAX = 4, Y_MAX = 5, Z_MAX = 6, Z2_MIN = 7, Z2_MAX = 8};$/;"	e	enum:EndstopEnum
X_MIN_ENDSTOP_INVERTING	Configuration.h	/^const bool X_MIN_ENDSTOP_INVERTING = false; \/\/ set to true to invert the logic of the endstop.$/;"	v
X_MIN_PIN	pins.h	128;"	d
X_MIN_PIN	pins.h	129;"	d
X_MIN_PIN	pins.h	79;"	d
X_MIN_PIN	pins.h	82;"	d
X_MIN_PIN	pins_RAMPS_14.h	65;"	d
X_MIN_POS	Configuration.h	438;"	d
X_MS1_PIN	pins.h	27;"	d
X_MS2_PIN	pins.h	28;"	d
X_OVERCURRENT	Configuration_adv.h	598;"	d
X_PROBE_OFFSET_FROM_EXTRUDER	Conditionals.h	378;"	d
X_PROBE_OFFSET_FROM_EXTRUDER	Configuration.h	536;"	d
X_SENSE_RESISTOR	Configuration_adv.h	535;"	d
X_STALLCURRENT	Configuration_adv.h	599;"	d
X_STEP_INIT	stepper_indirection.h	50;"	d
X_STEP_PIN	pins_RAMPS_14.h	62;"	d
X_STEP_READ	stepper_indirection.h	52;"	d
X_STEP_WRITE	stepper_indirection.h	51;"	d
Y2_DIR_INIT	stepper_indirection.h	412;"	d
Y2_DIR_INIT	stepper_indirection.h	413;"	d
Y2_DIR_INIT	stepper_indirection.h	93;"	d
Y2_DIR_PIN	pins.h	153;"	d
Y2_DIR_READ	stepper_indirection.h	418;"	d
Y2_DIR_READ	stepper_indirection.h	419;"	d
Y2_DIR_READ	stepper_indirection.h	458;"	d
Y2_DIR_READ	stepper_indirection.h	459;"	d
Y2_DIR_READ	stepper_indirection.h	95;"	d
Y2_DIR_WRITE	stepper_indirection.h	415;"	d
Y2_DIR_WRITE	stepper_indirection.h	416;"	d
Y2_DIR_WRITE	stepper_indirection.h	94;"	d
Y2_ENABLE_INIT	stepper_indirection.h	252;"	d
Y2_ENABLE_INIT	stepper_indirection.h	253;"	d
Y2_ENABLE_INIT	stepper_indirection.h	403;"	d
Y2_ENABLE_INIT	stepper_indirection.h	404;"	d
Y2_ENABLE_INIT	stepper_indirection.h	97;"	d
Y2_ENABLE_PIN	pins.h	154;"	d
Y2_ENABLE_READ	stepper_indirection.h	258;"	d
Y2_ENABLE_READ	stepper_indirection.h	259;"	d
Y2_ENABLE_READ	stepper_indirection.h	409;"	d
Y2_ENABLE_READ	stepper_indirection.h	410;"	d
Y2_ENABLE_READ	stepper_indirection.h	99;"	d
Y2_ENABLE_WRITE	stepper_indirection.h	255;"	d
Y2_ENABLE_WRITE	stepper_indirection.h	256;"	d
Y2_ENABLE_WRITE	stepper_indirection.h	406;"	d
Y2_ENABLE_WRITE	stepper_indirection.h	407;"	d
Y2_ENABLE_WRITE	stepper_indirection.h	98;"	d
Y2_K_VAL	Configuration_adv.h	615;"	d
Y2_MAX_CURRENT	Configuration_adv.h	549;"	d
Y2_MICROSTEPS	Configuration_adv.h	551;"	d
Y2_MICROSTEPS	Configuration_adv.h	614;"	d
Y2_OVERCURRENT	Configuration_adv.h	616;"	d
Y2_SENSE_RESISTOR	Configuration_adv.h	550;"	d
Y2_STALLCURRENT	Configuration_adv.h	617;"	d
Y2_STEP_INIT	stepper_indirection.h	89;"	d
Y2_STEP_PIN	pins.h	152;"	d
Y2_STEP_READ	stepper_indirection.h	91;"	d
Y2_STEP_WRITE	stepper_indirection.h	90;"	d
Y_APPLY_DIR	stepper.cpp	163;"	d	file:
Y_APPLY_DIR	stepper.cpp	166;"	d	file:
Y_APPLY_STEP	stepper.cpp	164;"	d	file:
Y_APPLY_STEP	stepper.cpp	167;"	d	file:
Y_AXIS	Marlin.h	/^enum AxisEnum {X_AXIS = 0, A_AXIS = 0, Y_AXIS = 1, B_AXIS = 1, Z_AXIS = 2, C_AXIS = 2, E_AXIS = 3, X_HEAD = 4, Y_HEAD = 5, Z_HEAD = 5};$/;"	e	enum:AxisEnum
Y_DIR_INIT	stepper_indirection.h	392;"	d
Y_DIR_INIT	stepper_indirection.h	393;"	d
Y_DIR_INIT	stepper_indirection.h	80;"	d
Y_DIR_PIN	pins_RAMPS_14.h	71;"	d
Y_DIR_READ	stepper_indirection.h	398;"	d
Y_DIR_READ	stepper_indirection.h	399;"	d
Y_DIR_READ	stepper_indirection.h	438;"	d
Y_DIR_READ	stepper_indirection.h	439;"	d
Y_DIR_READ	stepper_indirection.h	82;"	d
Y_DIR_WRITE	stepper_indirection.h	395;"	d
Y_DIR_WRITE	stepper_indirection.h	396;"	d
Y_DIR_WRITE	stepper_indirection.h	81;"	d
Y_ENABLE_INIT	stepper_indirection.h	241;"	d
Y_ENABLE_INIT	stepper_indirection.h	242;"	d
Y_ENABLE_INIT	stepper_indirection.h	383;"	d
Y_ENABLE_INIT	stepper_indirection.h	384;"	d
Y_ENABLE_INIT	stepper_indirection.h	84;"	d
Y_ENABLE_ON	Configuration.h	377;"	d
Y_ENABLE_PIN	pins_RAMPS_14.h	72;"	d
Y_ENABLE_READ	stepper_indirection.h	247;"	d
Y_ENABLE_READ	stepper_indirection.h	248;"	d
Y_ENABLE_READ	stepper_indirection.h	389;"	d
Y_ENABLE_READ	stepper_indirection.h	390;"	d
Y_ENABLE_READ	stepper_indirection.h	86;"	d
Y_ENABLE_WRITE	stepper_indirection.h	244;"	d
Y_ENABLE_WRITE	stepper_indirection.h	245;"	d
Y_ENABLE_WRITE	stepper_indirection.h	386;"	d
Y_ENABLE_WRITE	stepper_indirection.h	387;"	d
Y_ENABLE_WRITE	stepper_indirection.h	85;"	d
Y_ENDSTOP_SERVO_NR	Conditionals.h	739;"	d
Y_HEAD	Marlin.h	/^enum AxisEnum {X_AXIS = 0, A_AXIS = 0, Y_AXIS = 1, B_AXIS = 1, Z_AXIS = 2, C_AXIS = 2, E_AXIS = 3, X_HEAD = 4, Y_HEAD = 5, Z_HEAD = 5};$/;"	e	enum:AxisEnum
Y_HOME_BUMP_MM	Configuration_adv.h	266;"	d
Y_HOME_DIR	Configuration.h	429;"	d
Y_HOME_POS	Conditionals.h	339;"	d
Y_HOME_POS	Conditionals.h	344;"	d
Y_HOME_POS	Conditionals.h	347;"	d
Y_K_VAL	Configuration_adv.h	609;"	d
Y_MAX	Marlin.h	/^enum EndstopEnum {X_MIN = 0, Y_MIN = 1, Z_MIN = 2, Z_MIN_PROBE = 3, X_MAX = 4, Y_MAX = 5, Z_MAX = 6, Z2_MIN = 7, Z2_MAX = 8};$/;"	e	enum:EndstopEnum
Y_MAX_CURRENT	Configuration_adv.h	544;"	d
Y_MAX_ENDSTOP_INVERTING	Configuration.h	/^const bool Y_MAX_ENDSTOP_INVERTING = true; \/\/ set to true to invert the logic of the endstop.$/;"	v
Y_MAX_LENGTH	Conditionals.h	312;"	d
Y_MAX_PIN	pins.h	118;"	d
Y_MAX_PIN	pins.h	119;"	d
Y_MAX_PIN	pins.h	90;"	d
Y_MAX_PIN	pins.h	93;"	d
Y_MAX_PIN	pins_RAMPS_14.h	74;"	d
Y_MAX_POS	Configuration.h	442;"	d
Y_MICROSTEPS	Configuration_adv.h	546;"	d
Y_MICROSTEPS	Configuration_adv.h	608;"	d
Y_MIN	Marlin.h	/^enum EndstopEnum {X_MIN = 0, Y_MIN = 1, Z_MIN = 2, Z_MIN_PROBE = 3, X_MAX = 4, Y_MAX = 5, Z_MAX = 6, Z2_MIN = 7, Z2_MAX = 8};$/;"	e	enum:EndstopEnum
Y_MIN_ENDSTOP_INVERTING	Configuration.h	/^const bool Y_MIN_ENDSTOP_INVERTING = false; \/\/ set to true to invert the logic of the endstop.$/;"	v
Y_MIN_PIN	pins.h	133;"	d
Y_MIN_PIN	pins.h	134;"	d
Y_MIN_PIN	pins.h	89;"	d
Y_MIN_PIN	pins.h	92;"	d
Y_MIN_PIN	pins_RAMPS_14.h	73;"	d
Y_MIN_POS	Configuration.h	439;"	d
Y_MS1_PIN	pins.h	29;"	d
Y_MS2_PIN	pins.h	30;"	d
Y_OVERCURRENT	Configuration_adv.h	610;"	d
Y_PROBE_OFFSET_FROM_EXTRUDER	Conditionals.h	381;"	d
Y_PROBE_OFFSET_FROM_EXTRUDER	Configuration.h	537;"	d
Y_SENSE_RESISTOR	Configuration_adv.h	545;"	d
Y_STALLCURRENT	Configuration_adv.h	611;"	d
Y_STEP_INIT	stepper_indirection.h	76;"	d
Y_STEP_PIN	pins_RAMPS_14.h	70;"	d
Y_STEP_READ	stepper_indirection.h	78;"	d
Y_STEP_WRITE	stepper_indirection.h	77;"	d
Z2_DIR_INIT	stepper_indirection.h	119;"	d
Z2_DIR_INIT	stepper_indirection.h	452;"	d
Z2_DIR_INIT	stepper_indirection.h	453;"	d
Z2_DIR_PIN	pins.h	160;"	d
Z2_DIR_READ	stepper_indirection.h	121;"	d
Z2_DIR_WRITE	stepper_indirection.h	120;"	d
Z2_DIR_WRITE	stepper_indirection.h	455;"	d
Z2_DIR_WRITE	stepper_indirection.h	456;"	d
Z2_ENABLE_INIT	stepper_indirection.h	123;"	d
Z2_ENABLE_INIT	stepper_indirection.h	274;"	d
Z2_ENABLE_INIT	stepper_indirection.h	275;"	d
Z2_ENABLE_INIT	stepper_indirection.h	443;"	d
Z2_ENABLE_INIT	stepper_indirection.h	444;"	d
Z2_ENABLE_PIN	pins.h	161;"	d
Z2_ENABLE_READ	stepper_indirection.h	125;"	d
Z2_ENABLE_READ	stepper_indirection.h	280;"	d
Z2_ENABLE_READ	stepper_indirection.h	281;"	d
Z2_ENABLE_READ	stepper_indirection.h	449;"	d
Z2_ENABLE_READ	stepper_indirection.h	450;"	d
Z2_ENABLE_WRITE	stepper_indirection.h	124;"	d
Z2_ENABLE_WRITE	stepper_indirection.h	277;"	d
Z2_ENABLE_WRITE	stepper_indirection.h	278;"	d
Z2_ENABLE_WRITE	stepper_indirection.h	446;"	d
Z2_ENABLE_WRITE	stepper_indirection.h	447;"	d
Z2_K_VAL	Configuration_adv.h	627;"	d
Z2_MAX	Marlin.h	/^enum EndstopEnum {X_MIN = 0, Y_MIN = 1, Z_MIN = 2, Z_MIN_PROBE = 3, X_MAX = 4, Y_MAX = 5, Z_MAX = 6, Z2_MIN = 7, Z2_MAX = 8};$/;"	e	enum:EndstopEnum
Z2_MAX_CURRENT	Configuration_adv.h	559;"	d
Z2_MAX_ENDSTOP_INVERTING	Conditionals.h	/^    const bool Z2_MAX_ENDSTOP_INVERTING =$/;"	v
Z2_MAX_PIN	Conditionals.h	569;"	d
Z2_MICROSTEPS	Configuration_adv.h	561;"	d
Z2_MICROSTEPS	Configuration_adv.h	626;"	d
Z2_MIN	Marlin.h	/^enum EndstopEnum {X_MIN = 0, Y_MIN = 1, Z_MIN = 2, Z_MIN_PROBE = 3, X_MAX = 4, Y_MAX = 5, Z_MAX = 6, Z2_MIN = 7, Z2_MAX = 8};$/;"	e	enum:EndstopEnum
Z2_OVERCURRENT	Configuration_adv.h	628;"	d
Z2_SENSE_RESISTOR	Configuration_adv.h	560;"	d
Z2_STALLCURRENT	Configuration_adv.h	629;"	d
Z2_STEP_INIT	stepper_indirection.h	115;"	d
Z2_STEP_PIN	pins.h	159;"	d
Z2_STEP_READ	stepper_indirection.h	117;"	d
Z2_STEP_WRITE	stepper_indirection.h	116;"	d
Z2_USE_ENDSTOP	Configuration_adv.h	205;"	d
Z_APPLY_DIR	stepper.cpp	171;"	d	file:
Z_APPLY_DIR	stepper.cpp	192;"	d	file:
Z_APPLY_STEP	stepper.cpp	173;"	d	file:
Z_APPLY_STEP	stepper.cpp	189;"	d	file:
Z_APPLY_STEP	stepper.cpp	193;"	d	file:
Z_AXIS	Marlin.h	/^enum AxisEnum {X_AXIS = 0, A_AXIS = 0, Y_AXIS = 1, B_AXIS = 1, Z_AXIS = 2, C_AXIS = 2, E_AXIS = 3, X_HEAD = 4, Y_HEAD = 5, Z_HEAD = 5};$/;"	e	enum:AxisEnum
Z_DIR_INIT	stepper_indirection.h	106;"	d
Z_DIR_INIT	stepper_indirection.h	432;"	d
Z_DIR_INIT	stepper_indirection.h	433;"	d
Z_DIR_PIN	pins_RAMPS_14.h	77;"	d
Z_DIR_READ	stepper_indirection.h	108;"	d
Z_DIR_WRITE	stepper_indirection.h	107;"	d
Z_DIR_WRITE	stepper_indirection.h	435;"	d
Z_DIR_WRITE	stepper_indirection.h	436;"	d
Z_ENABLE_INIT	stepper_indirection.h	110;"	d
Z_ENABLE_INIT	stepper_indirection.h	263;"	d
Z_ENABLE_INIT	stepper_indirection.h	264;"	d
Z_ENABLE_INIT	stepper_indirection.h	423;"	d
Z_ENABLE_INIT	stepper_indirection.h	424;"	d
Z_ENABLE_ON	Configuration.h	378;"	d
Z_ENABLE_PIN	pins_RAMPS_14.h	78;"	d
Z_ENABLE_READ	stepper_indirection.h	112;"	d
Z_ENABLE_READ	stepper_indirection.h	269;"	d
Z_ENABLE_READ	stepper_indirection.h	270;"	d
Z_ENABLE_READ	stepper_indirection.h	429;"	d
Z_ENABLE_READ	stepper_indirection.h	430;"	d
Z_ENABLE_WRITE	stepper_indirection.h	111;"	d
Z_ENABLE_WRITE	stepper_indirection.h	266;"	d
Z_ENABLE_WRITE	stepper_indirection.h	267;"	d
Z_ENABLE_WRITE	stepper_indirection.h	426;"	d
Z_ENABLE_WRITE	stepper_indirection.h	427;"	d
Z_ENDSTOP_SERVO_NR	Conditionals.h	742;"	d
Z_ENDSTOP_SERVO_NR	Configuration.h	1040;"	d
Z_HEAD	Marlin.h	/^enum AxisEnum {X_AXIS = 0, A_AXIS = 0, Y_AXIS = 1, B_AXIS = 1, Z_AXIS = 2, C_AXIS = 2, E_AXIS = 3, X_HEAD = 4, Y_HEAD = 5, Z_HEAD = 5};$/;"	e	enum:AxisEnum
Z_HOME_BUMP_MM	Configuration_adv.h	267;"	d
Z_HOME_DIR	Configuration.h	430;"	d
Z_HOME_POS	Conditionals.h	340;"	d
Z_HOME_POS	Conditionals.h	349;"	d
Z_K_VAL	Configuration_adv.h	621;"	d
Z_MAX	Marlin.h	/^enum EndstopEnum {X_MIN = 0, Y_MIN = 1, Z_MIN = 2, Z_MIN_PROBE = 3, X_MAX = 4, Y_MAX = 5, Z_MAX = 6, Z2_MIN = 7, Z2_MAX = 8};$/;"	e	enum:EndstopEnum
Z_MAX_CURRENT	Configuration_adv.h	554;"	d
Z_MAX_ENDSTOP_INVERTING	Configuration.h	/^const bool Z_MAX_ENDSTOP_INVERTING = true; \/\/ set to true to invert the logic of the endstop.$/;"	v
Z_MAX_LENGTH	Conditionals.h	313;"	d
Z_MAX_PIN	pins.h	100;"	d
Z_MAX_PIN	pins.h	103;"	d
Z_MAX_PIN	pins.h	123;"	d
Z_MAX_PIN	pins.h	124;"	d
Z_MAX_PIN	pins_RAMPS_14.h	80;"	d
Z_MAX_POS	Configuration.h	445;"	d
Z_MAX_POS	Configuration.h	447;"	d
Z_MICROSTEPS	Configuration_adv.h	556;"	d
Z_MICROSTEPS	Configuration_adv.h	620;"	d
Z_MIN	Marlin.h	/^enum EndstopEnum {X_MIN = 0, Y_MIN = 1, Z_MIN = 2, Z_MIN_PROBE = 3, X_MAX = 4, Y_MAX = 5, Z_MAX = 6, Z2_MIN = 7, Z2_MAX = 8};$/;"	e	enum:EndstopEnum
Z_MIN_ENDSTOP_INVERTING	Configuration.h	/^const bool Z_MIN_ENDSTOP_INVERTING = true; \/\/ set to true to invert the logic of the endstop.$/;"	v
Z_MIN_PIN	pins.h	102;"	d
Z_MIN_PIN	pins.h	138;"	d
Z_MIN_PIN	pins.h	139;"	d
Z_MIN_PIN	pins.h	99;"	d
Z_MIN_PIN	pins_RAMPS_14.h	79;"	d
Z_MIN_POS	Configuration.h	440;"	d
Z_MIN_PROBE	Marlin.h	/^enum EndstopEnum {X_MIN = 0, Y_MIN = 1, Z_MIN = 2, Z_MIN_PROBE = 3, X_MAX = 4, Y_MAX = 5, Z_MAX = 6, Z2_MIN = 7, Z2_MAX = 8};$/;"	e	enum:EndstopEnum
Z_MIN_PROBE_ENDSTOP_INVERTING	Configuration.h	/^const bool Z_MIN_PROBE_ENDSTOP_INVERTING = true; \/\/ set to true to invert the logic of the endstop.$/;"	v
Z_MIN_PROBE_PIN	pins.h	108;"	d
Z_MIN_PROBE_PIN	pins.h	109;"	d
Z_MIN_PROBE_PIN	pins_RAMPS_14.h	99;"	d
Z_MIN_PROBE_USES_Z_MIN_ENDSTOP_PIN	Configuration.h	364;"	d
Z_MS1_PIN	pins.h	31;"	d
Z_MS2_PIN	pins.h	32;"	d
Z_OVERCURRENT	Configuration_adv.h	622;"	d
Z_PROBE_END_SCRIPT	Configuration.h	546;"	d
Z_PROBE_OFFSET_FROM_EXTRUDER	Conditionals.h	384;"	d
Z_PROBE_OFFSET_FROM_EXTRUDER	Configuration.h	538;"	d
Z_PROBE_OFFSET_RANGE_MAX	Configuration.h	668;"	d
Z_PROBE_OFFSET_RANGE_MIN	Configuration.h	667;"	d
Z_RAISE_AFTER_PROBING	Configuration.h	544;"	d
Z_RAISE_BEFORE_PROBING	Configuration.h	542;"	d
Z_RAISE_BETWEEN_PROBINGS	Configuration.h	543;"	d
Z_SAFE_HOMING	Conditionals.h	370;"	d
Z_SAFE_HOMING	Configuration.h	598;"	d
Z_SAFE_HOMING_X_POINT	Configuration.h	601;"	d
Z_SAFE_HOMING_Y_POINT	Configuration.h	602;"	d
Z_SENSE_RESISTOR	Configuration_adv.h	555;"	d
Z_STALLCURRENT	Configuration_adv.h	623;"	d
Z_STEP_INIT	stepper_indirection.h	102;"	d
Z_STEP_PIN	pins_RAMPS_14.h	76;"	d
Z_STEP_READ	stepper_indirection.h	104;"	d
Z_STEP_WRITE	stepper_indirection.h	103;"	d
_APPLY_DIR	stepper.cpp	1200;"	d	file:
_APPLY_STEP	stepper.cpp	726;"	d	file:
_AXIS	stepper.cpp	352;"	d	file:
_CAT	macros.h	45;"	d
_COUNTER	stepper.cpp	725;"	d	file:
_DISABLE	stepper.cpp	1020;"	d	file:
_E0_PINS	pins.h	56;"	d
_E1_PINS	pins.h	57;"	d
_E1_PINS	pins.h	62;"	d
_E1_PINS	pins.h	63;"	d
_E1_PINS	pins.h	73;"	d
_E1_PINS	pins.h	74;"	d
_E2_PINS	pins.h	58;"	d
_E2_PINS	pins.h	65;"	d
_E2_PINS	pins.h	66;"	d
_E3_PINS	pins.h	59;"	d
_E3_PINS	pins.h	68;"	d
_E3_PINS	pins.h	69;"	d
_EEPROM_readData	configuration_store.cpp	/^void _EEPROM_readData(int &pos, uint8_t* value, uint8_t size) {$/;"	f
_EEPROM_writeData	configuration_store.cpp	/^void _EEPROM_writeData(int &pos, uint8_t* value, uint8_t size) {$/;"	f
_ENABLE	stepper.cpp	1197;"	d	file:
_ENDSTOP	stepper.cpp	354;"	d	file:
_ENDSTOP_HIT	stepper.cpp	353;"	d	file:
_ENDSTOP_HIT_ECHO	stepper.cpp	301;"	d	file:
_ENDSTOP_HIT_TEST	stepper.cpp	305;"	d	file:
_ENDSTOP_INVERTING	stepper.cpp	351;"	d	file:
_ENDSTOP_PIN	stepper.cpp	350;"	d	file:
_EPIN	pins.h	148;"	d
_E_STEP_WRITE	stepper_indirection.h	188;"	d
_FASTIO_ARDUINO_H	fastio.h	29;"	d
_GET_INPUT	fastio.h	77;"	d
_GET_OUTPUT	fastio.h	79;"	d
_GET_TIMER	fastio.h	82;"	d
_INVERT_DIR	stepper.cpp	1199;"	d	file:
_INVERT_STEP_PIN	stepper.cpp	727;"	d	file:
_KEYPAD_MOVE_ALLOWED	ultralcd.cpp	2685;"	d	file:
_MENU_ITEM_PART_1	ultralcd.cpp	214;"	d	file:
_MENU_ITEM_PART_2	ultralcd.cpp	223;"	d	file:
_MOVE_XYZ_ALLOWED	ultralcd.cpp	1456;"	d	file:
_MOVE_XYZ_ALLOWED	ultralcd.cpp	1458;"	d	file:
_NORM_E_DIR	stepper_indirection.h	189;"	d
_Nbr_16timers	servo.h	/^  _Nbr_16timers$/;"	e	enum:__anon2
_PIDTEMP_BASE_FUNCTIONS	ultralcd.cpp	1906;"	d	file:
_PIDTEMP_FUNCTIONS	ultralcd.cpp	1911;"	d	file:
_PIDTEMP_FUNCTIONS	ultralcd.cpp	1915;"	d	file:
_PID_BASE_MENU_ITEMS	ultralcd.cpp	2027;"	d	file:
_PID_MENU_ITEMS	ultralcd.cpp	2035;"	d	file:
_READ	fastio.h	47;"	d
_READ_DIR	stepper.cpp	1198;"	d	file:
_REV_E_DIR	stepper_indirection.h	190;"	d
_SET_BED_PID	temperature.cpp	438;"	d	file:
_SET_EXTRUDER_PID	temperature.cpp	444;"	d	file:
_SET_INPUT	fastio.h	72;"	d
_SET_OUTPUT	fastio.h	74;"	d
_SET_STOP_CHAR	stepper.cpp	296;"	d	file:
_SET_TRIGSTEPS	stepper.cpp	365;"	d	file:
_SPLASH_WAIT_1	ultralcd_implementation_hitachi_HD44780.h	679;"	d
_STEP_INIT	stepper.cpp	1018;"	d	file:
_TOGGLE	fastio.h	69;"	d
_TT_NAME	thermistortables.h	1283;"	d
_WRITE	fastio.h	66;"	d
_WRITE_C	fastio.h	53;"	d
_WRITE_NC	fastio.h	51;"	d
_WRITE_STEP	stepper.cpp	1019;"	d	file:
_XMAX_	Conditionals.h	563;"	d
_XMIN_	Conditionals.h	560;"	d
_YMAX_	Conditionals.h	564;"	d
_YMIN_	Conditionals.h	561;"	d
_ZMAX_	Conditionals.h	565;"	d
_ZMIN_	Conditionals.h	562;"	d
_Z_DEPLOY	Marlin_main.cpp	2223;"	d	file:
_Z_PROBE_SUBTEST	Marlin_main.cpp	2222;"	d	file:
_Z_SERVO_TEST	Marlin_main.cpp	2221;"	d	file:
_Z_STOW	Marlin_main.cpp	2224;"	d	file:
__Config_ResetDefault	ultralcd.cpp	/^static void __Config_ResetDefault() {$/;"	f	file:
__Config_StoreSettings	ultralcd.cpp	/^static void __Config_StoreSettings() {$/;"	f	file:
__EPIN	pins.h	147;"	d
___lcd_move_hotend	ultralcd.cpp	/^static void ___lcd_move_hotend() {$/;"	f	file:
__cxa_pure_virtual	ultralcd_implementation_hitachi_HD44780.h	/^  extern "C" void __cxa_pure_virtual() { while (1); }$/;"	f
__logo_lines	ultralcd_implementation_hitachi_HD44780.h	/^  void __logo_lines(const char *extra) {$/;"	f
_commit_command	Marlin_main.cpp	/^inline void _commit_command(bool say_ok) {$/;"	f
_draw_axis_label	ultralcd_implementation_hitachi_HD44780.h	/^FORCE_INLINE void _draw_axis_label(AxisEnum axis, const char *pstr, bool blink) {$/;"	f
_enqueuecommand	Marlin_main.cpp	/^inline bool _enqueuecommand(const char* cmd, bool say_ok = false) {$/;"	f
_lcd_autotune	ultralcd.cpp	/^static void _lcd_autotune(int e) {$/;"	f	file:
_lcd_babystep	ultralcd.cpp	/^static void _lcd_babystep(const int axis, const char* msg) {$/;"	f	file:
_lcd_babystep_x	ultralcd.cpp	/^static void _lcd_babystep_x() {$/;"	f	file:
_lcd_babystep_y	ultralcd.cpp	/^static void _lcd_babystep_y() {$/;"	f	file:
_lcd_babystep_z	ultralcd.cpp	/^static void _lcd_babystep_z() {$/;"	f	file:
_lcd_level_bed_continue	ultralcd.cpp	/^static void _lcd_level_bed_continue() {$/;"	f	file:
_lcd_level_bed_done	ultralcd.cpp	/^static void _lcd_level_bed_done() {$/;"	f	file:
_lcd_level_bed_get_z	ultralcd.cpp	/^static void _lcd_level_bed_get_z() {$/;"	f	file:
_lcd_level_bed_homing	ultralcd.cpp	/^static void _lcd_level_bed_homing() {$/;"	f	file:
_lcd_level_bed_homing_done	ultralcd.cpp	/^static void _lcd_level_bed_homing_done() {$/;"	f	file:
_lcd_level_bed_moving	ultralcd.cpp	/^static void _lcd_level_bed_moving() {$/;"	f	file:
_lcd_level_bed_position	ultralcd.cpp	/^static uint8_t _lcd_level_bed_position;$/;"	v	file:
_lcd_level_goto_next_point	ultralcd.cpp	/^static void _lcd_level_goto_next_point() {$/;"	f	file:
_lcd_move	ultralcd.cpp	/^static void _lcd_move(const char* name, AxisEnum axis, float min, float max) {$/;"	f	file:
_lcd_move_menu_axis	ultralcd.cpp	/^static void _lcd_move_menu_axis() {$/;"	f	file:
_lcd_preheat	ultralcd.cpp	/^void _lcd_preheat(int endnum, const float temph, const float tempb, const int fan) {$/;"	f
_mbl_goto_xy	Marlin_main.cpp	/^inline void _mbl_goto_xy(float x, float y) {$/;"	f
_mbl_goto_xy	ultralcd.cpp	/^inline void _mbl_goto_xy(float x, float y) {$/;"	f
_temp_error	temperature.cpp	/^inline void _temp_error(int e, const char* serial_msg, const char* lcd_msg) {$/;"	f
_timer1	servo.h	/^    _timer1,$/;"	e	enum:__anon2
_timer3	servo.h	/^    _timer3,$/;"	e	enum:__anon2
_timer4	servo.h	/^    _timer4,$/;"	e	enum:__anon2
_timer5	servo.h	/^    _timer5,$/;"	e	enum:__anon2
_useTimer3	servo.h	86;"	d
_useTimer3	servo.h	92;"	d
_useTimer3	servo.h	94;"	d
_useTimer3	servo.h	96;"	d
_useTimer4	servo.h	87;"	d
_useTimer5	servo.h	89;"	d
abort_on_endstop_hit	stepper.cpp	/^  bool abort_on_endstop_hit = false;$/;"	v
absPreheatFanSpeed	ultralcd.cpp	/^int absPreheatFanSpeed;$/;"	v
absPreheatHPBTemp	ultralcd.cpp	/^int absPreheatHPBTemp;$/;"	v
absPreheatHotendTemp	ultralcd.cpp	/^int absPreheatHotendTemp;$/;"	v
acc_step_rate	stepper.cpp	/^static unsigned short acc_step_rate; \/\/ needed for deceleration start point$/;"	v	file:
accelerate_until	planner.h	/^  long accelerate_until;                    \/\/ The index of the step event on which to stop acceleration$/;"	m	struct:__anon1
acceleration	planner.cpp	/^float acceleration;         \/\/ Normal acceleration mm\/s^2  DEFAULT ACCELERATION for all printing moves. M204 SXXXX$/;"	v
acceleration	planner.h	/^  float acceleration;                                \/\/ acceleration mm\/sec^2$/;"	m	struct:__anon1
acceleration_rate	planner.h	/^  long acceleration_rate;                   \/\/ The acceleration rate used for acceleration calculation$/;"	m	struct:__anon1
acceleration_st	planner.h	/^  unsigned long acceleration_st;                     \/\/ acceleration steps\/sec^2$/;"	m	struct:__anon1
acceleration_time	stepper.cpp	/^static long acceleration_time, deceleration_time;$/;"	v	file:
accumulator	stopwatch.h	/^    uint16_t accumulator;$/;"	m	class:Stopwatch
active_extruder	Marlin_main.cpp	/^uint8_t active_extruder = 0;$/;"	v
active_extruder	planner.h	/^  unsigned char active_extruder;            \/\/ Selects the active extruder$/;"	m	struct:__anon1
active_extruder_parked	Marlin_main.cpp	/^static bool active_extruder_parked = false; \/\/ used in mode 1 & 2$/;"	v	file:
addCluster	SdBaseFile.cpp	/^bool SdBaseFile::addCluster() {$/;"	f	class:SdBaseFile
addDirCluster	SdBaseFile.cpp	/^bool SdBaseFile::addDirCluster() {$/;"	f	class:SdBaseFile
addbyte	twibus.cpp	/^void TWIBus::addbyte(char c) {$/;"	f	class:TWIBus
addr	twibus.h	/^    uint8_t addr = 0;$/;"	m	class:TWIBus
address	twibus.cpp	/^void TWIBus::address(uint8_t addr) {$/;"	f	class:TWIBus
adjust_delta	Marlin_main.cpp	/^void adjust_delta(float cartesian[3]) {$/;"	f
advance	planner.h	/^    float advance;$/;"	m	struct:__anon1
advance	stepper.cpp	/^  static long advance_rate, advance, final_advance = 0;$/;"	v	file:
advance_rate	planner.h	/^    long advance_rate;$/;"	m	struct:__anon1
advance_rate	stepper.cpp	/^  static long advance_rate, advance, final_advance = 0;$/;"	v	file:
allocContiguous	SdVolume.cpp	/^bool SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {$/;"	f	class:SdVolume
allocSearchStart_	SdVolume.h	/^  uint32_t allocSearchStart_;   \/\/ start cluster for alloc search$/;"	m	class:SdVolume
always1	SdInfo.h	/^  unsigned char always1 : 1;$/;"	m	struct:CID
always1	SdInfo.h	/^  unsigned char always1 : 1;$/;"	m	struct:CSDV1
always1	SdInfo.h	/^  unsigned char always1 : 1;$/;"	m	struct:CSDV2
analog2temp	temperature.cpp	/^static float analog2temp(int raw, uint8_t e) {$/;"	f	file:
analog2tempBed	temperature.cpp	/^static float analog2tempBed(int raw) {$/;"	f	file:
analog2widthFil	temperature.cpp	/^  float analog2widthFil() {$/;"	f
analogInputToDigitalPin	Marlin.h	54;"	d
apply_rotation	vector_3.cpp	/^void vector_3::apply_rotation(matrix_3x3 matrix) {$/;"	f	class:vector_3
apply_rotation_xyz	vector_3.cpp	/^void apply_rotation_xyz(matrix_3x3 matrix, float& x, float& y, float& z) {$/;"	f
attach	servo.cpp	/^int8_t Servo::attach(int pin) {$/;"	f	class:Servo
attach	servo.cpp	/^int8_t Servo::attach(int pin, int min, int max) {$/;"	f	class:Servo
attached	servo.cpp	/^bool Servo::attached() { return servo_info[this->servoIndex].Pin.isActive; }$/;"	f	class:Servo
attributes	SdFatStructs.h	/^  uint8_t  attributes;$/;"	m	struct:directoryEntry
attributes	SdFatStructs.h	/^  uint8_t  attributes;$/;"	m	struct:directoryVFATEntry
auto_leve_grid_point	Marlin_main.cpp	/^float auto_leve_grid_point[AUTO_BED_LEVELING_GRID_POINTS * AUTO_BED_LEVELING_GRID_POINTS];$/;"	v
auto_leve_grid_point_index	Marlin_main.cpp	/^float auto_leve_grid_point_index[AUTO_BED_LEVELING_GRID_POINTS][AUTO_BED_LEVELING_GRID_POINTS];$/;"	v
autoretract_enabled	Marlin_main.cpp	/^bool autoretract_enabled = false;$/;"	v
autostart_index	cardreader.h	/^  int autostart_index;$/;"	m	class:CardReader
autostart_stilltocheck	cardreader.h	/^  bool autostart_stilltocheck; \/\/the sd start is delayed, because otherwise the serial cannot answer fast enought to make contact with the hostsoftware.$/;"	m	class:CardReader
autotempShutdown	temperature.h	/^FORCE_INLINE void autotempShutdown() {$/;"	f
autotemp_enabled	planner.cpp	/^  bool autotemp_enabled = true;$/;"	v
autotemp_factor	planner.cpp	/^  float autotemp_factor = 5;$/;"	v
autotemp_max	planner.cpp	/^  float autotemp_max = 240;$/;"	v
autotemp_min	planner.cpp	/^  float autotemp_min = 170;$/;"	v
autotune_temp	ultralcd.cpp	/^int autotune_temp[EXTRUDERS] = { 150 };$/;"	v
autotune_temp_bed	ultralcd.cpp	/^int autotune_temp_bed = 70;$/;"	v
available	MarlinSerial.h	/^    FORCE_INLINE uint8_t available(void) {$/;"	f	class:MarlinSerial
axis_codes	Marlin_main.cpp	/^const char axis_codes[NUM_AXIS] = {'X', 'Y', 'Z', 'E'};$/;"	v
axis_homed	Marlin_main.cpp	/^bool axis_homed[3] = { false };$/;"	v
axis_known_position	Marlin_main.cpp	/^bool axis_known_position[3] = { false };$/;"	v
axis_relative_modes	Marlin_main.cpp	/^bool axis_relative_modes[] = AXIS_RELATIVE_MODES;$/;"	v
axis_scaling	Marlin_main.cpp	/^float axis_scaling[3] = { 1, 1, 1 };    \/\/ Build size scaling, default to 1$/;"	v
axis_segment_time	planner.cpp	/^  static long axis_segment_time[2][3] = { {MAX_FREQ_TIME + 1, 0, 0}, {MAX_FREQ_TIME + 1, 0, 0} };$/;"	v	file:
axis_steps_per_sqr_second	planner.cpp	/^unsigned long axis_steps_per_sqr_second[NUM_AXIS];$/;"	v
axis_steps_per_unit	planner.cpp	/^float axis_steps_per_unit[NUM_AXIS];$/;"	v
axis_unhomed_error	Marlin_main.cpp	/^static void axis_unhomed_error() {$/;"	f	file:
babystep	stepper.cpp	/^  void babystep(const uint8_t axis, const bool direction) {$/;"	f
babystepsTodo	temperature.cpp	/^  volatile int babystepsTodo[3] = { 0 };$/;"	v
babysteps_done	ultralcd.cpp	/^int babysteps_done = 0;$/;"	v
baricuda_e_to_p_pressure	Marlin_main.cpp	/^int baricuda_e_to_p_pressure = 0;$/;"	v
baricuda_valve_pressure	Marlin_main.cpp	/^int baricuda_valve_pressure = 0;$/;"	v
bedKd	temperature.cpp	/^  float bedKd = (DEFAULT_bedKd \/ PID_dT);$/;"	v
bedKi	temperature.cpp	/^  float bedKi = (DEFAULT_bedKi* PID_dT);$/;"	v
bedKp	temperature.cpp	/^  float bedKp = DEFAULT_bedKp;$/;"	v
bed_level	Marlin_main.cpp	/^float bed_level[AUTO_BED_LEVELING_GRID_POINTS][AUTO_BED_LEVELING_GRID_POINTS];$/;"	v
bed_maxttemp_raw	temperature.cpp	/^  static int bed_maxttemp_raw = HEATER_BED_RAW_HI_TEMP;$/;"	v	file:
bed_minttemp_raw	temperature.cpp	/^  static int bed_minttemp_raw = HEATER_BED_RAW_LO_TEMP;$/;"	v	file:
begin	MarlinSerial.cpp	/^void MarlinSerial::begin(long baud) {$/;"	f	class:MarlinSerial
beginCylinderHigh	SdFatStructs.h	/^  unsigned beginCylinderHigh : 2;$/;"	m	struct:partitionTable
beginCylinderLow	SdFatStructs.h	/^  uint8_t  beginCylinderLow;$/;"	m	struct:partitionTable
beginHead	SdFatStructs.h	/^  uint8_t  beginHead;$/;"	m	struct:partitionTable
beginSector	SdFatStructs.h	/^  unsigned beginSector : 6;$/;"	m	struct:partitionTable
bit	Sd2PinMap.h	/^  uint8_t bit;$/;"	m	struct:pin_map_t
blockNumber	SdVolume.h	/^  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {$/;"	f	class:SdVolume
blockOfCluster	SdVolume.h	/^  uint8_t blockOfCluster(uint32_t position) const {$/;"	f	class:SdVolume
block_buffer	planner.cpp	/^block_t block_buffer[BLOCK_BUFFER_SIZE];            \/\/ A ring buffer for motion instfructions$/;"	v
block_buffer_head	planner.cpp	/^volatile unsigned char block_buffer_head;           \/\/ Index of the next block to be pushed$/;"	v
block_buffer_tail	planner.cpp	/^volatile unsigned char block_buffer_tail;           \/\/ Index of the block to process now$/;"	v
block_t	planner.h	/^} block_t;$/;"	t	typeref:struct:__anon1
blocksPerCluster	SdVolume.h	/^  uint8_t blocksPerCluster() const {return blocksPerCluster_;}$/;"	f	class:SdVolume
blocksPerCluster_	SdVolume.h	/^  uint8_t blocksPerCluster_;    \/\/ cluster size in blocks$/;"	m	class:SdVolume
blocksPerFat	SdVolume.h	/^  uint32_t blocksPerFat()  const {return blocksPerFat_;}$/;"	f	class:SdVolume
blocksPerFat_	SdVolume.h	/^  uint32_t blocksPerFat_;       \/\/ FAT size in blocks$/;"	m	class:SdVolume
blocks_queued	planner.h	/^FORCE_INLINE bool blocks_queued() { return (block_buffer_head != block_buffer_tail); }$/;"	f
bluetoothSerial	MarlinSerial.cpp	/^  HardwareSerial bluetoothSerial;$/;"	v
boot	SdFatStructs.h	/^  uint8_t  boot;$/;"	m	struct:partitionTable
bootCode	SdFatStructs.h	/^  uint8_t  bootCode[420];$/;"	m	struct:fat32_boot
bootCode	SdFatStructs.h	/^  uint8_t  bootCode[448];$/;"	m	struct:fat_boot
bootSectorSig0	SdFatStructs.h	/^  uint8_t  bootSectorSig0;$/;"	m	struct:fat32_boot
bootSectorSig0	SdFatStructs.h	/^  uint8_t  bootSectorSig0;$/;"	m	struct:fat_boot
bootSectorSig1	SdFatStructs.h	/^  uint8_t  bootSectorSig1;$/;"	m	struct:fat32_boot
bootSectorSig1	SdFatStructs.h	/^  uint8_t  bootSectorSig1;$/;"	m	struct:fat_boot
bootSignature	SdFatStructs.h	/^  uint8_t  bootSignature;$/;"	m	struct:fat32_boot
bootSignature	SdFatStructs.h	/^  uint8_t  bootSignature;$/;"	m	struct:fat_boot
bootscreen	ultralcd_implementation_hitachi_HD44780.h	/^  void bootscreen() {$/;"	f
bootscreenflag	ultralcd_implementation_hitachi_HD44780.h	/^int bootscreenflag = 0;$/;"	v
buffer	MarlinSerial.h	/^  unsigned char buffer[RX_BUFFER_SIZE];$/;"	m	struct:ring_buffer
buffer	twibus.h	/^    char buffer[30];$/;"	m	class:TWIBus
buffer_s	twibus.h	/^    uint8_t buffer_s = 0;$/;"	m	class:TWIBus
busy	planner.h	/^  volatile char busy;$/;"	m	struct:__anon1
busy_state	Marlin_main.cpp	/^static MarlinBusyState busy_state = NOT_BUSY;$/;"	v	file:
buttons	ultralcd.cpp	/^volatile uint8_t buttons;  \/\/the last checked buttons in a bit array.$/;"	v
buttons_reprapworld_keypad	ultralcd.cpp	/^volatile uint8_t buttons_reprapworld_keypad; \/\/ to store the keypad shift register values$/;"	v
buzz	buzzer.cpp	/^  void buzz(long duration, uint16_t freq) {$/;"	f
bytesPerSector	SdFatStructs.h	/^  uint16_t bytesPerSector;$/;"	m	struct:fat32_boot
bytesPerSector	SdFatStructs.h	/^  uint16_t bytesPerSector;$/;"	m	struct:fat_boot
cTerm	temperature.cpp	/^    static float cTerm[EXTRUDERS];$/;"	v	file:
c_size_high	SdInfo.h	/^  unsigned char c_size_high : 2;$/;"	m	struct:CSDV1
c_size_high	SdInfo.h	/^  unsigned char c_size_high : 6;$/;"	m	struct:CSDV2
c_size_low	SdInfo.h	/^  unsigned char c_size_low : 2;$/;"	m	struct:CSDV1
c_size_low	SdInfo.h	/^  unsigned char c_size_low;$/;"	m	struct:CSDV2
c_size_mid	SdInfo.h	/^  unsigned char c_size_mid;$/;"	m	struct:CSDV1
c_size_mid	SdInfo.h	/^  unsigned char c_size_mid;$/;"	m	struct:CSDV2
c_size_mult_high	SdInfo.h	/^  unsigned char c_size_mult_high : 2;$/;"	m	struct:CSDV1
c_size_mult_low	SdInfo.h	/^  unsigned char c_size_mult_low : 1;$/;"	m	struct:CSDV1
cache	SdVolume.h	/^  cache_t* cache() {return &cacheBuffer_;}$/;"	f	class:SdVolume
cacheBlockNumber	SdVolume.h	/^  uint32_t cacheBlockNumber() {return cacheBlockNumber_;}$/;"	f	class:SdVolume
cacheBlockNumber_	SdVolume.cpp	/^  uint32_t SdVolume::cacheBlockNumber_;  \/\/ current block number$/;"	m	class:SdVolume	file:
cacheBlockNumber_	SdVolume.h	/^  static uint32_t cacheBlockNumber_;  \/\/ Logical number of block in the cache$/;"	m	class:SdVolume
cacheBlockNumber_	SdVolume.h	/^  uint32_t cacheBlockNumber_;  \/\/ Logical number of block in the cache$/;"	m	class:SdVolume
cacheBuffer_	SdVolume.cpp	/^  cache_t  SdVolume::cacheBuffer_;       \/\/ 512 byte cache for Sd2Card$/;"	m	class:SdVolume	file:
cacheBuffer_	SdVolume.h	/^  cache_t cacheBuffer_;        \/\/ 512 byte cache for device blocks$/;"	m	class:SdVolume
cacheBuffer_	SdVolume.h	/^  static cache_t cacheBuffer_;        \/\/ 512 byte cache for device blocks$/;"	m	class:SdVolume
cacheClear	SdVolume.h	/^  cache_t* cacheClear() {$/;"	f	class:SdVolume
cacheDirEntry	SdBaseFile.cpp	/^dir_t* SdBaseFile::cacheDirEntry(uint8_t action) {$/;"	f	class:SdBaseFile
cacheDirty_	SdVolume.cpp	/^  bool     SdVolume::cacheDirty_;        \/\/ cacheFlush() will write block if true$/;"	m	class:SdVolume	file:
cacheDirty_	SdVolume.h	/^  bool cacheDirty_;            \/\/ cacheFlush() will write block if true$/;"	m	class:SdVolume
cacheDirty_	SdVolume.h	/^  static bool cacheDirty_;            \/\/ cacheFlush() will write block if true$/;"	m	class:SdVolume
cacheFlush	SdVolume.cpp	/^bool SdVolume::cacheFlush() {$/;"	f	class:SdVolume
cacheMirrorBlock_	SdVolume.cpp	/^  uint32_t SdVolume::cacheMirrorBlock_;  \/\/ mirror  block for second FAT$/;"	m	class:SdVolume	file:
cacheMirrorBlock_	SdVolume.h	/^  static uint32_t cacheMirrorBlock_;  \/\/ block number for mirror FAT$/;"	m	class:SdVolume
cacheMirrorBlock_	SdVolume.h	/^  uint32_t cacheMirrorBlock_;  \/\/ block number for mirror FAT$/;"	m	class:SdVolume
cacheRawBlock	SdVolume.cpp	/^bool SdVolume::cacheRawBlock(uint32_t blockNumber, bool dirty) {$/;"	f	class:SdVolume
cacheSetBlockNumber	SdVolume.h	/^  void cacheSetBlockNumber(uint32_t blockNumber, bool dirty) {$/;"	f	class:SdVolume
cacheSetDirty	SdVolume.h	/^  void cacheSetDirty() {cacheDirty_ |= CACHE_FOR_WRITE;}$/;"	f	class:SdVolume
cache_t	SdVolume.h	/^union cache_t {$/;"	u
calc_timer	stepper.cpp	/^FORCE_INLINE unsigned short calc_timer(unsigned short step_rate) {$/;"	f
calculate_SCARA_forward_Transform	Marlin_main.cpp	/^void calculate_SCARA_forward_Transform(float f_scara[3]) {$/;"	f
calculate_auto_level_grid	ultralcd.cpp	/^static void calculate_auto_level_grid(){$/;"	f	file:
calculate_delta	Marlin_main.cpp	/^void calculate_delta(float cartesian[3]) {$/;"	f
calculate_trapezoid_for_block	planner.cpp	/^void calculate_trapezoid_for_block(block_t* block, float entry_factor, float exit_factor) {$/;"	f
calculate_volumetric_multiplier	Marlin_main.cpp	/^float calculate_volumetric_multiplier(float diameter) {$/;"	f
calculate_volumetric_multipliers	Marlin_main.cpp	/^void calculate_volumetric_multipliers() {$/;"	f
callbackFunc	ultralcd.cpp	/^menuFunc_t callbackFunc;              \/\/ call this after editing$/;"	v
cancel_heatup	Marlin_main.cpp	/^bool cancel_heatup = false;$/;"	v
card	Marlin_main.cpp	/^CardReader card;$/;"	v
card	cardreader.h	/^  Sd2Card card;$/;"	m	class:CardReader
cardAcmd	Sd2Card.h	/^  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {$/;"	f	class:Sd2Card
cardCommand	Sd2Card.cpp	/^uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg) {$/;"	f	class:Sd2Card
cardOK	cardreader.h	/^  bool saving, logging, sdprinting, cardOK, filenameIsDir;$/;"	m	class:CardReader
cardSize	Sd2Card.cpp	/^uint32_t Sd2Card::cardSize() {$/;"	f	class:Sd2Card
ccc_high	SdInfo.h	/^  unsigned char ccc_high;$/;"	m	struct:CSDV1
ccc_high	SdInfo.h	/^  unsigned char ccc_high;$/;"	m	struct:CSDV2
ccc_low	SdInfo.h	/^  unsigned char ccc_low : 4;$/;"	m	struct:CSDV1
ccc_low	SdInfo.h	/^  unsigned char ccc_low : 4;$/;"	m	struct:CSDV2
cf_buffer	Marlin_main.cpp	/^float cf_buffer[BLOCK_BUFFER_SIZE] = {0};$/;"	v
cf_count	Marlin_main.cpp	/^int cfbH = 0, cf_count = 0, cf_flag = true;$/;"	v
cf_flag	Marlin_main.cpp	/^int cfbH = 0, cf_count = 0, cf_flag = true;$/;"	v
cfbH	Marlin_main.cpp	/^int cfbH = 0, cf_count = 0, cf_flag = true;$/;"	v
chainSize	SdVolume.cpp	/^bool SdVolume::chainSize(uint32_t cluster, uint32_t* size) {$/;"	f	class:SdVolume
change_filament_at_z_pos_menu	ultralcd.cpp	/^static void change_filament_at_z_pos_menu() {$/;"	f	file:
charset_mapper	ultralcd_implementation_hitachi_HD44780.h	/^  char charset_mapper(char c) {$/;"	f
chdir	cardreader.cpp	/^void CardReader::chdir(const char * relpath) {$/;"	f	class:CardReader
chdkActive	Marlin_main.cpp	/^boolean chdkActive = false;$/;"	v
chdkHigh	Marlin_main.cpp	/^millis_t chdkHigh = 0;$/;"	v
check	planner.cpp	/^void check(){$/;"	f
checkExtruderAutoFans	temperature.cpp	/^void checkExtruderAutoFans() {$/;"	f
checkHitEndstops	stepper.cpp	/^void checkHitEndstops() {$/;"	f
checkRx	MarlinSerial.h	/^    FORCE_INLINE void checkRx(void) {$/;"	f	class:MarlinSerial
check_axes_activity	planner.cpp	/^void check_axes_activity() {$/;"	f
check_change_filament_at_z_pos	ultralcd.cpp	/^static void check_change_filament_at_z_pos() {$/;"	f	file:
check_endstops	stepper.cpp	/^static bool check_endstops = true;$/;"	v	file:
check_endstops_global	stepper.cpp	/^static bool check_endstops_global =$/;"	v	file:
check_fan_speed	ultralcd.cpp	/^static void check_fan_speed() {$/;"	f	file:
checkautostart	cardreader.cpp	/^void CardReader::checkautostart(bool force) {$/;"	f	class:CardReader
checksum	SdFatStructs.h	/^  uint8_t  checksum;$/;"	m	struct:directoryVFATEntry
chipSelectHigh	Sd2Card.cpp	/^void Sd2Card::chipSelectHigh() {$/;"	f	class:Sd2Card
chipSelectLow	Sd2Card.cpp	/^void Sd2Card::chipSelectLow() {$/;"	f	class:Sd2Card
chipSelectPin_	Sd2Card.h	/^  uint8_t chipSelectPin_;$/;"	m	class:Sd2Card
cid_t	SdInfo.h	/^} cid_t;$/;"	t	typeref:struct:CID
clamp_to_software_endstops	Marlin_main.cpp	/^void clamp_to_software_endstops(float target[3]) {$/;"	f
clean_auto_level_grid	ultralcd.cpp	/^static void clean_auto_level_grid(){$/;"	f	file:
clean_up_after_endstop_move	Marlin_main.cpp	/^static void clean_up_after_endstop_move() {$/;"	f	file:
cleaning_buffer_counter	stepper.cpp	/^static unsigned int cleaning_buffer_counter;$/;"	v	file:
close	SdBaseFile.cpp	/^bool SdBaseFile::close() {$/;"	f	class:SdBaseFile
closefile	cardreader.cpp	/^void CardReader::closefile(bool store_location) {$/;"	f	class:CardReader
cluster	SdBaseFile.h	/^  uint32_t cluster;$/;"	m	struct:filepos_t
clusterCount	SdVolume.h	/^  uint32_t clusterCount() const {return clusterCount_;}$/;"	f	class:SdVolume
clusterCount_	SdVolume.h	/^  uint32_t clusterCount_;       \/\/ clusters in one FAT$/;"	m	class:SdVolume
clusterSizeShift	SdVolume.h	/^  uint8_t clusterSizeShift() const {return clusterSizeShift_;}$/;"	f	class:SdVolume
clusterSizeShift_	SdVolume.h	/^  uint8_t clusterSizeShift_;    \/\/ shift to convert cluster count to block count$/;"	m	class:SdVolume
clusterStartBlock	SdVolume.h	/^  uint32_t clusterStartBlock(uint32_t cluster) const {$/;"	f	class:SdVolume
cmd_queue_index_r	Marlin_main.cpp	/^static int cmd_queue_index_r = 0;$/;"	v	file:
cmd_queue_index_w	Marlin_main.cpp	/^static int cmd_queue_index_w = 0;$/;"	v	file:
codeArea	SdFatStructs.h	/^  uint8_t  codeArea[440];$/;"	m	struct:masterBootRecord
code_has_value	Marlin_main.cpp	/^bool code_has_value() {$/;"	f
code_seen	Marlin_main.cpp	/^bool code_seen(char code) {$/;"	f
code_value	Marlin_main.cpp	/^float code_value() {$/;"	f
code_value_long	Marlin_main.cpp	/^long code_value_long() {$/;"	f
code_value_short	Marlin_main.cpp	/^int16_t code_value_short() {$/;"	f
command_queue	Marlin_main.cpp	/^static char command_queue[BUFSIZE][MAX_CMD_SIZE];$/;"	v	file:
commands_in_queue	Marlin_main.cpp	/^int commands_in_queue = 0;$/;"	v
contiguousRange	SdBaseFile.cpp	/^bool SdBaseFile::contiguousRange(uint32_t* bgnBlock, uint32_t* endBlock) {$/;"	f	class:SdBaseFile
contiguousRange	SdBaseFile.h	/^  bool contiguousRange(uint32_t& bgnBlock, uint32_t& endBlock) {  \/\/ NOLINT$/;"	f	class:SdBaseFile
controllerFan	Marlin_main.cpp	/^void controllerFan() {$/;"	f
conv	ultralcd.cpp	/^char conv[8];$/;"	v
convert_fan_speed	ultralcd.cpp	/^static void convert_fan_speed() {$/;"	f	file:
copy	SdInfo.h	/^  unsigned char copy : 1;$/;"	m	struct:CSDV1
copy	SdInfo.h	/^  unsigned char copy : 1;$/;"	m	struct:CSDV2
copy_and_scalePID_d	ultralcd.cpp	/^void copy_and_scalePID_d(int e) {$/;"	f
copy_and_scalePID_i	ultralcd.cpp	/^void copy_and_scalePID_i(int e) {$/;"	f
count_direction	stepper.cpp	/^volatile signed char count_direction[NUM_AXIS] = { 1 };$/;"	v
count_position	stepper.cpp	/^volatile long count_position[NUM_AXIS] = { 0 }; \/\/ Positions of stepper motors, in step units$/;"	v
counter_e	stepper.cpp	/^static long counter_x, counter_y, counter_z, counter_e;$/;"	v	file:
counter_x	stepper.cpp	/^static long counter_x, counter_y, counter_z, counter_e;$/;"	v	file:
counter_y	stepper.cpp	/^static long counter_x, counter_y, counter_z, counter_e;$/;"	v	file:
counter_z	stepper.cpp	/^static long counter_x, counter_y, counter_z, counter_e;$/;"	v	file:
crc	SdInfo.h	/^  unsigned char crc : 7;$/;"	m	struct:CID
crc	SdInfo.h	/^  unsigned char crc : 7;$/;"	m	struct:CSDV1
crc	SdInfo.h	/^  unsigned char crc : 7;$/;"	m	struct:CSDV2
createContiguous	SdBaseFile.cpp	/^bool SdBaseFile::createContiguous(SdBaseFile* dirFile,$/;"	f	class:SdBaseFile
createContiguous	SdBaseFile.h	/^  bool createContiguous(SdBaseFile& dirFile,  \/\/ NOLINT$/;"	f	class:SdBaseFile
createFilename	cardreader.cpp	/^char *createFilename(char *buffer, const dir_t &p) { \/\/buffer > 12characters$/;"	f
create_from_rows	vector_3.cpp	/^matrix_3x3 matrix_3x3::create_from_rows(vector_3 row_0, vector_3 row_1, vector_3 row_2) {$/;"	f	class:matrix_3x3
create_look_at	vector_3.cpp	/^matrix_3x3 matrix_3x3::create_look_at(vector_3 target) {$/;"	f	class:matrix_3x3
creationDate	SdFatStructs.h	/^  uint16_t creationDate;$/;"	m	struct:directoryEntry
creationTime	SdFatStructs.h	/^  uint16_t creationTime;$/;"	m	struct:directoryEntry
creationTimeTenths	SdFatStructs.h	/^  uint8_t  creationTimeTenths;$/;"	m	struct:directoryEntry
cross	vector_3.cpp	/^vector_3 vector_3::cross(vector_3 left, vector_3 right) {$/;"	f	class:vector_3
csd1_t	SdInfo.h	/^} csd1_t;$/;"	t	typeref:struct:CSDV1
csd2_t	SdInfo.h	/^} csd2_t;$/;"	t	typeref:struct:CSDV2
csd_t	SdInfo.h	/^union csd_t {$/;"	u
csd_ver	SdInfo.h	/^  unsigned char csd_ver : 2;$/;"	m	struct:CSDV1
csd_ver	SdInfo.h	/^  unsigned char csd_ver : 2;$/;"	m	struct:CSDV2
curCluster	SdBaseFile.h	/^  uint32_t curCluster() const {return curCluster_;}$/;"	f	class:SdBaseFile
curCluster_	SdBaseFile.h	/^  uint32_t  curCluster_;    \/\/ cluster for current file position$/;"	m	class:SdBaseFile
curDir	cardreader.h	/^  SdFile root, *curDir, workDir, workDirParents[MAX_DIR_DEPTH];$/;"	m	class:CardReader
curPosition	SdBaseFile.h	/^  uint32_t curPosition() const {return curPosition_;}$/;"	f	class:SdBaseFile
curPosition_	SdBaseFile.h	/^  uint32_t  curPosition_;   \/\/ current file position in bytes from beginning$/;"	m	class:SdBaseFile
currentMenu	ultralcd.cpp	/^menuFunc_t currentMenu = lcd_status_screen; \/\/ pointer to the currently active menu handler$/;"	v
currentMenuViewOffset	ultralcd.cpp	/^uint8_t currentMenuViewOffset;              \/* scroll offset in the current menu *\/$/;"	v
current_block	stepper.cpp	/^block_t* current_block;  \/\/ A pointer to the block currently being traced$/;"	v
current_command	Marlin_main.cpp	/^static char* current_command, *current_command_args;$/;"	v	file:
current_command_args	Marlin_main.cpp	/^static char* current_command, *current_command_args;$/;"	v	file:
current_position	Marlin_main.cpp	/^float current_position[NUM_AXIS] = { 0.0 };$/;"	v
current_raw_filwidth	temperature.cpp	/^  int current_raw_filwidth = 0;  \/\/Holds measured filament diameter - one extruder only$/;"	v
current_temperature	temperature.cpp	/^float current_temperature[4] = { 0.0 };$/;"	v
current_temperature_bed	temperature.cpp	/^float current_temperature_bed = 0.0;$/;"	v
current_temperature_bed_raw	temperature.cpp	/^int current_temperature_bed_raw = 0;$/;"	v
current_temperature_raw	temperature.cpp	/^int current_temperature_raw[4] = { 0 };$/;"	v
customizedSerial	MarlinSerial.cpp	/^MarlinSerial customizedSerial;$/;"	v
cwd	SdBaseFile.h	/^  static SdBaseFile* cwd() {return cwd_;}$/;"	f	class:SdBaseFile
cwd_	SdBaseFile.cpp	/^SdBaseFile* SdBaseFile::cwd_ = 0;$/;"	m	class:SdBaseFile	file:
cwd_	SdBaseFile.h	/^  static SdBaseFile* cwd_;$/;"	m	class:SdBaseFile
dTerm	temperature.cpp	/^  static float dTerm[EXTRUDERS];$/;"	v	file:
dTerm_bed	temperature.cpp	/^  static float dTerm_bed;$/;"	v	file:
dac_amps	stepper_dac.cpp	/^  static float dac_amps(int8_t n) { return ((2.048 * mcp4728_getValue(dac_order[n])) \/ 4096.0) \/ (8.0 * DAC_STEPPER_SENSE); }$/;"	f	file:
dac_commit_eeprom	stepper_dac.cpp	/^  void dac_commit_eeprom() {$/;"	f
dac_current_percent	stepper_dac.cpp	/^  void dac_current_percent(uint8_t channel, float val) {$/;"	f
dac_current_raw	stepper_dac.cpp	/^  void dac_current_raw(uint8_t channel, uint16_t val) {$/;"	f
dac_init	stepper_dac.cpp	/^  int dac_init() {$/;"	f
dac_order	stepper_dac.cpp	/^  const uint8_t dac_order[NUM_AXIS] = DAC_STEPPER_ORDER;$/;"	v
dac_perc	stepper_dac.cpp	/^  static float dac_perc(int8_t n) { return 100.0 * mcp4728_getValue(dac_order[n]) \/ DAC_STEPPER_MAX; }$/;"	f	file:
dac_present	stepper_dac.cpp	/^  bool dac_present = false;$/;"	v
dac_print_values	stepper_dac.cpp	/^  void dac_print_values() {$/;"	f
data	SdVolume.h	/^  uint8_t  data[512];$/;"	m	union:cache_t
dataStartBlock	SdVolume.h	/^  uint32_t dataStartBlock() const {return dataStartBlock_;}$/;"	f	class:SdVolume
dataStartBlock_	SdVolume.h	/^  uint32_t dataStartBlock_;     \/\/ first data block number$/;"	m	class:SdVolume
dateTimeCallback	SdBaseFile.h	/^  static void dateTimeCallback($/;"	f	class:SdBaseFile
dateTimeCallbackCancel	SdBaseFile.h	/^  static void dateTimeCallbackCancel() {dateTime_ = 0;}$/;"	f	class:SdBaseFile
dateTime_	SdBaseFile.cpp	/^void (*SdBaseFile::dateTime_)(uint16_t* date, uint16_t* time) = 0;$/;"	v
dateTime_	SdBaseFile.h	/^  static void (*dateTime_)(uint16_t* date, uint16_t* time);$/;"	m	class:SdBaseFile
daxpy	qr_solve.cpp	/^void daxpy(int n, double da, double dx[], int incx, double dy[], int incy)$/;"	f
dbgFat	SdVolume.h	/^  bool dbgFat(uint32_t n, uint32_t* v) {return fatGet(n, v);}$/;"	f	class:SdVolume
ddot	qr_solve.cpp	/^double ddot(int n, double dx[], int incx, double dy[], int incy)$/;"	f
ddr	Sd2PinMap.h	/^  volatile uint8_t* ddr;$/;"	m	struct:pin_map_t
debug	stopwatch.cpp	/^  void Stopwatch::debug(const char func[]) {$/;"	f	class:Stopwatch
debug	twibus.cpp	/^  void TWIBus::debug(const char func[], int32_t val\/*=-1*\/) {$/;"	f	class:TWIBus
debug	vector_3.cpp	/^void matrix_3x3::debug(const char title[]) {$/;"	f	class:matrix_3x3
debug	vector_3.cpp	/^void vector_3::debug(const char title[]) {$/;"	f	class:vector_3
decelerate_after	planner.h	/^  long decelerate_after;                    \/\/ The index of the step event on which to start decelerating$/;"	m	struct:__anon1
deceleration_time	stepper.cpp	/^static long acceleration_time, deceleration_time;$/;"	v	file:
defer_return_to_status	ultralcd.cpp	/^bool defer_return_to_status = false;$/;"	v
degBed	temperature.h	/^FORCE_INLINE float degBed() { return current_temperature_bed; }$/;"	f
degHotend	temperature.h	/^FORCE_INLINE float degHotend(uint8_t extruder) { return current_temperature[extruder]; }$/;"	f
degTargetBed	temperature.h	/^FORCE_INLINE float degTargetBed() { return target_temperature_bed; }$/;"	f
degTargetHotend	temperature.h	/^FORCE_INLINE float degTargetHotend(uint8_t extruder) { return target_temperature[extruder]; }$/;"	f
del_change_filament_at_z_pos	ultralcd.cpp	/^static void del_change_filament_at_z_pos() {$/;"	f	file:
delayed_move_time	Marlin_main.cpp	/^static millis_t delayed_move_time = 0; \/\/ used in mode 1$/;"	v	file:
delta	Marlin_main.cpp	/^float delta[3] = { 0 };$/;"	v
delta	Marlin_main.cpp	/^static float delta[3] = { 0 };$/;"	v	file:
delta_clip	ultralcd.cpp	/^static int delta_clip( float a ) {$/;"	f	file:
delta_clip_radius_2	ultralcd.cpp	/^static float delta_clip_radius_2 =  (DELTA_PRINTABLE_RADIUS) * (DELTA_PRINTABLE_RADIUS);$/;"	v	file:
delta_diagonal_rod	Marlin_main.cpp	/^float delta_diagonal_rod = DELTA_DIAGONAL_ROD;$/;"	v
delta_diagonal_rod_2_tower_1	Marlin_main.cpp	/^float delta_diagonal_rod_2_tower_1 = sq(delta_diagonal_rod + delta_diagonal_rod_trim_tower_1);$/;"	v
delta_diagonal_rod_2_tower_2	Marlin_main.cpp	/^float delta_diagonal_rod_2_tower_2 = sq(delta_diagonal_rod + delta_diagonal_rod_trim_tower_2);$/;"	v
delta_diagonal_rod_2_tower_3	Marlin_main.cpp	/^float delta_diagonal_rod_2_tower_3 = sq(delta_diagonal_rod + delta_diagonal_rod_trim_tower_3);$/;"	v
delta_diagonal_rod_trim_tower_1	Marlin_main.cpp	/^float delta_diagonal_rod_trim_tower_1 = DELTA_DIAGONAL_ROD_TRIM_TOWER_1;$/;"	v
delta_diagonal_rod_trim_tower_2	Marlin_main.cpp	/^float delta_diagonal_rod_trim_tower_2 = DELTA_DIAGONAL_ROD_TRIM_TOWER_2;$/;"	v
delta_diagonal_rod_trim_tower_3	Marlin_main.cpp	/^float delta_diagonal_rod_trim_tower_3 = DELTA_DIAGONAL_ROD_TRIM_TOWER_3;$/;"	v
delta_grid_spacing	Marlin_main.cpp	/^int delta_grid_spacing[2] = { 0, 0 };$/;"	v
delta_radius	Marlin_main.cpp	/^float delta_radius = DELTA_RADIUS;$/;"	v
delta_segments_per_second	Marlin_main.cpp	/^float delta_segments_per_second = DELTA_SEGMENTS_PER_SECOND;$/;"	v
delta_segments_per_second	Marlin_main.cpp	/^float delta_segments_per_second = SCARA_SEGMENTS_PER_SECOND;$/;"	v
delta_tower1_x	Marlin_main.cpp	/^float delta_tower1_x = -SIN_60 * (delta_radius + DELTA_RADIUS_TRIM_TOWER_1); \/\/ front left tower$/;"	v
delta_tower1_y	Marlin_main.cpp	/^float delta_tower1_y = -COS_60 * (delta_radius + DELTA_RADIUS_TRIM_TOWER_1);$/;"	v
delta_tower2_x	Marlin_main.cpp	/^float delta_tower2_x =  SIN_60 * (delta_radius + DELTA_RADIUS_TRIM_TOWER_2); \/\/ front right tower$/;"	v
delta_tower2_y	Marlin_main.cpp	/^float delta_tower2_y = -COS_60 * (delta_radius + DELTA_RADIUS_TRIM_TOWER_2);$/;"	v
delta_tower3_x	Marlin_main.cpp	/^float delta_tower3_x = 0;                                                    \/\/ back middle tower$/;"	v
delta_tower3_y	Marlin_main.cpp	/^float delta_tower3_y = (delta_radius + DELTA_RADIUS_TRIM_TOWER_3);$/;"	v
deploy_z_probe	Marlin_main.cpp	/^static void deploy_z_probe() {$/;"	f	file:
destination	Marlin_main.cpp	/^float destination[NUM_AXIS] = { 0.0 };$/;"	v
detach	servo.cpp	/^void Servo::detach() {$/;"	f	class:Servo
digipot_current	stepper.cpp	/^void digipot_current(uint8_t driver, int current) {$/;"	f
digipot_init	stepper.cpp	/^void digipot_init() {$/;"	f
digitalPinCount	Sd2PinMap.h	/^static const uint8_t digitalPinCount = COUNT(digitalPinMap);$/;"	v
digitalPinMap	Sd2PinMap.h	/^static const pin_map_t digitalPinMap[] = {$/;"	v
digitalPotWrite	stepper.cpp	/^  void digitalPotWrite(int address, int value) {$/;"	f
dir	SdVolume.h	/^  dir_t    dir[16];$/;"	m	union:cache_t
dirBlock_	SdBaseFile.h	/^  uint32_t  dirBlock_;      \/\/ block for this files directory entry$/;"	m	class:SdBaseFile
dirEntry	SdBaseFile.cpp	/^bool SdBaseFile::dirEntry(dir_t* dir) {$/;"	f	class:SdBaseFile
dirEntry	SdBaseFile.h	/^  bool dirEntry(dir_t& dir) {return dirEntry(&dir);}  \/\/ NOLINT$/;"	f	class:SdBaseFile
dirIndex_	SdBaseFile.h	/^  uint8_t   dirIndex_;      \/\/ index of directory entry in dirBlock$/;"	m	class:SdBaseFile
dirName	SdBaseFile.cpp	/^void SdBaseFile::dirName(const dir_t& dir, char* name) {$/;"	f	class:SdBaseFile
dir_t	SdFatStructs.h	/^typedef struct directoryEntry dir_t;$/;"	t	typeref:struct:directoryEntry
direction_bits	planner.h	/^  unsigned char direction_bits;             \/\/ The direction bit set for this block (refers to *_DIRECTION_BIT in config.h)$/;"	m	struct:__anon1
directoryEntry	SdFatStructs.h	/^struct directoryEntry {$/;"	s
directoryVFATEntry	SdFatStructs.h	/^struct directoryVFATEntry {$/;"	s
disableStepperDrivers	Marlin_main.cpp	/^void disableStepperDrivers() {$/;"	f
disable_all_heaters	temperature.cpp	/^void disable_all_heaters() {$/;"	f
disable_all_solenoids	Marlin_main.cpp	/^void disable_all_solenoids() {$/;"	f
disable_all_steppers	Marlin_main.cpp	/^void disable_all_steppers() {$/;"	f
disable_e0	Marlin.h	169;"	d
disable_e0	Marlin.h	172;"	d
disable_e1	Marlin.h	177;"	d
disable_e1	Marlin.h	180;"	d
disable_e2	Marlin.h	185;"	d
disable_e2	Marlin.h	188;"	d
disable_e3	Marlin.h	193;"	d
disable_e3	Marlin.h	196;"	d
disable_x	Marlin.h	132;"	d
disable_x	Marlin.h	135;"	d
disable_x	Marlin.h	138;"	d
disable_y	Marlin.h	144;"	d
disable_y	Marlin.h	147;"	d
disable_y	Marlin.h	151;"	d
disable_z	Marlin.h	157;"	d
disable_z	Marlin.h	160;"	d
disable_z	Marlin.h	164;"	d
diskSignature	SdFatStructs.h	/^  uint32_t diskSignature;$/;"	m	struct:masterBootRecord
diveDirName	cardreader.h	/^  char* diveDirName;$/;"	m	class:CardReader
dnrm2	qr_solve.cpp	/^double dnrm2(int n, double x[], int incx)$/;"	f
do_blocking_move_to	Marlin_main.cpp	/^static void do_blocking_move_to(float x, float y, float z) {$/;"	f	file:
do_blocking_move_to_x	Marlin_main.cpp	/^inline void do_blocking_move_to_x(float x) {$/;"	f
do_blocking_move_to_xy	Marlin_main.cpp	/^inline void do_blocking_move_to_xy(float x, float y) {$/;"	f
do_blocking_move_to_z	Marlin_main.cpp	/^inline void do_blocking_move_to_z(float z) {$/;"	f
do_g29_save	ultralcd.cpp	/^static void do_g29_save() {$/;"	f	file:
dock_sled	Marlin_main.cpp	/^static void dock_sled(bool dock, int offset = 0) {$/;"	f	file:
dontExpireStatus	ultralcd.cpp	/^void dontExpireStatus() {$/;"	f
dqrank	qr_solve.cpp	/^void dqrank(double a[], int lda, int m, int n, double tol, int* kr,$/;"	f
dqrdc	qr_solve.cpp	/^void dqrdc(double a[], int lda, int n, int p, double qraux[], int jpvt[],$/;"	f
dqrls	qr_solve.cpp	/^int dqrls(double a[], int lda, int m, int n, double tol, int* kr, double b[],$/;"	f
dqrlss	qr_solve.cpp	/^void dqrlss(double a[], int lda, int m, int n, int kr, double b[], double x[],$/;"	f
dqrsl	qr_solve.cpp	/^int dqrsl(double a[], int lda, int n, int k, double qraux[], double y[],$/;"	f
drain_queued_commands_P	Marlin_main.cpp	/^static bool drain_queued_commands_P() {$/;"	f	file:
driveNumber	SdFatStructs.h	/^  uint8_t  driveNumber;$/;"	m	struct:fat32_boot
driveNumber	SdFatStructs.h	/^  uint8_t  driveNumber;$/;"	m	struct:fat_boot
dropsegments	Configuration_adv.h	/^const unsigned int dropsegments = 2; \/\/everything with less than this number of steps will be ignored as move and joined with the next movement$/;"	v
dscal	qr_solve.cpp	/^void dscal(int n, double sa, double x[], int incx)$/;"	f
dsr_imp	SdInfo.h	/^  unsigned char dsr_imp : 1;$/;"	m	struct:CSDV1
dsr_imp	SdInfo.h	/^  unsigned char dsr_imp : 1;$/;"	m	struct:CSDV2
dswap	qr_solve.cpp	/^void dswap(int n, double x[], int incx, double y[], int incy)$/;"	f
dual_x_carriage_mode	Marlin_main.cpp	/^static int dual_x_carriage_mode = DEFAULT_DUAL_X_CARRIAGE_MODE;$/;"	v	file:
duplicate_extruder_temp_offset	Marlin_main.cpp	/^static float duplicate_extruder_temp_offset = 0; \/\/ used in mode 2$/;"	v	file:
duplicate_extruder_x_offset	Marlin_main.cpp	/^static float duplicate_extruder_x_offset = DEFAULT_DUPLICATION_X_OFFSET; \/\/ used in mode 2$/;"	v	file:
duration	stopwatch.cpp	/^uint32_t Stopwatch::duration() {$/;"	f	class:Stopwatch
e_steps	stepper.cpp	/^  static long e_steps[4];$/;"	v	file:
e_to_p_pressure	planner.h	/^    unsigned long e_to_p_pressure;$/;"	m	struct:__anon1
editLabel	ultralcd.cpp	/^const char* editLabel;$/;"	v
editValue	ultralcd.cpp	/^void* editValue;$/;"	v
enableStepperDrivers	Marlin_main.cpp	/^void enableStepperDrivers() {$/;"	f
enable_all_steppers	Marlin_main.cpp	/^void enable_all_steppers() {$/;"	f
enable_e0	Marlin.h	168;"	d
enable_e0	Marlin.h	171;"	d
enable_e1	Marlin.h	176;"	d
enable_e1	Marlin.h	179;"	d
enable_e2	Marlin.h	184;"	d
enable_e2	Marlin.h	187;"	d
enable_e3	Marlin.h	192;"	d
enable_e3	Marlin.h	195;"	d
enable_endstops	stepper.cpp	/^void enable_endstops(bool check) { check_endstops = check; }$/;"	f
enable_endstops_globally	stepper.cpp	/^void enable_endstops_globally(bool check) { check_endstops_global = check_endstops = check; }$/;"	f
enable_solenoid	Marlin_main.cpp	/^void enable_solenoid(uint8_t num) {$/;"	f
enable_solenoid_on_active_extruder	Marlin_main.cpp	/^void enable_solenoid_on_active_extruder() {$/;"	f
enable_x	Marlin.h	131;"	d
enable_x	Marlin.h	134;"	d
enable_x	Marlin.h	137;"	d
enable_y	Marlin.h	143;"	d
enable_y	Marlin.h	146;"	d
enable_y	Marlin.h	150;"	d
enable_z	Marlin.h	156;"	d
enable_z	Marlin.h	159;"	d
enable_z	Marlin.h	163;"	d
encoderDiff	ultralcd.cpp	/^int8_t encoderDiff; \/\/ updated from interrupt context and added to encoderPosition every LCD update$/;"	v
encoderDirection	ultralcd.cpp	/^int8_t encoderDirection = 1;$/;"	v
encoderPosition	ultralcd.cpp	/^uint32_t encoderPosition;$/;"	v
encoderRateMultiplierEnabled	ultralcd.cpp	/^bool encoderRateMultiplierEnabled;$/;"	v
encoder_position	ultralcd.cpp	/^  uint32_t encoder_position;$/;"	m	struct:__anon5	file:
encrot0	ultralcd.cpp	2897;"	d	file:
encrot1	ultralcd.cpp	2898;"	d	file:
encrot2	ultralcd.cpp	2899;"	d	file:
encrot3	ultralcd.cpp	2900;"	d	file:
end	MarlinSerial.cpp	/^void MarlinSerial::end() {$/;"	f	class:MarlinSerial
endCylinderHigh	SdFatStructs.h	/^  unsigned endCylinderHigh : 2;$/;"	m	struct:partitionTable
endCylinderLow	SdFatStructs.h	/^  uint8_t  endCylinderLow;$/;"	m	struct:partitionTable
endHead	SdFatStructs.h	/^  uint8_t  endHead;$/;"	m	struct:partitionTable
endSector	SdFatStructs.h	/^  unsigned endSector : 6;$/;"	m	struct:partitionTable
endstop_adj	Marlin_main.cpp	/^float endstop_adj[3] = { 0 };$/;"	v
endstop_hit_bits	stepper.cpp	/^static volatile char endstop_hit_bits = 0; \/\/ use X_MIN, Y_MIN, Z_MIN and Z_MIN_PROBE as BIT value$/;"	v	file:
endstops_hit_on_purpose	stepper.cpp	/^void endstops_hit_on_purpose() { endstop_hit_bits = 0; }$/;"	f
endstops_not_homing	stepper.cpp	/^void endstops_not_homing() { check_endstops = check_endstops_global; }$/;"	f
endstops_stepsDone	stepper.cpp	/^volatile long endstops_stepsTotal, endstops_stepsDone;$/;"	v
endstops_stepsTotal	stepper.cpp	/^volatile long endstops_stepsTotal, endstops_stepsDone;$/;"	v
endstops_trigsteps	stepper.cpp	/^volatile long endstops_trigsteps[3] = { 0 };$/;"	v
enqueue_and_echo_command	Marlin_main.cpp	/^bool enqueue_and_echo_command(const char* cmd, bool say_ok\/*=false*\/) {$/;"	f
enqueue_and_echo_command_now	Marlin_main.cpp	/^void enqueue_and_echo_command_now(const char* cmd) {$/;"	f
enqueue_and_echo_commands_P	Marlin_main.cpp	/^void enqueue_and_echo_commands_P(const char* pgcode) {$/;"	f
entry_speed	planner.h	/^  float entry_speed;                                 \/\/ Entry speed at previous-current junction in mm\/sec$/;"	m	struct:__anon1
eof	cardreader.h	/^  FORCE_INLINE bool eof() { return sdpos >= filesize; }$/;"	f	class:CardReader
erase	Sd2Card.cpp	/^bool Sd2Card::erase(uint32_t firstBlock, uint32_t lastBlock) {$/;"	f	class:Sd2Card
eraseSingleBlockEnable	Sd2Card.cpp	/^bool Sd2Card::eraseSingleBlockEnable() {$/;"	f	class:Sd2Card
erase_blk_en	SdInfo.h	/^  unsigned char erase_blk_en : 1;$/;"	m	struct:CSDV1
erase_blk_en	SdInfo.h	/^  unsigned char erase_blk_en : 1;$/;"	m	struct:CSDV2
error	Sd2Card.h	/^  void error(uint8_t code) {errorCode_ = code;}$/;"	f	class:Sd2Card
errorCode	Sd2Card.h	/^  int errorCode() const {return errorCode_;}$/;"	f	class:Sd2Card
errorCode_	Sd2Card.h	/^  uint8_t errorCode_;$/;"	m	class:Sd2Card
errorData	Sd2Card.h	/^  int errorData() const {return status_;}$/;"	f	class:Sd2Card
estimate_acceleration_distance	planner.cpp	/^FORCE_INLINE float estimate_acceleration_distance(float initial_rate, float target_rate, float acceleration) {$/;"	f
exists	SdBaseFile.cpp	/^bool SdBaseFile::exists(const char* name) {$/;"	f	class:SdBaseFile
expire_status_ms	ultralcd_implementation_hitachi_HD44780.h	/^    static millis_t expire_status_ms = 0;$/;"	v
extrapolate_one_point	Marlin_main.cpp	/^static void extrapolate_one_point(int x, int y, int xdir, int ydir) {$/;"	f	file:
extrapolate_unprobed_bed_level	Marlin_main.cpp	/^static void extrapolate_unprobed_bed_level() {$/;"	f	file:
extrude_min_temp	Marlin_main.cpp	/^float extrude_min_temp = EXTRUDE_MINTEMP;$/;"	v
extruder_duplication_enabled	Marlin_main.cpp	/^bool extruder_duplication_enabled = false; \/\/ used in mode 2$/;"	v
extruder_multiplier	Marlin_main.cpp	/^int extruder_multiplier[EXTRUDERS] = ARRAY_BY_EXTRUDERS1(100);$/;"	v
extruder_offset	Marlin_main.cpp	/^float extruder_offset[][EXTRUDERS] = {$/;"	v
fanSpeedSoftPwm	temperature.cpp	/^  unsigned char fanSpeedSoftPwm[FAN_COUNT];$/;"	v
fanSpeeds	Marlin_main.cpp	/^int fanSpeeds[FAN_COUNT] = { 0 };$/;"	v
fan_speed	planner.h	/^    unsigned long fan_speed[FAN_COUNT];$/;"	m	struct:__anon1
fastDigitalRead	Sd2PinMap.h	/^  bool fastDigitalRead(uint8_t pin) {$/;"	f
fastDigitalWrite	Sd2PinMap.h	/^  void fastDigitalWrite(uint8_t pin, uint8_t value) {$/;"	f
fat16	SdVolume.h	/^  uint16_t fat16[256];$/;"	m	union:cache_t
fat32	SdVolume.h	/^  uint32_t fat32[128];$/;"	m	union:cache_t
fat32BackBootBlock	SdFatStructs.h	/^  uint16_t fat32BackBootBlock;$/;"	m	struct:fat32_boot
fat32FSInfo	SdFatStructs.h	/^  uint16_t fat32FSInfo;$/;"	m	struct:fat32_boot
fat32Flags	SdFatStructs.h	/^  uint16_t fat32Flags;$/;"	m	struct:fat32_boot
fat32Reserved	SdFatStructs.h	/^  uint8_t  fat32Reserved[12];$/;"	m	struct:fat32_boot
fat32RootCluster	SdFatStructs.h	/^  uint32_t fat32RootCluster;$/;"	m	struct:fat32_boot
fat32Version	SdFatStructs.h	/^  uint16_t fat32Version;$/;"	m	struct:fat32_boot
fat32_boot	SdFatStructs.h	/^struct fat32_boot {$/;"	s
fat32_boot_t	SdFatStructs.h	/^typedef struct fat32_boot fat32_boot_t;$/;"	t	typeref:struct:fat32_boot
fat32_fsinfo	SdFatStructs.h	/^struct fat32_fsinfo {$/;"	s
fat32_fsinfo_t	SdFatStructs.h	/^typedef struct fat32_fsinfo fat32_fsinfo_t;$/;"	t	typeref:struct:fat32_fsinfo
fatCount	SdFatStructs.h	/^  uint8_t  fatCount;$/;"	m	struct:fat32_boot
fatCount	SdFatStructs.h	/^  uint8_t  fatCount;$/;"	m	struct:fat_boot
fatCount	SdVolume.h	/^  uint8_t fatCount() const {return fatCount_;}$/;"	f	class:SdVolume
fatCount_	SdVolume.h	/^  uint8_t fatCount_;            \/\/ number of FATs on volume$/;"	m	class:SdVolume
fatGet	SdVolume.cpp	/^bool SdVolume::fatGet(uint32_t cluster, uint32_t* value) {$/;"	f	class:SdVolume
fatPut	SdVolume.cpp	/^bool SdVolume::fatPut(uint32_t cluster, uint32_t value) {$/;"	f	class:SdVolume
fatPutEOC	SdVolume.h	/^  bool fatPutEOC(uint32_t cluster) {$/;"	f	class:SdVolume
fatStartBlock	SdVolume.h	/^  uint32_t fatStartBlock() const {return fatStartBlock_;}$/;"	f	class:SdVolume
fatStartBlock_	SdVolume.h	/^  uint32_t fatStartBlock_;      \/\/ start block for first FAT$/;"	m	class:SdVolume
fatType	SdVolume.h	/^  uint8_t fatType() const {return fatType_;}$/;"	f	class:SdVolume
fatType_	SdVolume.h	/^  uint8_t fatType_;             \/\/ volume type (12, 16, OR 32)$/;"	m	class:SdVolume
fat_boot	SdFatStructs.h	/^struct fat_boot {$/;"	s
fat_boot_t	SdFatStructs.h	/^typedef struct fat_boot fat_boot_t;$/;"	t	typeref:struct:fat_boot
fbs	SdVolume.h	/^  fat_boot_t fbs;$/;"	m	union:cache_t
fbs32	SdVolume.h	/^  fat32_boot_t fbs32;$/;"	m	union:cache_t
feedrate	Marlin_main.cpp	/^static float feedrate = 300.0, saved_feedrate;$/;"	v	file:
feedrate_multiplier	Marlin_main.cpp	/^int feedrate_multiplier = 100; \/\/100->1 200->2$/;"	v
fgets	SdBaseFile.cpp	/^int16_t SdBaseFile::fgets(char* str, int16_t num, char* delim) {$/;"	f	class:SdBaseFile
filament_ran_out	Marlin_main.cpp	/^static bool filament_ran_out = false;$/;"	v	file:
filament_sensor	Marlin_main.cpp	/^bool filament_sensor = false;  \/\/M405 turns on filament_sensor control, M406 turns it off$/;"	v
filament_size	Marlin_main.cpp	/^float filament_size[EXTRUDERS] = ARRAY_BY_EXTRUDERS1(DEFAULT_NOMINAL_FILAMENT_DIA);$/;"	v
filament_width_meas	Marlin_main.cpp	/^float filament_width_meas = DEFAULT_MEASURED_FILAMENT_DIA; \/\/Stores the measured filament diameter$/;"	v
filament_width_nominal	Marlin_main.cpp	/^float filament_width_nominal = DEFAULT_NOMINAL_FILAMENT_DIA;  \/\/Set nominal filament width, can be changed with M404$/;"	v
file	cardreader.h	/^  SdFile file;$/;"	m	class:CardReader
fileSize	SdBaseFile.h	/^  uint32_t fileSize() const {return fileSize_;}$/;"	f	class:SdBaseFile
fileSize	SdFatStructs.h	/^  uint32_t fileSize;$/;"	m	struct:directoryEntry
fileSize_	SdBaseFile.h	/^  uint32_t  fileSize_;      \/\/ file size in bytes$/;"	m	class:SdBaseFile
fileSystemType	SdFatStructs.h	/^  char     fileSystemType[8];$/;"	m	struct:fat32_boot
fileSystemType	SdFatStructs.h	/^  char     fileSystemType[8];$/;"	m	struct:fat_boot
file_format	SdInfo.h	/^  unsigned char file_format : 2;$/;"	m	struct:CSDV1
file_format	SdInfo.h	/^  unsigned char file_format : 2;$/;"	m	struct:CSDV2
file_format_grp	SdInfo.h	/^  unsigned char file_format_grp : 1;$/;"	m	struct:CSDV1
file_format_grp	SdInfo.h	/^  unsigned char file_format_grp : 1;$/;"	m	struct:CSDV2
file_subcall_ctr	cardreader.h	/^  uint8_t file_subcall_ctr;$/;"	m	class:CardReader
filename	cardreader.h	/^  char filename[FILENAME_LENGTH], longFilename[LONG_FILENAME_LENGTH];$/;"	m	class:CardReader
filenameIsDir	cardreader.h	/^  bool saving, logging, sdprinting, cardOK, filenameIsDir;$/;"	m	class:CardReader
filepos_t	SdBaseFile.h	/^  filepos_t() : position(0), cluster(0) {}$/;"	f	struct:filepos_t
filepos_t	SdBaseFile.h	/^struct filepos_t {$/;"	s
filesize	cardreader.h	/^  uint32_t filesize;$/;"	m	class:CardReader
filespos	cardreader.h	/^  uint32_t filespos[SD_PROCEDURE_DEPTH];$/;"	m	class:CardReader
filwidth_delay_index1	Marlin_main.cpp	/^int filwidth_delay_index1 = 0;  \/\/index into ring buffer$/;"	v
filwidth_delay_index2	Marlin_main.cpp	/^int filwidth_delay_index2 = -1;  \/\/index into ring buffer - set to -1 on startup to indicate ring buffer needs to be initialized$/;"	v
finISR	servo.cpp	/^static void finISR(timer16_Sequence_t timer) {$/;"	f	file:
final_advance	planner.h	/^    volatile long final_advance;$/;"	m	struct:__anon1
final_advance	stepper.cpp	/^  static long advance_rate, advance, final_advance = 0;$/;"	v	file:
final_rate	planner.h	/^  unsigned long final_rate;                          \/\/ The minimal rate at exit$/;"	m	struct:__anon1
finishAndDisableSteppers	stepper.cpp	/^void finishAndDisableSteppers() {$/;"	f
firstCluster	SdBaseFile.h	/^  uint32_t firstCluster() const {return firstCluster_;}$/;"	f	class:SdBaseFile
firstClusterHigh	SdFatStructs.h	/^  uint16_t firstClusterHigh;$/;"	m	struct:directoryEntry
firstClusterLow	SdFatStructs.h	/^  uint16_t firstClusterLow;$/;"	m	struct:directoryEntry
firstClusterLow	SdFatStructs.h	/^  uint16_t firstClusterLow;$/;"	m	struct:directoryVFATEntry
firstCluster_	SdBaseFile.h	/^  uint32_t  firstCluster_;  \/\/ first cluster of file$/;"	m	class:SdBaseFile
firstSector	SdFatStructs.h	/^  uint32_t firstSector;$/;"	m	struct:partitionTable
flag	ultralcd_implementation_hitachi_HD44780.h	/^static int flag = 0;$/;"	v
flags_	SdBaseFile.h	/^  uint8_t   flags_;         \/\/ See above for definition of flags_ bits$/;"	m	class:SdBaseFile
flush	MarlinSerial.cpp	/^void MarlinSerial::flush() {$/;"	f	class:MarlinSerial
freeChain	SdVolume.cpp	/^bool SdVolume::freeChain(uint32_t cluster) {$/;"	f	class:SdVolume
freeClusterCount	SdVolume.cpp	/^int32_t SdVolume::freeClusterCount() {$/;"	f	class:SdVolume
freeCount	SdFatStructs.h	/^  uint32_t freeCount;$/;"	m	struct:fat32_fsinfo
freeMemory	Marlin_main.cpp	/^  int freeMemory() {$/;"	f
freeMemory	Marlin_main.cpp	/^int freeMemory() {$/;"	f
fsinfo	SdVolume.h	/^  fat32_fsinfo_t fsinfo;$/;"	m	union:cache_t
fstate_	SdBaseFile.h	/^  uint8_t   fstate_;        \/\/ error and eof indicator$/;"	m	class:SdBaseFile
ftostr12ns	ultralcd.cpp	/^char* ftostr12ns(const float& x) {$/;"	f
ftostr3	ultralcd.cpp	/^char *ftostr3(const float& x) {$/;"	f
ftostr31	ultralcd.cpp	/^char* ftostr31(const float& x) {$/;"	f
ftostr31ns	ultralcd.cpp	/^char* ftostr31ns(const float& x) {$/;"	f
ftostr32	ultralcd.cpp	/^char *ftostr32(const float& x) {$/;"	f
ftostr32sp	ultralcd.cpp	/^char* ftostr32sp(const float& x) {$/;"	f
ftostr43	ultralcd.cpp	/^char* ftostr43(const float& x, char plus\/*=' '*\/) {$/;"	f
ftostr4sign	ultralcd.cpp	/^char *ftostr4sign(const float& x) {$/;"	f
ftostr5	ultralcd.cpp	/^char* ftostr5(const float& x) {$/;"	f
ftostr51	ultralcd.cpp	/^char* ftostr51(const float& x) {$/;"	f
ftostr52	ultralcd.cpp	/^char* ftostr52(const float& x) {$/;"	f
g_uc_extruder_last_move	planner.cpp	/^uint8_t g_uc_extruder_last_move[EXTRUDERS] = { 0 };$/;"	v
gcode_G0_G1	Marlin_main.cpp	/^inline void gcode_G0_G1() {$/;"	f
gcode_G10_G11	Marlin_main.cpp	/^inline void gcode_G10_G11(bool doRetract = false) {$/;"	f
gcode_G28	Marlin_main.cpp	/^inline void gcode_G28() {$/;"	f
gcode_G29	Marlin_main.cpp	/^inline void gcode_G29() {$/;"	f
gcode_G2_G3	Marlin_main.cpp	/^inline void gcode_G2_G3(bool clockwise) {$/;"	f
gcode_G30	Marlin_main.cpp	/^inline void gcode_G30() {$/;"	f
gcode_G4	Marlin_main.cpp	/^inline void gcode_G4() {$/;"	f
gcode_G92	Marlin_main.cpp	/^inline void gcode_G92() {$/;"	f
gcode_LastN	Marlin_main.cpp	/^static long gcode_N, gcode_LastN, Stopped_gcode_LastN = 0;$/;"	v	file:
gcode_M0_M1	Marlin_main.cpp	/^inline void gcode_M0_M1() {$/;"	f
gcode_M100	M100_Free_Mem_Chk.cpp	/^void gcode_M100() {$/;"	f
gcode_M104	Marlin_main.cpp	/^inline void gcode_M104() {$/;"	f
gcode_M105	Marlin_main.cpp	/^inline void gcode_M105() {$/;"	f
gcode_M106	Marlin_main.cpp	/^inline void gcode_M106() {$/;"	f
gcode_M107	Marlin_main.cpp	/^inline void gcode_M107() {$/;"	f
gcode_M109	Marlin_main.cpp	/^inline void gcode_M109() {$/;"	f
gcode_M110	Marlin_main.cpp	/^inline void gcode_M110() {$/;"	f
gcode_M111	Marlin_main.cpp	/^inline void gcode_M111() {$/;"	f
gcode_M112	Marlin_main.cpp	/^inline void gcode_M112() {$/;"	f
gcode_M113	Marlin_main.cpp	/^inline void gcode_M113() {$/;"	f
gcode_M114	Marlin_main.cpp	/^inline void gcode_M114() {$/;"	f
gcode_M115	Marlin_main.cpp	/^inline void gcode_M115() {$/;"	f
gcode_M117	Marlin_main.cpp	/^inline void gcode_M117() {$/;"	f
gcode_M119	Marlin_main.cpp	/^inline void gcode_M119() {$/;"	f
gcode_M120	Marlin_main.cpp	/^inline void gcode_M120() {$/;"	f
gcode_M121	Marlin_main.cpp	/^inline void gcode_M121() {$/;"	f
gcode_M126	Marlin_main.cpp	/^inline void gcode_M126() {$/;"	f
gcode_M127	Marlin_main.cpp	/^inline void gcode_M127() {$/;"	f
gcode_M128	Marlin_main.cpp	/^inline void gcode_M128() {$/;"	f
gcode_M129	Marlin_main.cpp	/^inline void gcode_M129() {$/;"	f
gcode_M140	Marlin_main.cpp	/^inline void gcode_M140() {$/;"	f
gcode_M145	Marlin_main.cpp	/^inline void gcode_M145() {$/;"	f
gcode_M150	Marlin_main.cpp	/^inline void gcode_M150() {$/;"	f
gcode_M155	Marlin_main.cpp	/^inline void gcode_M155() {$/;"	f
gcode_M156	Marlin_main.cpp	/^inline void gcode_M156() {$/;"	f
gcode_M17	Marlin_main.cpp	/^inline void gcode_M17() {$/;"	f
gcode_M18_M84	Marlin_main.cpp	/^inline void gcode_M18_M84() {$/;"	f
gcode_M190	Marlin_main.cpp	/^inline void gcode_M190() {$/;"	f
gcode_M20	Marlin_main.cpp	/^inline void gcode_M20() {$/;"	f
gcode_M200	Marlin_main.cpp	/^inline void gcode_M200() {$/;"	f
gcode_M201	Marlin_main.cpp	/^inline void gcode_M201() {$/;"	f
gcode_M203	Marlin_main.cpp	/^inline void gcode_M203() {$/;"	f
gcode_M204	Marlin_main.cpp	/^inline void gcode_M204() {$/;"	f
gcode_M205	Marlin_main.cpp	/^inline void gcode_M205() {$/;"	f
gcode_M206	Marlin_main.cpp	/^inline void gcode_M206() {$/;"	f
gcode_M207	Marlin_main.cpp	/^inline void gcode_M207() {$/;"	f
gcode_M208	Marlin_main.cpp	/^inline void gcode_M208() {$/;"	f
gcode_M209	Marlin_main.cpp	/^inline void gcode_M209() {$/;"	f
gcode_M21	Marlin_main.cpp	/^inline void gcode_M21() {$/;"	f
gcode_M218	Marlin_main.cpp	/^inline void gcode_M218() {$/;"	f
gcode_M22	Marlin_main.cpp	/^inline void gcode_M22() {$/;"	f
gcode_M220	Marlin_main.cpp	/^inline void gcode_M220() {$/;"	f
gcode_M221	Marlin_main.cpp	/^inline void gcode_M221() {$/;"	f
gcode_M226	Marlin_main.cpp	/^inline void gcode_M226() {$/;"	f
gcode_M23	Marlin_main.cpp	/^inline void gcode_M23() {$/;"	f
gcode_M24	Marlin_main.cpp	/^inline void gcode_M24() {$/;"	f
gcode_M240	Marlin_main.cpp	/^inline void gcode_M240() {$/;"	f
gcode_M25	Marlin_main.cpp	/^inline void gcode_M25() {$/;"	f
gcode_M250	Marlin_main.cpp	/^inline void gcode_M250() {$/;"	f
gcode_M26	Marlin_main.cpp	/^inline void gcode_M26() {$/;"	f
gcode_M27	Marlin_main.cpp	/^inline void gcode_M27() {$/;"	f
gcode_M28	Marlin_main.cpp	/^inline void gcode_M28() {$/;"	f
gcode_M280	Marlin_main.cpp	/^inline void gcode_M280() {$/;"	f
gcode_M29	Marlin_main.cpp	/^inline void gcode_M29() {$/;"	f
gcode_M30	Marlin_main.cpp	/^inline void gcode_M30() {$/;"	f
gcode_M300	Marlin_main.cpp	/^inline void gcode_M300() {$/;"	f
gcode_M301	Marlin_main.cpp	/^inline void gcode_M301() {$/;"	f
gcode_M302	Marlin_main.cpp	/^inline void gcode_M302() {$/;"	f
gcode_M303	Marlin_main.cpp	/^inline void gcode_M303() {$/;"	f
gcode_M304	Marlin_main.cpp	/^inline void gcode_M304() {$/;"	f
gcode_M31	Marlin_main.cpp	/^inline void gcode_M31() {$/;"	f
gcode_M32	Marlin_main.cpp	/^inline void gcode_M32() {$/;"	f
gcode_M33	Marlin_main.cpp	/^inline void gcode_M33() {$/;"	f
gcode_M350	Marlin_main.cpp	/^inline void gcode_M350() {$/;"	f
gcode_M351	Marlin_main.cpp	/^inline void gcode_M351() {$/;"	f
gcode_M360	Marlin_main.cpp	/^inline bool gcode_M360() {$/;"	f
gcode_M361	Marlin_main.cpp	/^inline bool gcode_M361() {$/;"	f
gcode_M362	Marlin_main.cpp	/^inline bool gcode_M362() {$/;"	f
gcode_M363	Marlin_main.cpp	/^inline bool gcode_M363() {$/;"	f
gcode_M364	Marlin_main.cpp	/^inline bool gcode_M364() {$/;"	f
gcode_M365	Marlin_main.cpp	/^inline void gcode_M365() {$/;"	f
gcode_M380	Marlin_main.cpp	/^inline void gcode_M380() {$/;"	f
gcode_M381	Marlin_main.cpp	/^inline void gcode_M381() {$/;"	f
gcode_M400	Marlin_main.cpp	/^inline void gcode_M400() {$/;"	f
gcode_M401	Marlin_main.cpp	/^inline void gcode_M401() {$/;"	f
gcode_M402	Marlin_main.cpp	/^inline void gcode_M402() {$/;"	f
gcode_M404	Marlin_main.cpp	/^inline void gcode_M404() {$/;"	f
gcode_M405	Marlin_main.cpp	/^inline void gcode_M405() {$/;"	f
gcode_M406	Marlin_main.cpp	/^inline void gcode_M406() {$/;"	f
gcode_M407	Marlin_main.cpp	/^inline void gcode_M407() {$/;"	f
gcode_M410	Marlin_main.cpp	/^inline void gcode_M410() {$/;"	f
gcode_M42	Marlin_main.cpp	/^inline void gcode_M42() {$/;"	f
gcode_M420	Marlin_main.cpp	/^inline void gcode_M420() {$/;"	f
gcode_M421	Marlin_main.cpp	/^inline void gcode_M421() {$/;"	f
gcode_M428	Marlin_main.cpp	/^inline void gcode_M428() {$/;"	f
gcode_M48	Marlin_main.cpp	/^inline void gcode_M48() {$/;"	f
gcode_M500	Marlin_main.cpp	/^inline void gcode_M500() {$/;"	f
gcode_M501	Marlin_main.cpp	/^inline void gcode_M501() {$/;"	f
gcode_M502	Marlin_main.cpp	/^inline void gcode_M502() {$/;"	f
gcode_M503	Marlin_main.cpp	/^inline void gcode_M503() {$/;"	f
gcode_M540	Marlin_main.cpp	/^inline void gcode_M540() {$/;"	f
gcode_M600	Marlin_main.cpp	/^inline void gcode_M600() {$/;"	f
gcode_M602	Marlin_main.cpp	/^inline void gcode_M602() {  \/\/ puase move$/;"	f
gcode_M603	Marlin_main.cpp	/^inline void gcode_M603() {  \/\/ resume$/;"	f
gcode_M605	Marlin_main.cpp	/^inline void gcode_M605() {$/;"	f
gcode_M665	Marlin_main.cpp	/^inline void gcode_M665() {$/;"	f
gcode_M666	Marlin_main.cpp	/^inline void gcode_M666() {$/;"	f
gcode_M75	Marlin_main.cpp	/^inline void gcode_M75() {$/;"	f
gcode_M76	Marlin_main.cpp	/^inline void gcode_M76() {$/;"	f
gcode_M77	Marlin_main.cpp	/^inline void gcode_M77() {$/;"	f
gcode_M80	Marlin_main.cpp	/^inline void gcode_M80() {$/;"	f
gcode_M81	Marlin_main.cpp	/^inline void gcode_M81() {$/;"	f
gcode_M82	Marlin_main.cpp	/^inline void gcode_M82() {$/;"	f
gcode_M83	Marlin_main.cpp	/^inline void gcode_M83() {$/;"	f
gcode_M85	Marlin_main.cpp	/^inline void gcode_M85() {$/;"	f
gcode_M907	Marlin_main.cpp	/^inline void gcode_M907() {$/;"	f
gcode_M908	Marlin_main.cpp	/^inline void gcode_M908() {$/;"	f
gcode_M909	Marlin_main.cpp	/^inline void gcode_M909() {$/;"	f
gcode_M910	Marlin_main.cpp	/^inline void gcode_M910() {$/;"	f
gcode_M92	Marlin_main.cpp	/^inline void gcode_M92() {$/;"	f
gcode_M928	Marlin_main.cpp	/^inline void gcode_M928() {$/;"	f
gcode_M999	Marlin_main.cpp	/^inline void gcode_M999() {$/;"	f
gcode_N	Marlin_main.cpp	/^static long gcode_N, gcode_LastN, Stopped_gcode_LastN = 0;$/;"	v	file:
gcode_SET_Z_PROBE_OFFSET	Marlin_main.cpp	/^inline void gcode_SET_Z_PROBE_OFFSET() {$/;"	f
gcode_T	Marlin_main.cpp	/^inline void gcode_T(uint8_t tmp_extruder) {$/;"	f
gcode_get_destination	Marlin_main.cpp	/^void gcode_get_destination() {$/;"	f
gcode_line_error	Marlin_main.cpp	/^void gcode_line_error(const char* err, bool doFlush = true) {$/;"	f
get	cardreader.h	/^  FORCE_INLINE int16_t get() { sdpos = file.curPosition(); return (int16_t)file.read(); }$/;"	f	class:CardReader
getAbsFilename	cardreader.cpp	/^void CardReader::getAbsFilename(char *t) {$/;"	f	class:CardReader
getFilename	SdBaseFile.cpp	/^bool SdBaseFile::getFilename(char* name) {$/;"	f	class:SdBaseFile
getHeaterPower	temperature.cpp	/^int getHeaterPower(int heater) {$/;"	f
getHighESpeed	planner.cpp	/^  void getHighESpeed() {$/;"	f
getPinMode	Sd2PinMap.h	/^  bool getPinMode(uint8_t pin) {$/;"	f
getStatus	cardreader.cpp	/^void CardReader::getStatus() {$/;"	f	class:CardReader
getWorkDirName	cardreader.h	/^  FORCE_INLINE char* getWorkDirName() { workDir.getFilename(filename); return filename; }$/;"	f	class:CardReader
get_available_commands	Marlin_main.cpp	/^void get_available_commands() {$/;"	f
get_length	vector_3.cpp	/^float vector_3::get_length() { return sqrt((x * x) + (y * y) + (z * z)); }$/;"	f	class:vector_3
get_normal	vector_3.cpp	/^vector_3 vector_3::get_normal() {$/;"	f	class:vector_3
get_pid_output	temperature.cpp	/^float get_pid_output(int e) {$/;"	f
get_pid_output_bed	temperature.cpp	/^  float get_pid_output_bed() {$/;"	f
get_sdcard_commands	Marlin_main.cpp	/^inline void get_sdcard_commands() {$/;"	f
get_serial_commands	Marlin_main.cpp	/^inline void get_serial_commands() {$/;"	f
get_target_extruder_from_command	Marlin_main.cpp	/^bool get_target_extruder_from_command(int code) {$/;"	f
getfilename	cardreader.cpp	/^void CardReader::getfilename(uint16_t nr, const char * const match\/*=NULL*\/) {$/;"	f	class:CardReader
getnrfilenames	cardreader.cpp	/^uint16_t CardReader::getnrfilenames() {$/;"	f	class:CardReader
getpos	SdBaseFile.cpp	/^void SdBaseFile::getpos(filepos_t* pos) {$/;"	f	class:SdBaseFile
handle_filament_runout	Marlin_main.cpp	/^void handle_filament_runout() {$/;"	f
handle_interrupts	servo.cpp	/^static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t* TCNTn, volatile uint16_t* OCRnA) {$/;"	f	file:
handle_status_leds	Marlin_main.cpp	/^void handle_status_leds(void) {$/;"	f
head	MarlinSerial.h	/^  volatile uint8_t head;$/;"	m	struct:ring_buffer
headCount	SdFatStructs.h	/^  uint16_t headCount;$/;"	m	struct:fat32_boot
headCount	SdFatStructs.h	/^  uint16_t headCount;$/;"	m	struct:fat_boot
heater_maxtemp	ultralcd.cpp	/^const int heater_maxtemp[EXTRUDERS] = ARRAY_BY_EXTRUDERS(HEATER_0_MAXTEMP, HEATER_1_MAXTEMP, HEATER_2_MAXTEMP, HEATER_3_MAXTEMP);$/;"	v
heater_ttbl_map	temperature.cpp	/^  static void* heater_ttbl_map[2] = {(void*)HEATER_0_TEMPTABLE, (void*)HEATER_1_TEMPTABLE };$/;"	v	file:
heater_ttbl_map	temperature.cpp	/^  static void* heater_ttbl_map[EXTRUDERS] = ARRAY_BY_EXTRUDERS((void*)HEATER_0_TEMPTABLE, (void*)HEATER_1_TEMPTABLE, (void*)HEATER_2_TEMPTABLE, (void*)HEATER_3_TEMPTABLE);$/;"	v	file:
heater_ttbllen_map	temperature.cpp	/^  static uint8_t heater_ttbllen_map[2] = { HEATER_0_TEMPTABLE_LEN, HEATER_1_TEMPTABLE_LEN };$/;"	v	file:
heater_ttbllen_map	temperature.cpp	/^  static uint8_t heater_ttbllen_map[EXTRUDERS] = ARRAY_BY_EXTRUDERS(HEATER_0_TEMPTABLE_LEN, HEATER_1_TEMPTABLE_LEN, HEATER_2_TEMPTABLE_LEN, HEATER_3_TEMPTABLE_LEN);$/;"	v	file:
hidddenSectors	SdFatStructs.h	/^  uint32_t hidddenSectors;$/;"	m	struct:fat32_boot
hidddenSectors	SdFatStructs.h	/^  uint32_t hidddenSectors;$/;"	m	struct:fat_boot
home_all_axis	Marlin_main.cpp	/^static bool home_all_axis = true;$/;"	v	file:
home_offset	Marlin_main.cpp	/^float home_offset[3] = { 0 };$/;"	v
homeaxis	Marlin_main.cpp	/^static void homeaxis(AxisEnum axis) {$/;"	f	file:
homing_feedrate	Marlin_main.cpp	/^const float homing_feedrate[] = HOMING_FEEDRATE;$/;"	v
host_keepalive	Marlin_main.cpp	/^void host_keepalive() {$/;"	f
host_keepalive	Marlin_main.cpp	493;"	d	file:
host_keepalive_interval	Marlin_main.cpp	/^uint8_t host_keepalive_interval = DEFAULT_KEEPALIVE_INTERVAL;$/;"	v
hotend_menu_flag	ultralcd.cpp	/^static int hotend_menu_flag;$/;"	v	file:
how_many_E5s_are_here	M100_Free_Mem_Chk.cpp	/^int how_many_E5s_are_here(unsigned char* p) {$/;"	f
i2c	Marlin_main.cpp	/^TWIBus i2c;$/;"	v
i4_min	qr_solve.cpp	/^int i4_min(int i1, int i2)$/;"	f
iTerm	temperature.cpp	/^  static float iTerm[EXTRUDERS];$/;"	v	file:
iTerm_bed	temperature.cpp	/^  static float iTerm_bed;$/;"	v	file:
idle	Marlin_main.cpp	/^void idle($/;"	f
ignore_click	ultralcd.cpp	/^bool ignore_click = false;$/;"	v
inactive_extruder_x_pos	Marlin_main.cpp	/^static float inactive_extruder_x_pos = X2_MAX_POS; \/\/ used in mode 0 & 1$/;"	v	file:
init	Sd2Card.cpp	/^bool Sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin) {$/;"	f	class:Sd2Card
init	SdVolume.cpp	/^bool SdVolume::init(Sd2Card* dev, uint8_t part) {$/;"	f	class:SdVolume
init	SdVolume.h	/^  bool init(Sd2Card& dev) {return init(&dev);}  \/\/ NOLINT$/;"	f	class:SdVolume
init	SdVolume.h	/^  bool init(Sd2Card& dev, uint8_t part) {  \/\/ NOLINT$/;"	f	class:SdVolume
init	SdVolume.h	/^  bool init(Sd2Card* dev) { return init(dev, 1) ? true : init(dev, 0);}$/;"	f	class:SdVolume
initISR	servo.cpp	/^static void initISR(timer16_Sequence_t timer) {$/;"	f	file:
initial_advance	planner.h	/^    volatile long initial_advance;$/;"	m	struct:__anon1
initial_rate	planner.h	/^  unsigned long initial_rate;                        \/\/ The jerk-adjusted step rate at start of block$/;"	m	struct:__anon1
initsd	cardreader.cpp	/^void CardReader::initsd() {$/;"	f	class:CardReader
intersection_distance	planner.cpp	/^FORCE_INLINE float intersection_distance(float initial_rate, float final_rate, float acceleration, float distance) {$/;"	f
isActive	servo.h	/^  uint8_t isActive   : 1 ;            \/\/ true if this channel is enabled, pin not pulsed if false$/;"	m	struct:__anon3
isCoolingBed	temperature.h	/^FORCE_INLINE bool isCoolingBed() { return target_temperature_bed < current_temperature_bed; }$/;"	f
isCoolingHotend	temperature.h	/^FORCE_INLINE bool isCoolingHotend(uint8_t extruder) { return target_temperature[extruder] < current_temperature[extruder]; }$/;"	f
isDir	SdBaseFile.h	/^  bool isDir() const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}$/;"	f	class:SdBaseFile
isEOC	SdVolume.h	/^  bool isEOC(uint32_t cluster) const {$/;"	f	class:SdVolume
isFile	SdBaseFile.h	/^  bool isFile() const {return type_ == FAT_FILE_TYPE_NORMAL;}$/;"	f	class:SdBaseFile
isFileOpen	cardreader.h	/^  FORCE_INLINE bool isFileOpen() { return file.isOpen(); }$/;"	f	class:CardReader
isHeatingBed	temperature.h	/^FORCE_INLINE bool isHeatingBed() { return target_temperature_bed > current_temperature_bed; }$/;"	f
isHeatingHotend	temperature.h	/^FORCE_INLINE bool isHeatingHotend(uint8_t extruder) { return target_temperature[extruder] > current_temperature[extruder]; }$/;"	f
isOpen	SdBaseFile.h	/^  bool isOpen() const {return type_ != FAT_FILE_TYPE_CLOSED;}$/;"	f	class:SdBaseFile
isPaused	stopwatch.cpp	/^bool Stopwatch::isPaused() {$/;"	f	class:Stopwatch
isRoot	SdBaseFile.h	/^  bool isRoot() const {$/;"	f	class:SdBaseFile
isRunning	stopwatch.cpp	/^bool Stopwatch::isRunning() {$/;"	f	class:Stopwatch
isSubDir	SdBaseFile.h	/^  bool isSubDir() const {return type_ == FAT_FILE_TYPE_SUBDIR;}$/;"	f	class:SdBaseFile
isTimerActive	servo.cpp	/^static boolean isTimerActive(timer16_Sequence_t timer) {$/;"	f	file:
itostr2	ultralcd.cpp	/^char* itostr2(const uint8_t& x) {$/;"	f
itostr3	ultralcd.cpp	/^char* itostr3(const int& x) {$/;"	f
itostr3left	ultralcd.cpp	/^char* itostr3left(const int& x) {$/;"	f
itostr3sign	ultralcd.cpp	/^char* itostr3sign(const int& x) {$/;"	f
itostr4	ultralcd.cpp	/^char* itostr4(const int& x) {$/;"	f
itostr4sign	ultralcd.cpp	/^char *itostr4sign(const int& x) {$/;"	f
jump	SdFatStructs.h	/^  uint8_t jump[3];$/;"	m	struct:fat32_boot
jump	SdFatStructs.h	/^  uint8_t jump[3];$/;"	m	struct:fat_boot
junction_deviation	planner.cpp	/^float junction_deviation = 0.02;$/;"	v
kill	Marlin_main.cpp	/^void kill(const char* lcd_msg) {$/;"	f
lastAccessDate	SdFatStructs.h	/^  uint16_t lastAccessDate;$/;"	m	struct:directoryEntry
lastEncoderBits	ultralcd.cpp	/^uint8_t lastEncoderBits;$/;"	v
lastEncoderMovementMillis	ultralcd.cpp	/^int32_t lastEncoderMovementMillis;$/;"	v
lastWriteDate	SdFatStructs.h	/^  uint16_t lastWriteDate;$/;"	m	struct:directoryEntry
lastWriteTime	SdFatStructs.h	/^  uint16_t lastWriteTime;$/;"	m	struct:directoryEntry
last_position	temperature.cpp	/^    static long last_position[EXTRUDERS];$/;"	v	file:
lcdDrawUpdate	ultralcd.cpp	/^uint8_t lcdDrawUpdate = LCDVIEW_CLEAR_CALL_REDRAW; \/\/ Set when the LCD needs to draw, decrements after every draw. Set to 2 in LCD routines so the LCD gets at least 1 full redraw (first redraw is partial)$/;"	v
lcd_Option	ultralcd.cpp	/^static void lcd_Option(){$/;"	f	file:
lcd_Show_Info	ultralcd.cpp	/^static void lcd_Show_Info() {$/;"	f	file:
lcd_autostart_sd	ultralcd.cpp	/^static void lcd_autostart_sd() {$/;"	f	file:
lcd_babystep_x	ultralcd.cpp	/^static void lcd_babystep_x() {$/;"	f	file:
lcd_babystep_y	ultralcd.cpp	/^static void lcd_babystep_y() {$/;"	f	file:
lcd_babystep_z	ultralcd.cpp	/^static void lcd_babystep_z() {$/;"	f	file:
lcd_blink	ultralcd.cpp	/^bool lcd_blink() {$/;"	f
lcd_buttons_update	ultralcd.cpp	/^void lcd_buttons_update() {$/;"	f
lcd_buttons_update	ultralcd.h	/^    FORCE_INLINE void lcd_buttons_update() {}$/;"	f
lcd_buttons_update	ultralcd.h	/^  FORCE_INLINE void lcd_buttons_update() {}$/;"	f
lcd_buzz	ultralcd.cpp	/^void lcd_buzz(long duration, uint16_t freq) { \/\/ called from buzz() in Marlin_main.cpp where lcd is unknown$/;"	f
lcd_cancel	ultralcd.cpp	/^static void lcd_cancel(bool feedback = false) {$/;"	f	file:
lcd_clicked	ultralcd.cpp	/^bool lcd_clicked() {$/;"	f
lcd_control_menu	ultralcd.cpp	/^static void lcd_control_menu() {$/;"	f	file:
lcd_control_motion_menu	ultralcd.cpp	/^static void lcd_control_motion_menu() {$/;"	f	file:
lcd_control_retract_menu	ultralcd.cpp	/^static void lcd_control_retract_menu() {$/;"	f	file:
lcd_control_temperature_menu	ultralcd.cpp	/^static void lcd_control_temperature_menu() {$/;"	f	file:
lcd_control_temperature_preheat_abs_settings_menu	ultralcd.cpp	/^static void lcd_control_temperature_preheat_abs_settings_menu() {$/;"	f	file:
lcd_control_temperature_preheat_pla_settings_menu	ultralcd.cpp	/^static void lcd_control_temperature_preheat_pla_settings_menu() {$/;"	f	file:
lcd_cooldown	ultralcd.cpp	/^void lcd_cooldown() {$/;"	f
lcd_delta_calibrate_menu	ultralcd.cpp	/^static void lcd_delta_calibrate_menu() {$/;"	f	file:
lcd_detected	ultralcd.cpp	/^bool lcd_detected(void) {$/;"	f
lcd_detected	ultralcd.h	/^  FORCE_INLINE bool lcd_detected(void) { return true; }$/;"	f
lcd_do_filamentchang	ultralcd.cpp	/^static void lcd_do_filamentchang() {$/;"	f	file:
lcd_erase_line	ultralcd_implementation_hitachi_HD44780.h	/^  void lcd_erase_line(int line) {$/;"	f
lcd_finishstatus	ultralcd.cpp	/^void lcd_finishstatus(bool persist = false) {$/;"	f
lcd_goto_Z0	ultralcd.cpp	/^static void lcd_goto_Z0() {$/;"	f	file:
lcd_goto_menu	ultralcd.cpp	/^static void lcd_goto_menu(menuFunc_t menu, const bool feedback = false, const uint32_t encoder = 0) {$/;"	f	file:
lcd_goto_previous_menu	ultralcd.cpp	/^static void lcd_goto_previous_menu(bool feedback = false) {$/;"	f	file:
lcd_hasstatus	ultralcd.cpp	/^bool lcd_hasstatus() {$/;"	f
lcd_hasstatus	ultralcd.h	/^  FORCE_INLINE bool lcd_hasstatus() { return false; }$/;"	f
lcd_ignore_click	ultralcd.cpp	/^void lcd_ignore_click(bool b) {$/;"	f
lcd_implementation_clear	ultralcd_implementation_hitachi_HD44780.h	/^static void lcd_implementation_clear() { lcd.clear(); }$/;"	f
lcd_implementation_drawedit	ultralcd_implementation_hitachi_HD44780.h	/^void lcd_implementation_drawedit(const char* pstr, const char* value=NULL) {$/;"	f
lcd_implementation_drawedit_for_z_offset	ultralcd_implementation_hitachi_HD44780.h	/^void lcd_implementation_drawedit_for_z_offset(const char* pstr, const char* value=NULL) {$/;"	f
lcd_implementation_drawmenu_back	ultralcd_implementation_hitachi_HD44780.h	1079;"	d
lcd_implementation_drawmenu_cancel	ultralcd_implementation_hitachi_HD44780.h	1078;"	d
lcd_implementation_drawmenu_function	ultralcd_implementation_hitachi_HD44780.h	1082;"	d
lcd_implementation_drawmenu_gcode	ultralcd_implementation_hitachi_HD44780.h	1081;"	d
lcd_implementation_drawmenu_generic	ultralcd_implementation_hitachi_HD44780.h	/^static void lcd_implementation_drawmenu_generic(bool sel, uint8_t row, const char* pstr, char pre_char, char post_char) {$/;"	f
lcd_implementation_drawmenu_sd	ultralcd_implementation_hitachi_HD44780.h	/^  static void lcd_implementation_drawmenu_sd(bool sel, uint8_t row, const char* pstr, const char* filename, char* longFilename, uint8_t concat, char post_char) {$/;"	f
lcd_implementation_drawmenu_sddirectory	ultralcd_implementation_hitachi_HD44780.h	/^  static void lcd_implementation_drawmenu_sddirectory(bool sel, uint8_t row, const char* pstr, const char* filename, char* longFilename) {$/;"	f
lcd_implementation_drawmenu_sdfile	ultralcd_implementation_hitachi_HD44780.h	/^  static void lcd_implementation_drawmenu_sdfile(bool sel, uint8_t row, const char* pstr, const char* filename, char* longFilename) {$/;"	f
lcd_implementation_drawmenu_setting_edit_bool	ultralcd_implementation_hitachi_HD44780.h	990;"	d
lcd_implementation_drawmenu_setting_edit_callback_bool	ultralcd_implementation_hitachi_HD44780.h	1001;"	d
lcd_implementation_drawmenu_setting_edit_callback_float3	ultralcd_implementation_hitachi_HD44780.h	994;"	d
lcd_implementation_drawmenu_setting_edit_callback_float32	ultralcd_implementation_hitachi_HD44780.h	995;"	d
lcd_implementation_drawmenu_setting_edit_callback_float43	ultralcd_implementation_hitachi_HD44780.h	996;"	d
lcd_implementation_drawmenu_setting_edit_callback_float5	ultralcd_implementation_hitachi_HD44780.h	997;"	d
lcd_implementation_drawmenu_setting_edit_callback_float51	ultralcd_implementation_hitachi_HD44780.h	999;"	d
lcd_implementation_drawmenu_setting_edit_callback_float52	ultralcd_implementation_hitachi_HD44780.h	998;"	d
lcd_implementation_drawmenu_setting_edit_callback_int3	ultralcd_implementation_hitachi_HD44780.h	993;"	d
lcd_implementation_drawmenu_setting_edit_callback_long5	ultralcd_implementation_hitachi_HD44780.h	1000;"	d
lcd_implementation_drawmenu_setting_edit_float3	ultralcd_implementation_hitachi_HD44780.h	983;"	d
lcd_implementation_drawmenu_setting_edit_float32	ultralcd_implementation_hitachi_HD44780.h	984;"	d
lcd_implementation_drawmenu_setting_edit_float43	ultralcd_implementation_hitachi_HD44780.h	985;"	d
lcd_implementation_drawmenu_setting_edit_float5	ultralcd_implementation_hitachi_HD44780.h	986;"	d
lcd_implementation_drawmenu_setting_edit_float51	ultralcd_implementation_hitachi_HD44780.h	988;"	d
lcd_implementation_drawmenu_setting_edit_float52	ultralcd_implementation_hitachi_HD44780.h	987;"	d
lcd_implementation_drawmenu_setting_edit_generic	ultralcd_implementation_hitachi_HD44780.h	/^static void lcd_implementation_drawmenu_setting_edit_generic(bool sel, uint8_t row, const char* pstr, char pre_char, char* data) {$/;"	f
lcd_implementation_drawmenu_setting_edit_generic_P	ultralcd_implementation_hitachi_HD44780.h	/^static void lcd_implementation_drawmenu_setting_edit_generic_P(bool sel, uint8_t row, const char* pstr, char pre_char, const char* data) {$/;"	f
lcd_implementation_drawmenu_setting_edit_int3	ultralcd_implementation_hitachi_HD44780.h	982;"	d
lcd_implementation_drawmenu_setting_edit_long5	ultralcd_implementation_hitachi_HD44780.h	989;"	d
lcd_implementation_drawmenu_submenu	ultralcd_implementation_hitachi_HD44780.h	1080;"	d
lcd_implementation_init	ultralcd_implementation_hitachi_HD44780.h	/^static void lcd_implementation_init($/;"	f
lcd_implementation_read_slow_buttons	ultralcd_implementation_hitachi_HD44780.h	/^  static uint8_t lcd_implementation_read_slow_buttons() {$/;"	f
lcd_implementation_status_screen	ultralcd_implementation_hitachi_HD44780.h	/^static void lcd_implementation_status_screen() {$/;"	f
lcd_implementation_update_indicators	ultralcd_implementation_hitachi_HD44780.h	/^  static void lcd_implementation_update_indicators() {$/;"	f
lcd_init	ultralcd.cpp	/^void lcd_init() {$/;"	f
lcd_init	ultralcd.h	/^  FORCE_INLINE void lcd_init() {}$/;"	f
lcd_kill	ultralcd.cpp	/^static void lcd_kill() {$/;"	f	file:
lcd_level_bed	ultralcd.cpp	/^static void lcd_level_bed() {$/;"	f	file:
lcd_main_menu	ultralcd.cpp	/^static void lcd_main_menu() {$/;"	f	file:
lcd_move_e	ultralcd.cpp	/^static void lcd_move_e($/;"	f	file:
lcd_move_e0	ultralcd.cpp	/^static void lcd_move_e0() {$/;"	f	file:
lcd_move_e1	ultralcd.cpp	/^static void lcd_move_e1() {$/;"	f	file:
lcd_move_e2	ultralcd.cpp	/^static void lcd_move_e2() {$/;"	f	file:
lcd_move_e3	ultralcd.cpp	/^static void lcd_move_e3() {$/;"	f	file:
lcd_move_menu	ultralcd.cpp	/^static void lcd_move_menu() {$/;"	f	file:
lcd_move_menu_01mm	ultralcd.cpp	/^static void lcd_move_menu_01mm() {$/;"	f	file:
lcd_move_menu_10mm	ultralcd.cpp	/^static void lcd_move_menu_10mm() {$/;"	f	file:
lcd_move_menu_1mm	ultralcd.cpp	/^static void lcd_move_menu_1mm() {$/;"	f	file:
lcd_move_x	ultralcd.cpp	/^static void lcd_move_x() {$/;"	f	file:
lcd_move_y	ultralcd.cpp	/^static void lcd_move_y() {$/;"	f	file:
lcd_move_z	ultralcd.cpp	/^static void lcd_move_z() {$/;"	f	file:
lcd_preheat_abs0	ultralcd.cpp	/^void lcd_preheat_abs0() {$/;"	f
lcd_preheat_abs0123	ultralcd.cpp	/^void lcd_preheat_abs0123() {$/;"	f
lcd_preheat_abs1	ultralcd.cpp	/^void lcd_preheat_abs1() {$/;"	f
lcd_preheat_abs2	ultralcd.cpp	/^void lcd_preheat_abs2() {$/;"	f
lcd_preheat_abs3	ultralcd.cpp	/^void lcd_preheat_abs3() {$/;"	f
lcd_preheat_abs_bedonly	ultralcd.cpp	/^void lcd_preheat_abs_bedonly() {$/;"	f
lcd_preheat_abs_menu	ultralcd.cpp	/^static void lcd_preheat_abs_menu() {$/;"	f	file:
lcd_preheat_pla0	ultralcd.cpp	/^void lcd_preheat_pla0() {$/;"	f
lcd_preheat_pla0123	ultralcd.cpp	/^void lcd_preheat_pla0123() {$/;"	f
lcd_preheat_pla1	ultralcd.cpp	/^void lcd_preheat_pla1() {$/;"	f
lcd_preheat_pla2	ultralcd.cpp	/^void lcd_preheat_pla2() {$/;"	f
lcd_preheat_pla3	ultralcd.cpp	/^void lcd_preheat_pla3() {$/;"	f
lcd_preheat_pla_bedonly	ultralcd.cpp	/^void lcd_preheat_pla_bedonly() {$/;"	f
lcd_preheat_pla_menu	ultralcd.cpp	/^static void lcd_preheat_pla_menu() {$/;"	f	file:
lcd_prepare_menu	ultralcd.cpp	/^static void lcd_prepare_menu() {$/;"	f	file:
lcd_print	ultralcd_implementation_hitachi_HD44780.h	/^char lcd_print(const char* str) {$/;"	f
lcd_print	ultralcd_implementation_hitachi_HD44780.h	/^unsigned lcd_print(char c) { return charset_mapper(c); }$/;"	f
lcd_printPGM	ultralcd_implementation_hitachi_HD44780.h	/^char lcd_printPGM(const char* str) {$/;"	f
lcd_quick_feedback	ultralcd.cpp	/^void lcd_quick_feedback() {$/;"	f
lcd_reset_alert_level	ultralcd.cpp	/^void lcd_reset_alert_level() {$/;"	f
lcd_reset_alert_level	ultralcd.h	/^  FORCE_INLINE void lcd_reset_alert_level() {}$/;"	f
lcd_return_to_status	ultralcd.cpp	/^static void lcd_return_to_status() {$/;"	f	file:
lcd_save_previous_menu	ultralcd.cpp	/^inline void lcd_save_previous_menu() {$/;"	f
lcd_scroll	ultralcd_implementation_hitachi_HD44780.h	/^  void lcd_scroll(int col, int line, const char* text, int len, int time) {$/;"	f
lcd_sd_refresh	ultralcd.cpp	/^static void lcd_sd_refresh() {$/;"	f	file:
lcd_sd_status	ultralcd.cpp	/^uint8_t lcd_sd_status;$/;"	v
lcd_sd_updir	ultralcd.cpp	/^static void lcd_sd_updir() {$/;"	f	file:
lcd_sdcard_menu	ultralcd.cpp	/^void lcd_sdcard_menu() {$/;"	f
lcd_sdcard_pause	ultralcd.cpp	/^static void lcd_sdcard_pause() {$/;"	f	file:
lcd_sdcard_resume	ultralcd.cpp	/^static void lcd_sdcard_resume() {$/;"	f	file:
lcd_sdcard_stop	ultralcd.cpp	/^static void lcd_sdcard_stop() {$/;"	f	file:
lcd_set_Mesh	ultralcd.cpp	/^static void lcd_set_Mesh(){$/;"	f	file:
lcd_set_contrast	ultralcd.cpp	/^static void lcd_set_contrast() {$/;"	f	file:
lcd_set_custom_characters	ultralcd_implementation_hitachi_HD44780.h	/^static void lcd_set_custom_characters($/;"	f
lcd_set_home_offsets	ultralcd.cpp	/^void lcd_set_home_offsets() {$/;"	f
lcd_set_hotend	ultralcd.cpp	/^static void lcd_set_hotend() {$/;"	f	file:
lcd_set_hotend_save	ultralcd.cpp	/^static void lcd_set_hotend_save() {$/;"	f	file:
lcd_setalertstatuspgm	ultralcd.cpp	/^void lcd_setalertstatuspgm(const char* message) {$/;"	f
lcd_setcontrast	ultralcd.cpp	/^void lcd_setcontrast(uint8_t value) {$/;"	f
lcd_setstatus	ultralcd.cpp	/^void lcd_setstatus(const char* message, bool persist) {$/;"	f
lcd_setstatus	ultralcd.h	/^  FORCE_INLINE void lcd_setstatus(const char* message, const bool persist=false) {UNUSED(message); UNUSED(persist);}$/;"	f
lcd_setstatuspgm	ultralcd.cpp	/^void lcd_setstatuspgm(const char* message, uint8_t level) {$/;"	f
lcd_setstatuspgm	ultralcd.h	/^  FORCE_INLINE void lcd_setstatuspgm(const char* message, const uint8_t level=0) {UNUSED(message); UNUSED(level);}$/;"	f
lcd_status_message	ultralcd.cpp	/^char lcd_status_message[3 * (LCD_WIDTH) + 1];$/;"	v
lcd_status_message_level	ultralcd.cpp	/^uint8_t lcd_status_message_level;$/;"	v
lcd_status_screen	ultralcd.cpp	/^static void lcd_status_screen() {$/;"	f	file:
lcd_status_update_delay	ultralcd.cpp	/^uint8_t lcd_status_update_delay;$/;"	v
lcd_strlen	ultralcd.cpp	/^int lcd_strlen(const char* s) {$/;"	f
lcd_strlen_P	ultralcd.cpp	/^int lcd_strlen_P(const char* s) {$/;"	f
lcd_tune_menu	ultralcd.cpp	/^static void lcd_tune_menu() {$/;"	f	file:
lcd_update	ultralcd.cpp	/^void lcd_update() {$/;"	f
lcd_update	ultralcd.h	/^  FORCE_INLINE void lcd_update() {}$/;"	f
leadSignature	SdFatStructs.h	/^  uint32_t  leadSignature;$/;"	m	struct:fat32_fsinfo
lightpwm	Marlin_main.cpp	/^int lightpwm = 0;$/;"	v
line_to_current	ultralcd.cpp	/^inline void line_to_current(AxisEnum axis) {$/;"	f
line_to_current_position	Marlin_main.cpp	/^inline void line_to_current_position() {$/;"	f
line_to_destination	Marlin_main.cpp	/^inline void line_to_destination() {$/;"	f
line_to_destination	Marlin_main.cpp	/^inline void line_to_destination(float mm_m) {$/;"	f
line_to_z	Marlin_main.cpp	/^inline void line_to_z(float zPosition) {$/;"	f
locked_z2_motor	stepper.cpp	/^              locked_z2_motor = false;$/;"	v	file:
locked_z_motor	stepper.cpp	/^              locked_z_motor = false,$/;"	v	file:
logging	cardreader.h	/^  bool saving, logging, sdprinting, cardOK, filenameIsDir;$/;"	m	class:CardReader
logo_lines	ultralcd_implementation_hitachi_HD44780.h	/^   void logo_lines(const char *extra) {$/;"	f
longFilename	cardreader.h	/^  char filename[FILENAME_LENGTH], longFilename[LONG_FILENAME_LENGTH];$/;"	m	class:CardReader
loop	Marlin_main.cpp	/^void loop() {$/;"	f
lpq	temperature.cpp	/^    static long lpq[LPQ_MAX_LEN];$/;"	v	file:
lpq_len	Marlin_main.cpp	/^int lpq_len = 20;$/;"	v
lpq_ptr	temperature.cpp	/^    static int lpq_ptr = 0;$/;"	v	file:
ls	SdBaseFile.cpp	/^void SdBaseFile::ls(uint8_t flags, uint8_t indent) {$/;"	f	class:SdBaseFile
ls	cardreader.cpp	/^void CardReader::ls()  {$/;"	f	class:CardReader
lsAction	cardreader.h	/^  LsAction lsAction; \/\/stored for recursion.$/;"	m	class:CardReader
lsDive	cardreader.cpp	/^void CardReader::lsDive(const char *prepend, SdFile parent, const char * const match\/*=NULL*\/) {$/;"	f	class:CardReader
lsPrintNext	SdBaseFile.cpp	/^int8_t SdBaseFile::lsPrintNext(uint8_t flags, uint8_t indent) {$/;"	f	class:SdBaseFile
make83Name	SdBaseFile.cpp	/^bool SdBaseFile::make83Name(const char* str, uint8_t* name, const char** ptr) {$/;"	f	class:SdBaseFile
makeDir	SdBaseFile.h	/^  bool makeDir(SdBaseFile* dir, const char* path) {$/;"	f	class:SdBaseFile
manage_change_filament_at_zPos	Marlin_main.cpp	/^void manage_change_filament_at_zPos() {$/;"	f
manage_heater	temperature.cpp	/^void manage_heater() {$/;"	f
manage_inactivity	Marlin_main.cpp	/^void manage_inactivity(bool ignore_stepper_queue\/*=false*\/) {$/;"	f
manual_feedrate	ultralcd.cpp	/^const float manual_feedrate[] = MANUAL_FEEDRATE;$/;"	v
marlin_debug_flags	Marlin_main.cpp	/^uint8_t marlin_debug_flags = DEBUG_NONE;$/;"	v
masterBootRecord	SdFatStructs.h	/^struct masterBootRecord {$/;"	s
matrix	vector_3.h	/^  float matrix[9];$/;"	m	struct:matrix_3x3
matrix_3x3	vector_3.h	/^struct matrix_3x3 {$/;"	s
max	servo.h	/^    int8_t max;                       \/\/ maximum is this value times 4 added to MAX_PULSE_WIDTH$/;"	m	class:Servo
max6675_temp	temperature.cpp	/^    uint16_t max6675_temp = 2000;$/;"	v
max6675_temp	temperature.cpp	/^    uint32_t max6675_temp = 2000;$/;"	v
maxEditValue	ultralcd.cpp	/^int32_t minEditValue, maxEditValue;$/;"	v
max_acceleration_units_per_sq_second	planner.cpp	/^unsigned long max_acceleration_units_per_sq_second[NUM_AXIS]; \/\/ Use M201 to override by software$/;"	v
max_allowable_speed	planner.cpp	/^FORCE_INLINE float max_allowable_speed(float acceleration, float target_velocity, float distance) {$/;"	f
max_e_jerk	planner.cpp	/^float max_e_jerk;$/;"	v
max_entry_speed	planner.h	/^  float max_entry_speed;                             \/\/ Maximum allowable junction entry speed in mm\/sec$/;"	m	struct:__anon1
max_feedrate	planner.cpp	/^float max_feedrate[NUM_AXIS]; \/\/ Max speeds in mm per minute$/;"	v
max_inactive_time	Marlin_main.cpp	/^static millis_t max_inactive_time = 0;$/;"	v	file:
max_software_endstops	Configuration.h	433;"	d
max_temp_error	temperature.cpp	/^void max_temp_error(uint8_t e) {$/;"	f
max_xy_jerk	planner.cpp	/^float max_xy_jerk;          \/\/ The largest speed change requiring no acceleration$/;"	v
max_z_jerk	planner.cpp	/^float max_z_jerk;$/;"	v
maxttemp	temperature.cpp	/^static int maxttemp[EXTRUDERS] = ARRAY_BY_EXTRUDERS1(16383);$/;"	v	file:
maxttemp_raw	temperature.cpp	/^static int maxttemp_raw[EXTRUDERS] = ARRAY_BY_EXTRUDERS(HEATER_0_RAW_HI_TEMP , HEATER_1_RAW_HI_TEMP , HEATER_2_RAW_HI_TEMP, HEATER_3_RAW_HI_TEMP);$/;"	v	file:
mbr	SdVolume.h	/^  mbr_t    mbr;$/;"	m	union:cache_t
mbrSig0	SdFatStructs.h	/^  uint8_t  mbrSig0;$/;"	m	struct:masterBootRecord
mbrSig1	SdFatStructs.h	/^  uint8_t  mbrSig1;$/;"	m	struct:masterBootRecord
mbr_t	SdFatStructs.h	/^typedef struct masterBootRecord mbr_t;$/;"	t	typeref:struct:masterBootRecord
mdt_month	SdInfo.h	/^  unsigned char mdt_month : 4;$/;"	m	struct:CID
mdt_year_high	SdInfo.h	/^  unsigned char mdt_year_high : 4;$/;"	m	struct:CID
mdt_year_low	SdInfo.h	/^  unsigned char mdt_year_low : 4;$/;"	m	struct:CID
meas_delay_cm	Marlin_main.cpp	/^int meas_delay_cm = MEASUREMENT_DELAY_CM;  \/\/distance delay setting$/;"	v
meas_shift_index	temperature.cpp	/^  static int meas_shift_index;  \/\/used to point to a delayed sample in buffer for filament width sensor$/;"	v	file:
measurement_delay	Marlin_main.cpp	/^int8_t measurement_delay[MAX_MEASUREMENT_DELAY + 1]; \/\/ring buffer to delay measurement  store extruder factor after subtracting 100$/;"	v
mediaType	SdFatStructs.h	/^  uint8_t  mediaType;$/;"	m	struct:fat32_boot
mediaType	SdFatStructs.h	/^  uint8_t  mediaType;$/;"	m	struct:fat_boot
menuFunc_t	ultralcd.cpp	/^typedef void (*menuFunc_t)();$/;"	t	file:
menuPosition	ultralcd.cpp	/^} menuPosition;$/;"	t	typeref:struct:__anon5	file:
menu_action_back	ultralcd.cpp	/^static void menu_action_back() {$/;"	f	file:
menu_action_cancel	ultralcd.cpp	/^static void menu_action_cancel() {$/;"	f	file:
menu_action_function	ultralcd.cpp	/^static void menu_action_function(menuFunc_t func) {$/;"	f	file:
menu_action_gcode	ultralcd.cpp	/^static void menu_action_gcode(const char* pgcode) {$/;"	f	file:
menu_action_sddirectory	ultralcd.cpp	/^static void menu_action_sddirectory(const char* filename, char* longFilename) {$/;"	f	file:
menu_action_sdfile	ultralcd.cpp	/^static void menu_action_sdfile(const char* filename, char* longFilename) {$/;"	f	file:
menu_action_setting_edit_bool	ultralcd.cpp	/^static void menu_action_setting_edit_bool(const char* pstr, bool* ptr) {$/;"	f	file:
menu_action_setting_edit_callback_bool	ultralcd.cpp	/^static void menu_action_setting_edit_callback_bool(const char* pstr, bool* ptr, menuFunc_t callback) {$/;"	f	file:
menu_action_submenu	ultralcd.cpp	/^static void menu_action_submenu(menuFunc_t func) {$/;"	f	file:
menu_edit_type	ultralcd.cpp	2322;"	d	file:
menu_function	ultralcd.cpp	/^  menuFunc_t menu_function;$/;"	m	struct:__anon5	file:
menu_history	ultralcd.cpp	/^menuPosition menu_history[10];$/;"	v
menu_history_depth	ultralcd.cpp	/^uint8_t menu_history_depth = 0;$/;"	v
mesh_plan_buffer_line	Marlin_main.cpp	/^void mesh_plan_buffer_line(float x, float y, float z, const float e, float feed_rate, const uint8_t& extruder, uint8_t x_splits = 0xff, uint8_t y_splits = 0xff) {$/;"	f
microstep_init	stepper.cpp	/^void microstep_init() {$/;"	f
microstep_mode	stepper.cpp	/^void microstep_mode(uint8_t driver, uint8_t stepping_mode) {$/;"	f
microstep_ms	stepper.cpp	/^void microstep_ms(uint8_t driver, int8_t ms1, int8_t ms2) {$/;"	f
microstep_readings	stepper.cpp	/^void microstep_readings() {$/;"	f
mid	SdInfo.h	/^  unsigned char mid;$/;"	m	struct:CID
millimeters	planner.h	/^  float millimeters;                                 \/\/ The total travel of this block in mm$/;"	m	struct:__anon1
millis_t	Marlin.h	/^typedef unsigned long millis_t;$/;"	t
min	servo.h	/^    int8_t min;                       \/\/ minimum is this value times 4 added to MIN_PULSE_WIDTH$/;"	m	class:Servo
minEditValue	ultralcd.cpp	/^int32_t minEditValue, maxEditValue;$/;"	v
min_software_endstops	Configuration.h	432;"	d
min_temp_error	temperature.cpp	/^void min_temp_error(uint8_t e) {$/;"	f
minimumfeedrate	planner.cpp	/^float minimumfeedrate;$/;"	v
minsegmenttime	planner.cpp	/^millis_t minsegmenttime;$/;"	v
mintravelfeedrate	planner.cpp	/^float mintravelfeedrate;$/;"	v
minttemp	temperature.cpp	/^static int minttemp[EXTRUDERS] = { 0 };$/;"	v	file:
minttemp_raw	temperature.cpp	/^static int minttemp_raw[EXTRUDERS] = ARRAY_BY_EXTRUDERS(HEATER_0_RAW_LO_TEMP , HEATER_1_RAW_LO_TEMP , HEATER_2_RAW_LO_TEMP, HEATER_3_RAW_LO_TEMP);$/;"	v	file:
mkdir	SdBaseFile.cpp	/^bool SdBaseFile::mkdir(SdBaseFile* parent, const char* path, bool pFlag) {$/;"	f	class:SdBaseFile
mkdir	SdBaseFile.cpp	/^bool SdBaseFile::mkdir(SdBaseFile* parent, const uint8_t dname[11]) {$/;"	f	class:SdBaseFile
mkdir	SdBaseFile.h	/^  bool mkdir(SdBaseFile& dir, const char* path) {  \/\/ NOLINT$/;"	f	class:SdBaseFile
motor_current_setting	stepper.cpp	/^  const int motor_current_setting[3] = PWM_MOTOR_CURRENT;$/;"	v
move	servo.cpp	/^void Servo::move(int value) {$/;"	f	class:Servo
move_menu_scale	ultralcd.cpp	/^float move_menu_scale;$/;"	v
movesplanned	planner.h	/^FORCE_INLINE uint8_t movesplanned() { return BLOCK_MOD(block_buffer_head - block_buffer_tail + BLOCK_BUFFER_SIZE); }$/;"	f
name	SdFatStructs.h	/^  uint8_t  name[11];$/;"	m	struct:directoryEntry
name1	SdFatStructs.h	/^  uint16_t name1[5];\/\/UTF-16$/;"	m	struct:directoryVFATEntry
name2	SdFatStructs.h	/^  uint16_t name2[6];\/\/UTF-16$/;"	m	struct:directoryVFATEntry
name3	SdFatStructs.h	/^  uint16_t name3[2];\/\/UTF-16$/;"	m	struct:directoryVFATEntry
nbr	servo.h	/^  uint8_t nbr        : 6 ;            \/\/ a pin number from 0 to 63$/;"	m	struct:__anon3
nextFree	SdFatStructs.h	/^  uint32_t nextFree;$/;"	m	struct:fat32_fsinfo
next_auto_fan_check_ms	temperature.cpp	/^  static millis_t next_auto_fan_check_ms;$/;"	v	file:
next_autostart_ms	cardreader.h	/^  millis_t next_autostart_ms;$/;"	m	class:CardReader
next_bed_check_ms	temperature.cpp	/^  static millis_t  next_bed_check_ms;$/;"	v	file:
next_block_index	planner.cpp	/^FORCE_INLINE int8_t next_block_index(int8_t block_index) { return BLOCK_MOD(block_index + 1); }$/;"	f
next_busy_signal_ms	Marlin_main.cpp	/^static millis_t next_busy_signal_ms = 0;$/;"	v	file:
next_button_update_ms	ultralcd.cpp	/^millis_t next_button_update_ms;$/;"	v
next_lcd_update_ms	ultralcd.cpp	/^millis_t next_lcd_update_ms;$/;"	v
next_max6675_ms	temperature.cpp	/^  static millis_t next_max6675_ms = 0;$/;"	v	file:
next_status_led_update_ms	Marlin_main.cpp	/^static millis_t next_status_led_update_ms = 0;$/;"	v	file:
nominal_length_flag	planner.h	/^  unsigned char nominal_length_flag;                 \/\/ Planner flag for nominal speed always reached$/;"	m	struct:__anon1
nominal_rate	planner.h	/^  unsigned long nominal_rate;                        \/\/ The nominal step rate for this block in step_events\/sec$/;"	m	struct:__anon1
nominal_speed	planner.h	/^  float nominal_speed;                               \/\/ The nominal speed for this block in mm\/sec$/;"	m	struct:__anon1
nop	Sd2Card.cpp	94;"	d	file:
normalize	vector_3.cpp	/^void vector_3::normalize() {$/;"	f	class:vector_3
nrFiles	cardreader.h	/^  uint16_t nrFiles; \/\/counter for the files in the current directory and recycled as position counter for getting the nrFiles'th name in the directory.$/;"	m	class:CardReader
nsac	SdInfo.h	/^  unsigned char nsac;$/;"	m	struct:CSDV1
nsac	SdInfo.h	/^  unsigned char nsac;$/;"	m	struct:CSDV2
oemId	SdFatStructs.h	/^  char    oemId[8];$/;"	m	struct:fat32_boot
oemId	SdFatStructs.h	/^  char    oemId[8];$/;"	m	struct:fat_boot
oid	SdInfo.h	/^  char oid[2];$/;"	m	struct:CID
ok_to_send	Marlin_main.cpp	/^void ok_to_send() {$/;"	f
oldDateTime_	SdBaseFile.cpp	/^  void (*SdBaseFile::oldDateTime_)(uint16_t& date, uint16_t& time) = 0;  \/\/ NOLINT$/;"	v
oldDateTime_	SdBaseFile.h	/^  static void (*oldDateTime_)(uint16_t& date, uint16_t& time);  \/\/ NOLINT$/;"	m	class:SdBaseFile
oldToNew	SdBaseFile.h	/^  static void oldToNew(uint16_t* date, uint16_t* time) {$/;"	f	class:SdBaseFile
old_OCR0A	stepper.cpp	/^  unsigned char old_OCR0A;$/;"	v
old_advance	stepper.cpp	/^  static long old_advance = 0;$/;"	v	file:
old_direction_bits	planner.cpp	/^  static unsigned char old_direction_bits = 0;$/;"	v	file:
old_endstop_bits	stepper.cpp	/^    old_endstop_bits = 0; \/\/ use X_MIN, X_MAX... Z_MAX, Z_MIN_PROBE, Z2_MIN, Z2_MAX$/;"	v	file:
open	SdBaseFile.cpp	/^bool SdBaseFile::open(SdBaseFile* dirFile, const char* path, uint8_t oflag) {$/;"	f	class:SdBaseFile
open	SdBaseFile.cpp	/^bool SdBaseFile::open(SdBaseFile* dirFile, uint16_t index, uint8_t oflag) {$/;"	f	class:SdBaseFile
open	SdBaseFile.cpp	/^bool SdBaseFile::open(SdBaseFile* dirFile,$/;"	f	class:SdBaseFile
open	SdBaseFile.cpp	/^bool SdBaseFile::open(const char* path, uint8_t oflag) {$/;"	f	class:SdBaseFile
open	SdBaseFile.h	/^  bool open(SdBaseFile& dirFile, \/\/ NOLINT$/;"	f	class:SdBaseFile
open	SdBaseFile.h	/^  bool open(SdBaseFile& dirFile, const char* path) {  \/\/ NOLINT$/;"	f	class:SdBaseFile
open	SdBaseFile.h	/^  bool open(SdBaseFile& dirFile, uint16_t index, uint8_t oflag) {  \/\/ NOLINT$/;"	f	class:SdBaseFile
openAndPrintFile	cardreader.cpp	/^void CardReader::openAndPrintFile(const char *name) {$/;"	f	class:CardReader
openCachedEntry	SdBaseFile.cpp	/^bool SdBaseFile::openCachedEntry(uint8_t dirIndex, uint8_t oflag) {$/;"	f	class:SdBaseFile
openFile	cardreader.cpp	/^void CardReader::openFile(char* name, bool read, bool push_current\/*=false*\/) {$/;"	f	class:CardReader
openLogFile	cardreader.cpp	/^void CardReader::openLogFile(char* name) {$/;"	f	class:CardReader
openNext	SdBaseFile.cpp	/^bool SdBaseFile::openNext(SdBaseFile* dirFile, uint8_t oflag) {$/;"	f	class:SdBaseFile
openParent	SdBaseFile.cpp	/^bool SdBaseFile::openParent(SdBaseFile* dir) {$/;"	f	class:SdBaseFile
openRoot	SdBaseFile.cpp	/^bool SdBaseFile::openRoot(SdVolume* vol) {$/;"	f	class:SdBaseFile
openRoot	SdBaseFile.h	/^  bool openRoot(SdVolume& vol) {return openRoot(&vol);}  \/\/ NOLINT$/;"	f	class:SdBaseFile
operator +	vector_3.cpp	/^vector_3 vector_3::operator+(vector_3 v) { return vector_3((x + v.x), (y + v.y), (z + v.z)); }$/;"	f	class:vector_3
operator -	vector_3.cpp	/^vector_3 vector_3::operator-(vector_3 v) { return vector_3((x - v.x), (y - v.y), (z - v.z)); }$/;"	f	class:vector_3
out_bits	stepper.cpp	/^static unsigned char out_bits = 0;        \/\/ The next stepping-bits to be output$/;"	v	file:
out_of_range_error	Marlin_main.cpp	/^void out_of_range_error(const char* p_edge) {$/;"	f
pTerm	temperature.cpp	/^  static float pTerm[EXTRUDERS];$/;"	v	file:
pTerm_bed	temperature.cpp	/^  static float pTerm_bed;$/;"	v	file:
part	SdFatStructs.h	/^  part_t   part[4];$/;"	m	struct:masterBootRecord
part_t	SdFatStructs.h	/^typedef struct partitionTable part_t;$/;"	t	typeref:struct:partitionTable
partitionTable	SdFatStructs.h	/^struct partitionTable {$/;"	s
pause	stopwatch.cpp	/^void Stopwatch::pause() {$/;"	f	class:Stopwatch
pauseSDPrint	cardreader.cpp	/^void CardReader::pauseSDPrint() {$/;"	f	class:CardReader
peek	MarlinSerial.cpp	/^int MarlinSerial::peek(void) {$/;"	f	class:MarlinSerial
peek	SdBaseFile.cpp	/^int SdBaseFile::peek() {$/;"	f	class:SdBaseFile
percentDone	cardreader.h	/^  FORCE_INLINE uint8_t percentDone() { return (isFileOpen() && filesize) ? sdpos \/ ((filesize + 99) \/ 100) : 0; }$/;"	f	class:CardReader
performing_homing	stepper.cpp	/^  static bool performing_homing = false,$/;"	v	file:
perm_write_protect	SdInfo.h	/^  unsigned char perm_write_protect : 1;$/;"	m	struct:CSDV1
perm_write_protect	SdInfo.h	/^  unsigned char perm_write_protect : 1;$/;"	m	struct:CSDV2
pid_error	temperature.cpp	/^  static float pid_error[EXTRUDERS];$/;"	v	file:
pid_error_bed	temperature.cpp	/^  static float pid_error_bed;$/;"	v	file:
pid_reset	temperature.cpp	/^  static bool pid_reset[EXTRUDERS];$/;"	v	file:
pin	Sd2PinMap.h	/^  volatile uint8_t* pin;$/;"	m	struct:pin_map_t
pin_map_t	Sd2PinMap.h	/^struct pin_map_t {$/;"	s
plaPreheatFanSpeed	ultralcd.cpp	/^int plaPreheatFanSpeed;$/;"	v
plaPreheatHPBTemp	ultralcd.cpp	/^int plaPreheatHPBTemp;$/;"	v
plaPreheatHotendTemp	ultralcd.cpp	/^int plaPreheatHotendTemp;$/;"	v
plan_arc	Marlin_main.cpp	/^void plan_arc($/;"	f
plan_bed_level_matrix	planner.cpp	/^  matrix_3x3 plan_bed_level_matrix = {$/;"	v
plan_buffer_line	planner.cpp	/^  void plan_buffer_line(float x, float y, float z, const float& e, float feed_rate, const uint8_t extruder)$/;"	f
plan_discard_current_block	planner.h	/^FORCE_INLINE void plan_discard_current_block() {$/;"	f
plan_get_current_block	planner.h	/^FORCE_INLINE block_t* plan_get_current_block() {$/;"	f
plan_get_position	planner.cpp	/^  vector_3 plan_get_position() {$/;"	f
plan_init	planner.cpp	/^void plan_init() {$/;"	f
plan_set_e_position	planner.cpp	/^void plan_set_e_position(const float& e) {$/;"	f
plan_set_position	planner.cpp	/^  void plan_set_position(float x, float y, float z, const float& e)$/;"	f
planner_forward_pass	planner.cpp	/^void planner_forward_pass() {$/;"	f
planner_forward_pass_kernel	planner.cpp	/^void planner_forward_pass_kernel(block_t* previous, block_t* current, block_t* next) {$/;"	f
planner_recalculate	planner.cpp	/^void planner_recalculate() {$/;"	f
planner_recalculate_trapezoids	planner.cpp	/^void planner_recalculate_trapezoids() {$/;"	f
planner_reverse_pass	planner.cpp	/^void planner_reverse_pass() {$/;"	f
planner_reverse_pass_kernel	planner.cpp	/^void planner_reverse_pass_kernel(block_t* previous, block_t* current, block_t* next) {$/;"	f
pnm	SdInfo.h	/^  char pnm[5];$/;"	m	struct:CID
port	Sd2PinMap.h	/^  volatile uint8_t* port;$/;"	m	struct:pin_map_t
position	SdBaseFile.h	/^  uint32_t position;$/;"	m	struct:filepos_t
position	planner.cpp	/^long position[NUM_AXIS];               \/\/ Rescaled from extern when axis_steps_per_unit are changed by gcode$/;"	v
position_shift	Marlin_main.cpp	/^float position_shift[3] = { 0 };$/;"	v
powersupply	Marlin_main.cpp	/^bool powersupply =$/;"	v
prepare_move	Marlin_main.cpp	/^void prepare_move() {$/;"	f
prepare_move_cartesian	Marlin_main.cpp	/^inline bool prepare_move_cartesian() {$/;"	f
prepare_move_delta	Marlin_main.cpp	/^inline bool prepare_move_delta(float target[NUM_AXIS]) {$/;"	f
prepare_move_dual_x_carriage	Marlin_main.cpp	/^inline bool prepare_move_dual_x_carriage() {$/;"	f
prepare_move_raw	Marlin_main.cpp	/^void prepare_move_raw() {$/;"	f
prepare_move_scara	Marlin_main.cpp	/^inline bool prepare_move_scara(float target[NUM_AXIS]) {$/;"	f
prev_block_index	planner.cpp	/^FORCE_INLINE int8_t prev_block_index(int8_t block_index) { return BLOCK_MOD(block_index - 1); }$/;"	f
prevent_dangerous_extrude	Marlin_main.cpp	/^inline void prevent_dangerous_extrude(float& curr_e, float& dest_e) {$/;"	f
previous_cmd_ms	Marlin_main.cpp	/^millis_t previous_cmd_ms = 0;$/;"	v
previous_lcd_status_ms	ultralcd.cpp	/^millis_t previous_lcd_status_ms = 0;$/;"	v
previous_nominal_speed	planner.cpp	/^static float previous_nominal_speed;   \/\/ Nominal speed of previous path line segment$/;"	v	file:
previous_speed	planner.cpp	/^static float previous_speed[NUM_AXIS]; \/\/ Speed of previous path line segment$/;"	v	file:
previous_unit_vec	planner.cpp	/^static float previous_unit_vec[NUM_AXIS];$/;"	v	file:
print	MarlinSerial.cpp	/^void MarlinSerial::print(char c, int base) {$/;"	f	class:MarlinSerial
print	MarlinSerial.cpp	/^void MarlinSerial::print(double n, int digits) {$/;"	f	class:MarlinSerial
print	MarlinSerial.cpp	/^void MarlinSerial::print(int n, int base) {$/;"	f	class:MarlinSerial
print	MarlinSerial.cpp	/^void MarlinSerial::print(long n, int base) {$/;"	f	class:MarlinSerial
print	MarlinSerial.cpp	/^void MarlinSerial::print(unsigned char b, int base) {$/;"	f	class:MarlinSerial
print	MarlinSerial.cpp	/^void MarlinSerial::print(unsigned int n, int base) {$/;"	f	class:MarlinSerial
print	MarlinSerial.cpp	/^void MarlinSerial::print(unsigned long n, int base) {$/;"	f	class:MarlinSerial
print	MarlinSerial.h	/^    FORCE_INLINE void print(const String& s) { for (int i = 0; i < (int)s.length(); i++) write(s[i]); }$/;"	f	class:MarlinSerial
print	MarlinSerial.h	/^    FORCE_INLINE void print(const char* str) { write(str); }$/;"	f	class:MarlinSerial
print2u	SdBaseFile.cpp	/^static void print2u(uint8_t v) {$/;"	f	file:
printDirName	SdBaseFile.cpp	/^void SdBaseFile::printDirName(const dir_t& dir,$/;"	f	class:SdBaseFile
printFatDate	SdBaseFile.cpp	/^void SdBaseFile::printFatDate(uint16_t fatDate) {$/;"	f	class:SdBaseFile
printFatTime	SdBaseFile.cpp	/^void SdBaseFile::printFatTime(uint16_t fatTime) {$/;"	f	class:SdBaseFile
printFloat	MarlinSerial.cpp	/^void MarlinSerial::printFloat(double number, uint8_t digits) {$/;"	f	class:MarlinSerial
printLongPath	cardreader.cpp	/^  void CardReader::printLongPath(char *path) {$/;"	f	class:CardReader
printName	SdBaseFile.cpp	/^bool SdBaseFile::printName() {$/;"	f	class:SdBaseFile
printNumber	MarlinSerial.cpp	/^void MarlinSerial::printNumber(unsigned long n, uint8_t base) {$/;"	f	class:MarlinSerial
print_P	SdFatUtil.cpp	/^void SdFatUtil::print_P(PGM_P str) {$/;"	f	class:SdFatUtil
print_bed_level	Marlin_main.cpp	/^static void print_bed_level() {$/;"	f	file:
print_heaterstates	Marlin_main.cpp	/^void print_heaterstates() {$/;"	f
print_job_timer	Marlin_main.cpp	/^Stopwatch print_job_timer = Stopwatch();$/;"	v
print_xyz	Marlin_main.cpp	/^void print_xyz(const char* prefix, const float x, const float y, const float z) {$/;"	f
print_xyz	Marlin_main.cpp	/^void print_xyz(const char* prefix, const float xyz[]) {$/;"	f
print_xyz	Marlin_main.cpp	/^void print_xyz(const char* prefix, const vector_3 &xyz) {$/;"	f
printingHasFinished	cardreader.cpp	/^void CardReader::printingHasFinished() {$/;"	f	class:CardReader
printing_file	ultralcd.cpp	/^char printing_file[20];$/;"	v
println	MarlinSerial.cpp	/^void MarlinSerial::println(char c, int base) {$/;"	f	class:MarlinSerial
println	MarlinSerial.cpp	/^void MarlinSerial::println(const String& s) {$/;"	f	class:MarlinSerial
println	MarlinSerial.cpp	/^void MarlinSerial::println(const char c[]) {$/;"	f	class:MarlinSerial
println	MarlinSerial.cpp	/^void MarlinSerial::println(double n, int digits) {$/;"	f	class:MarlinSerial
println	MarlinSerial.cpp	/^void MarlinSerial::println(int n, int base) {$/;"	f	class:MarlinSerial
println	MarlinSerial.cpp	/^void MarlinSerial::println(long n, int base) {$/;"	f	class:MarlinSerial
println	MarlinSerial.cpp	/^void MarlinSerial::println(unsigned char b, int base) {$/;"	f	class:MarlinSerial
println	MarlinSerial.cpp	/^void MarlinSerial::println(unsigned int n, int base) {$/;"	f	class:MarlinSerial
println	MarlinSerial.cpp	/^void MarlinSerial::println(unsigned long n, int base) {$/;"	f	class:MarlinSerial
println	MarlinSerial.cpp	/^void MarlinSerial::println(void) {$/;"	f	class:MarlinSerial
println_P	SdFatUtil.cpp	/^void SdFatUtil::println_P(PGM_P str) {$/;"	f	class:SdFatUtil
probe_pt	Marlin_main.cpp	/^static float probe_pt(float x, float y, float z_before, ProbeAction probe_action = ProbeDeployAndStow, int verbose_level = 1) {$/;"	f	file:
proc_filenames	cardreader.h	/^  char proc_filenames[SD_PROCEDURE_DEPTH][MAXPATHNAMELENGTH];$/;"	m	class:CardReader
process_next_command	Marlin_main.cpp	/^void process_next_command() {$/;"	f
progress_bar_ms	ultralcd_implementation_hitachi_HD44780.h	/^  static millis_t progress_bar_ms = 0;$/;"	v
prt_hex_byte	M100_Free_Mem_Chk.cpp	/^void prt_hex_byte(unsigned int b) {$/;"	f
prt_hex_nibble	M100_Free_Mem_Chk.cpp	/^void prt_hex_nibble(unsigned int n) {$/;"	f
prt_hex_word	M100_Free_Mem_Chk.cpp	/^void prt_hex_word(unsigned int w) {$/;"	f
prv_m	SdInfo.h	/^  unsigned char prv_m : 4;$/;"	m	struct:CID
prv_n	SdInfo.h	/^  unsigned char prv_n : 4;$/;"	m	struct:CID
psn	SdInfo.h	/^  uint32_t psn;$/;"	m	struct:CID
puase_lastpos	Marlin_main.cpp	/^static float puase_lastpos[NUM_AXIS];$/;"	v	file:
pudatelight	ultralcd.cpp	/^static void pudatelight(){$/;"	f	file:
qr_solve	qr_solve.cpp	/^void qr_solve(double x[], int m, int n, double a[], double b[])$/;"	f
queued_commands_P	Marlin_main.cpp	/^const char* queued_commands_P = NULL;$/;"	v
quickStop	stepper.cpp	/^void quickStop() {$/;"	f
r2w_factor	SdInfo.h	/^  unsigned char r2w_factor : 3;$/;"	m	struct:CSDV1
r2w_factor	SdInfo.h	/^  unsigned char r2w_factor : 3;$/;"	m	struct:CSDV2
r8_abs	qr_solve.cpp	/^double r8_abs(double x)$/;"	f
r8_epsilon	qr_solve.cpp	/^double r8_epsilon(void)$/;"	f
r8_max	qr_solve.cpp	/^double r8_max(double x, double y)$/;"	f
r8_sign	qr_solve.cpp	/^double r8_sign(double x)$/;"	f
r8mat_amax	qr_solve.cpp	/^double r8mat_amax(int m, int n, double a[])$/;"	f
r8mat_copy	qr_solve.cpp	/^void r8mat_copy(double a2[], int m, int n, double a1[])$/;"	f
raise_z_after_probing	Marlin_main.cpp	/^inline void raise_z_after_probing() {$/;"	f
raise_z_for_servo	Marlin_main.cpp	/^void raise_z_for_servo() {$/;"	f
raised_parked_position	Marlin_main.cpp	/^static float raised_parked_position[NUM_AXIS]; \/\/ used in mode 1$/;"	v	file:
rawBedTemp	temperature.h	/^FORCE_INLINE float rawBedTemp() { return current_temperature_bed_raw; }$/;"	f
rawHotendTemp	temperature.h	/^FORCE_INLINE float rawHotendTemp(uint8_t extruder) { return current_temperature_raw[extruder]; }$/;"	f
raw_Kd	ultralcd.cpp	/^float raw_Ki, raw_Kd;$/;"	v
raw_Ki	ultralcd.cpp	/^float raw_Ki, raw_Kd;$/;"	v
raw_temp_bed_value	temperature.cpp	/^static unsigned long raw_temp_bed_value = 0;$/;"	v	file:
raw_temp_value	temperature.cpp	/^static unsigned long raw_temp_value[4] = { 0 };$/;"	v	file:
read	MarlinSerial.cpp	/^int MarlinSerial::read(void) {$/;"	f	class:MarlinSerial
read	SdBaseFile.cpp	/^int16_t SdBaseFile::read() {$/;"	f	class:SdBaseFile
read	SdBaseFile.cpp	/^int16_t SdBaseFile::read(void* buf, uint16_t nbyte) {$/;"	f	class:SdBaseFile
read	servo.cpp	/^int Servo::read() { return map(this->readMicroseconds() + 1, SERVO_MIN(), SERVO_MAX(), 0, 180); }$/;"	f	class:Servo
readBlock	Sd2Card.cpp	/^bool Sd2Card::readBlock(uint32_t blockNumber, uint8_t* dst) {$/;"	f	class:Sd2Card
readBlock	SdVolume.h	/^  bool readBlock(uint32_t block, uint8_t* dst) {$/;"	f	class:SdVolume
readCID	Sd2Card.h	/^  bool readCID(cid_t* cid) {$/;"	f	class:Sd2Card
readCSD	Sd2Card.h	/^  bool readCSD(csd_t* csd) {$/;"	f	class:Sd2Card
readData	Sd2Card.cpp	/^bool Sd2Card::readData(uint8_t* dst) {$/;"	f	class:Sd2Card
readData	Sd2Card.cpp	/^bool Sd2Card::readData(uint8_t* dst, uint16_t count) {$/;"	f	class:Sd2Card
readDir	SdBaseFile.cpp	/^int8_t SdBaseFile::readDir(dir_t* dir, char* longFilename) {$/;"	f	class:SdBaseFile
readDir	SdBaseFile.h	/^  int8_t readDir(dir_t& dir, char* longFilename) {return readDir(&dir, longFilename);}  \/\/ NOLINT$/;"	f	class:SdBaseFile
readDirCache	SdBaseFile.cpp	/^dir_t* SdBaseFile::readDirCache() {$/;"	f	class:SdBaseFile
readMicroseconds	servo.cpp	/^int Servo::readMicroseconds() {$/;"	f	class:Servo
readRegister	Sd2Card.cpp	/^bool Sd2Card::readRegister(uint8_t cmd, void* buf) {$/;"	f	class:Sd2Card
readStart	Sd2Card.cpp	/^bool Sd2Card::readStart(uint32_t blockNumber) {$/;"	f	class:Sd2Card
readStop	Sd2Card.cpp	/^bool Sd2Card::readStop() {$/;"	f	class:Sd2Card
read_bl_len	SdInfo.h	/^  unsigned char read_bl_len : 4;$/;"	m	struct:CSDV1
read_bl_len	SdInfo.h	/^  unsigned char read_bl_len : 4;$/;"	m	struct:CSDV2
read_bl_partial	SdInfo.h	/^  unsigned char read_bl_partial : 1;$/;"	m	struct:CSDV1
read_bl_partial	SdInfo.h	/^  unsigned char read_bl_partial : 1;$/;"	m	struct:CSDV2
read_blk_misalign	SdInfo.h	/^  unsigned char read_blk_misalign : 1;$/;"	m	struct:CSDV1
read_blk_misalign	SdInfo.h	/^  unsigned char read_blk_misalign : 1;$/;"	m	struct:CSDV2
read_max6675	temperature.cpp	/^  static int read_max6675() {$/;"	f	file:
recalc_delta_settings	Marlin_main.cpp	/^void recalc_delta_settings(float radius, float diagonal_rod) {$/;"	f
recalculate_flag	planner.h	/^  unsigned char recalculate_flag;                    \/\/ Planner flag to recalculate trapezoids on entry junction$/;"	m	struct:__anon1
red_led	Marlin_main.cpp	/^static bool red_led = false;$/;"	v	file:
redundant_temperature	temperature.cpp	/^  float redundant_temperature = 0.0;$/;"	v
redundant_temperature_raw	temperature.cpp	/^  int redundant_temperature_raw = 0;$/;"	v
refresh_cmd_timeout	Marlin.h	/^inline void refresh_cmd_timeout() { previous_cmd_ms = millis(); }$/;"	f
relative_mode	Marlin_main.cpp	/^static bool relative_mode = false;$/;"	v	file:
release	cardreader.cpp	/^void CardReader::release() {$/;"	f	class:CardReader
remove	SdBaseFile.cpp	/^bool SdBaseFile::remove() {$/;"	f	class:SdBaseFile
remove	SdBaseFile.cpp	/^bool SdBaseFile::remove(SdBaseFile* dirFile, const char* path) {$/;"	f	class:SdBaseFile
remove	SdBaseFile.h	/^  static bool remove(SdBaseFile& dirFile, const char* path) {  \/\/ NOLINT$/;"	f	class:SdBaseFile
removeFile	cardreader.cpp	/^void CardReader::removeFile(char* name) {$/;"	f	class:CardReader
rename	SdBaseFile.cpp	/^bool SdBaseFile::rename(SdBaseFile* dirFile, const char* newPath) {$/;"	f	class:SdBaseFile
reprapworld_keypad_move_home	ultralcd.cpp	/^static void reprapworld_keypad_move_home() {$/;"	f	file:
reprapworld_keypad_move_x_left	ultralcd.cpp	/^static void reprapworld_keypad_move_x_left() {$/;"	f	file:
reprapworld_keypad_move_x_right	ultralcd.cpp	/^static void reprapworld_keypad_move_x_right() {$/;"	f	file:
reprapworld_keypad_move_y_down	ultralcd.cpp	/^static void reprapworld_keypad_move_y_down() {$/;"	f	file:
reprapworld_keypad_move_y_up	ultralcd.cpp	/^static void reprapworld_keypad_move_y_up() {$/;"	f	file:
reprapworld_keypad_move_z_down	ultralcd.cpp	/^static void reprapworld_keypad_move_z_down() {$/;"	f	file:
reprapworld_keypad_move_z_up	ultralcd.cpp	/^static void reprapworld_keypad_move_z_up() {$/;"	f	file:
reqbytes	twibus.cpp	/^void TWIBus::reqbytes(uint8_t bytes) {$/;"	f	class:TWIBus
reserved	SdInfo.h	/^  unsigned char reserved : 4;$/;"	m	struct:CID
reserved1	SdFatStructs.h	/^  uint8_t  reserved1;$/;"	m	struct:fat32_boot
reserved1	SdFatStructs.h	/^  uint8_t  reserved1;$/;"	m	struct:fat_boot
reserved1	SdFatStructs.h	/^  uint8_t  reserved1[480];$/;"	m	struct:fat32_fsinfo
reserved1	SdInfo.h	/^  unsigned char reserved1 : 6;$/;"	m	struct:CSDV1
reserved1	SdInfo.h	/^  unsigned char reserved1 : 6;$/;"	m	struct:CSDV2
reserved2	SdFatStructs.h	/^  uint8_t  reserved2[12];$/;"	m	struct:fat32_fsinfo
reserved2	SdInfo.h	/^  unsigned char reserved2 : 2;$/;"	m	struct:CSDV1
reserved2	SdInfo.h	/^  unsigned char reserved2 : 4;$/;"	m	struct:CSDV2
reserved3	SdInfo.h	/^  unsigned char reserved3 : 2;$/;"	m	struct:CSDV1
reserved3	SdInfo.h	/^  unsigned char reserved3 : 2;$/;"	m	struct:CSDV2
reserved4	SdInfo.h	/^  unsigned char reserved4 : 1;$/;"	m	struct:CSDV2
reserved4	SdInfo.h	/^  unsigned char reserved4 : 5;$/;"	m	struct:CSDV1
reserved5	SdInfo.h	/^  unsigned char reserved5 : 2;$/;"	m	struct:CSDV2
reserved5	SdInfo.h	/^  unsigned char reserved5: 2;$/;"	m	struct:CSDV1
reserved6	SdInfo.h	/^  unsigned char reserved6 : 5;$/;"	m	struct:CSDV2
reserved7	SdInfo.h	/^  unsigned char reserved7: 2;$/;"	m	struct:CSDV2
reservedNT	SdFatStructs.h	/^  uint8_t  reservedNT;$/;"	m	struct:directoryEntry
reservedNT	SdFatStructs.h	/^  uint8_t  reservedNT;$/;"	m	struct:directoryVFATEntry
reservedSectorCount	SdFatStructs.h	/^  uint16_t reservedSectorCount;$/;"	m	struct:fat32_boot
reservedSectorCount	SdFatStructs.h	/^  uint16_t reservedSectorCount;$/;"	m	struct:fat_boot
reset	stopwatch.cpp	/^void Stopwatch::reset() {$/;"	f	class:Stopwatch
reset	twibus.cpp	/^void TWIBus::reset() {$/;"	f	class:TWIBus
reset_acceleration_rates	planner.cpp	/^void reset_acceleration_rates() {$/;"	f
reset_bed_level	Marlin_main.cpp	/^void reset_bed_level() {$/;"	f
retract	Marlin_main.cpp	/^void retract(bool retracting, bool swapping = false) {$/;"	f
retract_acceleration	planner.cpp	/^float retract_acceleration; \/\/ Retract acceleration mm\/s^2 filament pull-back and push-forward while standing still in the other axes M204 TXXXX$/;"	v
retract_feedrate	Marlin_main.cpp	/^float retract_feedrate = RETRACT_FEEDRATE;$/;"	v
retract_length	Marlin_main.cpp	/^float retract_length = RETRACT_LENGTH;$/;"	v
retract_length_swap	Marlin_main.cpp	/^float retract_length_swap = RETRACT_LENGTH_SWAP;$/;"	v
retract_recover_feedrate	Marlin_main.cpp	/^float retract_recover_feedrate = RETRACT_RECOVER_FEEDRATE;$/;"	v
retract_recover_length	Marlin_main.cpp	/^float retract_recover_length = RETRACT_RECOVER_LENGTH;$/;"	v
retract_recover_length_swap	Marlin_main.cpp	/^float retract_recover_length_swap = RETRACT_RECOVER_LENGTH_SWAP;$/;"	v
retract_zlift	Marlin_main.cpp	/^float retract_zlift = RETRACT_ZLIFT;$/;"	v
retracted	Marlin_main.cpp	/^bool retracted[EXTRUDERS] = { false };$/;"	v
retracted_swap	Marlin_main.cpp	/^bool retracted_swap[EXTRUDERS] = { false };$/;"	v
rewind	SdBaseFile.h	/^  void rewind() {seekSet(0);}$/;"	f	class:SdBaseFile
ring_buffer	MarlinSerial.h	/^struct ring_buffer {$/;"	s
rmDir	SdBaseFile.h	/^  bool rmDir() {return rmdir();}$/;"	f	class:SdBaseFile
rmRfStar	SdBaseFile.cpp	/^bool SdBaseFile::rmRfStar() {$/;"	f	class:SdBaseFile
rmdir	SdBaseFile.cpp	/^bool SdBaseFile::rmdir() {$/;"	f	class:SdBaseFile
root	cardreader.h	/^  SdFile root, *curDir, workDir, workDirParents[MAX_DIR_DEPTH];$/;"	m	class:CardReader
rootDirEntryCount	SdFatStructs.h	/^  uint16_t rootDirEntryCount;$/;"	m	struct:fat32_boot
rootDirEntryCount	SdFatStructs.h	/^  uint16_t rootDirEntryCount;$/;"	m	struct:fat_boot
rootDirEntryCount	SdVolume.h	/^  uint32_t rootDirEntryCount() const {return rootDirEntryCount_;}$/;"	f	class:SdVolume
rootDirEntryCount_	SdVolume.h	/^  uint16_t rootDirEntryCount_;  \/\/ number of entries in FAT16 root dir$/;"	m	class:SdVolume
rootDirStart	SdVolume.h	/^  uint32_t rootDirStart() const {return rootDirStart_;}$/;"	f	class:SdVolume
rootDirStart_	SdVolume.h	/^  uint32_t rootDirStart_;       \/\/ root start block for FAT16, cluster for FAT32$/;"	m	class:SdVolume
run_z_probe	Marlin_main.cpp	/^static void run_z_probe() {$/;"	f	file:
rx_buffer	MarlinSerial.cpp	/^  ring_buffer rx_buffer  =  { { 0 }, 0, 0 };$/;"	v
saved_feedrate	Marlin_main.cpp	/^static float feedrate = 300.0, saved_feedrate;$/;"	v	file:
saved_feedrate_multiplier	Marlin_main.cpp	/^int saved_feedrate_multiplier;$/;"	v
saving	cardreader.h	/^  bool saving, logging, sdprinting, cardOK, filenameIsDir;$/;"	m	class:CardReader
scalePID_d	temperature.cpp	/^  float scalePID_d(float d)   { return d \/ PID_dT; }$/;"	f
scalePID_i	temperature.cpp	/^  float scalePID_i(float i)   { return i * PID_dT; }$/;"	f
sdCard	SdVolume.h	/^  Sd2Card* sdCard() {return sdCard_;}$/;"	f	class:SdVolume
sdCard_	SdVolume.cpp	/^  Sd2Card* SdVolume::sdCard_;            \/\/ pointer to SD card object$/;"	m	class:SdVolume	file:
sdCard_	SdVolume.h	/^  Sd2Card* sdCard_;            \/\/ Sd2Card object for cache$/;"	m	class:SdVolume
sdCard_	SdVolume.h	/^  static Sd2Card* sdCard_;            \/\/ Sd2Card object for cache$/;"	m	class:SdVolume
sdpos	cardreader.h	/^  uint32_t sdpos;$/;"	m	class:CardReader
sdprinting	cardreader.h	/^  bool saving, logging, sdprinting, cardOK, filenameIsDir;$/;"	m	class:CardReader
sector_size_high	SdInfo.h	/^  unsigned char sector_size_high : 6;$/;"	m	struct:CSDV1
sector_size_high	SdInfo.h	/^  unsigned char sector_size_high : 6;$/;"	m	struct:CSDV2
sector_size_low	SdInfo.h	/^  unsigned char sector_size_low : 1;$/;"	m	struct:CSDV1
sector_size_low	SdInfo.h	/^  unsigned char sector_size_low : 1;$/;"	m	struct:CSDV2
sectorsPerCluster	SdFatStructs.h	/^  uint8_t  sectorsPerCluster;$/;"	m	struct:fat32_boot
sectorsPerCluster	SdFatStructs.h	/^  uint8_t  sectorsPerCluster;$/;"	m	struct:fat_boot
sectorsPerFat16	SdFatStructs.h	/^  uint16_t sectorsPerFat16;$/;"	m	struct:fat32_boot
sectorsPerFat16	SdFatStructs.h	/^  uint16_t sectorsPerFat16;$/;"	m	struct:fat_boot
sectorsPerFat32	SdFatStructs.h	/^  uint32_t sectorsPerFat32;$/;"	m	struct:fat32_boot
sectorsPerTrack	SdFatStructs.h	/^  uint16_t sectorsPerTrack;$/;"	m	struct:fat32_boot
sectorsPerTrack	SdFatStructs.h	/^  uint16_t sectorsPerTrack;$/;"	m	struct:fat_boot
seekCur	SdBaseFile.h	/^  bool seekCur(int32_t offset) {$/;"	f	class:SdBaseFile
seekEnd	SdBaseFile.h	/^  bool seekEnd(int32_t offset = 0) {return seekSet(fileSize_ + offset);}$/;"	f	class:SdBaseFile
seekSet	SdBaseFile.cpp	/^bool SdBaseFile::seekSet(uint32_t pos) {$/;"	f	class:SdBaseFile
seen_pointer	Marlin_main.cpp	/^static char* seen_pointer;$/;"	v	file:
send	twibus.cpp	/^void TWIBus::send() {$/;"	f	class:TWIBus
send_ok	Marlin_main.cpp	/^static bool send_ok[BUFSIZE];$/;"	v	file:
sensitive_pins	Marlin_main.cpp	/^const int sensitive_pins[] = SENSITIVE_PINS; \/\/\/< Sensitive pin list for M42$/;"	v
sequenceNumber	SdFatStructs.h	/^  uint8_t  sequenceNumber;$/;"	m	struct:directoryVFATEntry
serial_count	Marlin_main.cpp	/^int serial_count = 0;$/;"	v
serial_echopair_P	Marlin.h	/^FORCE_INLINE void serial_echopair_P(const char* s_P, bool v) { serial_echopair_P(s_P, (int)v); }$/;"	f
serial_echopair_P	Marlin.h	/^FORCE_INLINE void serial_echopair_P(const char* s_P, void *v) { serial_echopair_P(s_P, (unsigned long)v); }$/;"	f
serial_echopair_P	Marlin_main.cpp	/^void serial_echopair_P(const char* s_P, double v)        {$/;"	f
serial_echopair_P	Marlin_main.cpp	/^void serial_echopair_P(const char* s_P, float v)         {$/;"	f
serial_echopair_P	Marlin_main.cpp	/^void serial_echopair_P(const char* s_P, int v)           {$/;"	f
serial_echopair_P	Marlin_main.cpp	/^void serial_echopair_P(const char* s_P, long v)          {$/;"	f
serial_echopair_P	Marlin_main.cpp	/^void serial_echopair_P(const char* s_P, unsigned long v) {$/;"	f
serialprintPGM	Marlin.h	/^FORCE_INLINE void serialprintPGM(const char* str) {$/;"	f
servo	Marlin_main.cpp	/^Servo servo[NUM_SERVOS];$/;"	v
servoIndex	servo.h	/^    uint8_t servoIndex;               \/\/ index into the channel data for this servo$/;"	m	class:Servo
servo_endstop_angle	Marlin_main.cpp	/^const int servo_endstop_angle[][2] = SERVO_ENDSTOP_ANGLES;$/;"	v
servo_endstop_id	Marlin_main.cpp	/^const int servo_endstop_id[] = SERVO_ENDSTOP_IDS;$/;"	v
servo_h	servo.h	70;"	d
servo_info	servo.cpp	/^static ServoInfo_t servo_info[MAX_SERVOS];                  \/\/ static array of servo info structures$/;"	v	file:
servo_init	Marlin_main.cpp	/^void servo_init() {$/;"	f
setExtruderAutoFanState	temperature.cpp	/^void setExtruderAutoFanState(int pin, bool state) {$/;"	f
setIndex	cardreader.h	/^  FORCE_INLINE void setIndex(long index) { sdpos = index; file.seekSet(index); }$/;"	f	class:CardReader
setPinMode	Sd2PinMap.h	/^  void setPinMode(uint8_t pin, uint8_t mode) {$/;"	f
setPwmFrequency	Marlin_main.cpp	/^void setPwmFrequency(uint8_t pin, int val) {$/;"	f
setSckRate	Sd2Card.cpp	/^bool Sd2Card::setSckRate(uint8_t sckRateID) {$/;"	f	class:Sd2Card
setTargetBed	temperature.h	/^FORCE_INLINE void setTargetBed(const float& celsius) { target_temperature_bed = celsius; }$/;"	f
setTargetHotend	temperature.h	/^FORCE_INLINE void setTargetHotend(const float& celsius, uint8_t extruder) {$/;"	f
setTargetHotend1	temperature.h	155;"	d
setTargetHotend2	temperature.h	160;"	d
setTargetHotend3	temperature.h	165;"	d
set_axis_is_at_home	Marlin_main.cpp	/^static void set_axis_is_at_home(AxisEnum axis) {$/;"	f	file:
set_bed_level_equation_3pts	Marlin_main.cpp	/^static void set_bed_level_equation_3pts(float z_at_pt_1, float z_at_pt_2, float z_at_pt_3) {$/;"	f	file:
set_bed_level_equation_lsq	Marlin_main.cpp	/^static void set_bed_level_equation_lsq(double* plane_equation_coefficients) {$/;"	f	file:
set_current_temp_raw	temperature.cpp	/^static void set_current_temp_raw() {$/;"	f	file:
set_current_to_destination	Marlin_main.cpp	/^inline void set_current_to_destination() {$/;"	f
set_destination_to_current	Marlin_main.cpp	/^inline void set_destination_to_current() {$/;"	f
set_extrude_min_temp	Marlin_main.cpp	/^void set_extrude_min_temp(float temp) {$/;"	f
set_home_offset	Marlin_main.cpp	/^static void set_home_offset(AxisEnum axis, float v) {$/;"	f	file:
set_homing_bump_feedrate	Marlin_main.cpp	/^inline void set_homing_bump_feedrate(AxisEnum axis) {$/;"	f
set_stepper_direction	stepper.cpp	/^void set_stepper_direction() {$/;"	f
set_to_identity	vector_3.cpp	/^void matrix_3x3::set_to_identity() {$/;"	f	class:matrix_3x3
set_utf_strlen	ultralcd.cpp	/^void set_utf_strlen(char* s, uint8_t n) {$/;"	f
set_z_offset_callback	ultralcd.cpp	/^static void set_z_offset_callback(){$/;"	f	file:
setpos	SdBaseFile.cpp	/^void SdBaseFile::setpos(filepos_t* pos) {$/;"	f	class:SdBaseFile
setroot	cardreader.cpp	/^void CardReader::setroot() {$/;"	f	class:CardReader
setup	Marlin_main.cpp	/^void setup() {$/;"	f
setup_filrunoutpin	Marlin_main.cpp	/^void setup_filrunoutpin() {$/;"	f
setup_for_endstop_move	Marlin_main.cpp	/^static void setup_for_endstop_move() {$/;"	f	file:
setup_homepin	Marlin_main.cpp	/^void setup_homepin(void) {$/;"	f
setup_killpin	Marlin_main.cpp	/^void setup_killpin() {$/;"	f
setup_photpin	Marlin_main.cpp	/^void setup_photpin() {$/;"	f
setup_powerhold	Marlin_main.cpp	/^void setup_powerhold() {$/;"	f
setzoffsetflag	ultralcd.cpp	/^static int setzoffsetflag = 0;$/;"	v	file:
show_bootscreen	ultralcd_implementation_hitachi_HD44780.h	/^  static bool show_bootscreen = true;$/;"	v
slow_buttons	ultralcd.cpp	/^volatile uint8_t slow_buttons; \/\/ Bits of the pressed buttons.$/;"	v
soft_pwm	temperature.cpp	/^static unsigned char soft_pwm[EXTRUDERS];$/;"	v	file:
soft_pwm_bed	temperature.cpp	/^unsigned char soft_pwm_bed;$/;"	v
soft_pwm_fan	temperature.cpp	/^  static unsigned char soft_pwm_fan[FAN_COUNT];$/;"	v	file:
spiInit	Sd2Card.cpp	/^  static void spiInit(uint8_t spiRate) {$/;"	f	file:
spiRate_	Sd2Card.h	/^  uint8_t spiRate_;$/;"	m	class:Sd2Card
spiRead	Sd2Card.cpp	/^  static void spiRead(uint8_t* buf, uint16_t nbyte) {$/;"	f	file:
spiRead	Sd2Card.cpp	/^  void spiRead(uint8_t* buf, uint16_t nbyte) {$/;"	f	file:
spiRec	Sd2Card.cpp	/^  static uint8_t spiRec() {$/;"	f	file:
spiSend	Sd2Card.cpp	/^  static void spiSend(uint8_t b) {$/;"	f	file:
spiSend	Sd2Card.cpp	/^  static void spiSend(uint8_t data) {$/;"	f	file:
spiSendBlock	Sd2Card.cpp	/^  void spiSendBlock(uint8_t token, const uint8_t* buf) {$/;"	f
spiSendBlock	Sd2Card.cpp	/^  void spiSendBlock(uint8_t token, const uint8_t* buf) {$/;"	f	file:
srot_change_filament_at_z_pos_list	ultralcd.cpp	/^static void srot_change_filament_at_z_pos_list() {$/;"	f	file:
st_get_axis_position_mm	stepper.cpp	/^float st_get_axis_position_mm(AxisEnum axis) {$/;"	f
st_get_position	stepper.cpp	/^long st_get_position(AxisEnum axis) {$/;"	f
st_init	stepper.cpp	/^void st_init() {$/;"	f
st_set_e_position	stepper.cpp	/^void st_set_e_position(const long& e) {$/;"	f
st_set_position	stepper.cpp	/^void st_set_position(const long& x, const long& y, const long& z, const long& e) {$/;"	f
st_synchronize	stepper.cpp	/^void st_synchronize() { while (blocks_queued()) idle(); }$/;"	f
st_wake_up	stepper.cpp	/^void st_wake_up() {$/;"	f
start	stopwatch.cpp	/^void Stopwatch::start() {$/;"	f	class:Stopwatch
startFileprint	cardreader.cpp	/^void CardReader::startFileprint() {$/;"	f	class:CardReader
startTimestamp	stopwatch.h	/^    uint32_t startTimestamp;$/;"	m	class:Stopwatch
start_watching_heater	temperature.cpp	/^  void start_watching_heater(int e) {$/;"	f
status	stopwatch.h	/^    StopwatchStatus status;$/;"	m	class:Stopwatch
status_	Sd2Card.h	/^  uint8_t status_;$/;"	m	class:Sd2Card
status_flag	ultralcd_implementation_hitachi_HD44780.h	/^static int status_flag = 0;$/;"	v
step_event_count	planner.h	/^  unsigned long step_event_count;           \/\/ The number of step events required to complete this block$/;"	m	struct:__anon1
step_events_completed	stepper.cpp	/^volatile static unsigned long step_events_completed; \/\/ The number of step events executed in the current block$/;"	v	file:
step_loops	stepper.cpp	/^static uint8_t step_loops;$/;"	v	file:
step_loops_nominal	stepper.cpp	/^static uint8_t step_loops_nominal;$/;"	v	file:
stepper_h	stepper.h	44;"	d
stepper_inactive_time	Marlin_main.cpp	/^static millis_t stepper_inactive_time = (DEFAULT_STEPPER_DEACTIVE_TIME) * 1000UL;$/;"	v	file:
steps	planner.h	/^  long steps[NUM_AXIS];                     \/\/ Step count along each axis$/;"	m	struct:__anon1
stop	Marlin_main.cpp	/^void stop() {$/;"	f
stop	stopwatch.cpp	/^void Stopwatch::stop() {$/;"	f	class:Stopwatch
stopTimestamp	stopwatch.h	/^    uint32_t stopTimestamp;$/;"	m	class:Stopwatch
store_char	MarlinSerial.cpp	/^FORCE_INLINE void store_char(unsigned char c) {$/;"	f
stow_z_probe	Marlin_main.cpp	/^static void stow_z_probe(bool doRaise = true) {$/;"	f	file:
structSignature	SdFatStructs.h	/^  uint32_t  structSignature;$/;"	m	struct:fat32_fsinfo
suicide	Marlin_main.cpp	/^void suicide() {$/;"	f
sw_endstop_max	Marlin_main.cpp	/^float sw_endstop_max[3] = { X_MAX_POS, Y_MAX_POS, Z_MAX_POS };$/;"	v
sw_endstop_min	Marlin_main.cpp	/^float sw_endstop_min[3] = { X_MIN_POS, Y_MIN_POS, Z_MIN_POS };$/;"	v
sync	SdBaseFile.cpp	/^bool SdBaseFile::sync() {$/;"	f	class:SdBaseFile
sync_plan_position	Marlin_main.cpp	/^inline void sync_plan_position() {$/;"	f
sync_plan_position_delta	Marlin_main.cpp	/^inline void sync_plan_position_delta() {$/;"	f
sync_plan_position_e	Marlin_main.cpp	/^inline void sync_plan_position_e() {$/;"	f
taac	SdInfo.h	/^  unsigned char taac;$/;"	m	struct:CSDV1
taac	SdInfo.h	/^  unsigned char taac;$/;"	m	struct:CSDV2
tail	MarlinSerial.h	/^  volatile uint8_t tail;$/;"	m	struct:ring_buffer
tailSignature	SdFatStructs.h	/^  uint8_t  tailSignature[4];$/;"	m	struct:fat32_fsinfo
target_extruder	Marlin_main.cpp	/^static uint8_t target_extruder;$/;"	v	file:
target_temperature	temperature.cpp	/^int target_temperature[4] = { 0 };$/;"	v
target_temperature_bed	temperature.cpp	/^int target_temperature_bed = 0;$/;"	v
temp_dState	temperature.cpp	/^  static float temp_dState[EXTRUDERS] = { 0 };$/;"	v	file:
temp_dState_bed	temperature.cpp	/^  static float temp_dState_bed = { 0 };$/;"	v	file:
temp_iState	temperature.cpp	/^  static float temp_iState[EXTRUDERS] = { 0 };$/;"	v	file:
temp_iState_bed	temperature.cpp	/^  static float temp_iState_bed = { 0 };$/;"	v	file:
temp_iState_max	temperature.cpp	/^  static float temp_iState_max[EXTRUDERS];$/;"	v	file:
temp_iState_max_bed	temperature.cpp	/^  static float temp_iState_max_bed;$/;"	v	file:
temp_iState_min	temperature.cpp	/^  static float temp_iState_min[EXTRUDERS];$/;"	v	file:
temp_iState_min_bed	temperature.cpp	/^  static float temp_iState_min_bed;$/;"	v	file:
temp_meas_ready	temperature.cpp	/^static volatile bool temp_meas_ready = false;$/;"	v	file:
temp_val	ultralcd.cpp	/^static int temp_val;$/;"	v	file:
test1	planner.cpp	/^ static char test1[12] = {0x49,0x6e,0x66,0x69,0x6e,0x69,0x74,0x79,0x20,0x58,0x31,'\\0'};$/;"	v	file:
thermal_runaway_bed_state_machine	temperature.cpp	/^    static TRState thermal_runaway_bed_state_machine = TRReset;$/;"	v	file:
thermal_runaway_bed_timer	temperature.cpp	/^    static millis_t thermal_runaway_bed_timer;$/;"	v	file:
thermal_runaway_protection	temperature.cpp	/^  void thermal_runaway_protection(TRState* state, millis_t* timer, float temperature, float target_temperature, int heater_id, int period_seconds, int hysteresis_degc) {$/;"	f
thermal_runaway_state_machine	temperature.cpp	/^    static TRState thermal_runaway_state_machine[4] = { TRReset, TRReset, TRReset, TRReset };$/;"	v	file:
thermal_runaway_timer	temperature.cpp	/^    static millis_t thermal_runaway_timer[4]; \/\/ = {0,0,0,0};$/;"	v	file:
ticks	servo.h	/^  unsigned int ticks;$/;"	m	struct:__anon4
ticksToUs	servo.cpp	78;"	d	file:
timeout	twibus.h	/^    const int timeout = 5;$/;"	m	class:TWIBus
timer16_Sequence_t	servo.h	/^} timer16_Sequence_t;$/;"	t	typeref:enum:__anon2
timestamp	SdBaseFile.cpp	/^bool SdBaseFile::timestamp(SdBaseFile* file) {$/;"	f	class:SdBaseFile
timestamp	SdBaseFile.cpp	/^bool SdBaseFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,$/;"	f	class:SdBaseFile
tmc_init	stepper_indirection.cpp	/^void tmc_init() {$/;"	f
tmp_write_protect	SdInfo.h	/^  unsigned char tmp_write_protect : 1;$/;"	m	struct:CSDV1
tmp_write_protect	SdInfo.h	/^  unsigned char tmp_write_protect : 1;$/;"	m	struct:CSDV2
tmpfloatvalue	ultralcd.cpp	/^static float tmpfloatvalue = 0.0;$/;"	v	file:
tmpintvalue	ultralcd.cpp	/^static int  tmpintvalue = 0.0;$/;"	v	file:
top_of_stack	M100_Free_Mem_Chk.cpp	/^unsigned char* top_of_stack() {$/;"	f
totalSectors	SdFatStructs.h	/^  uint32_t totalSectors;$/;"	m	struct:partitionTable
totalSectors16	SdFatStructs.h	/^  uint16_t totalSectors16;$/;"	m	struct:fat32_boot
totalSectors16	SdFatStructs.h	/^  uint16_t totalSectors16;$/;"	m	struct:fat_boot
totalSectors32	SdFatStructs.h	/^  uint32_t totalSectors32;$/;"	m	struct:fat32_boot
totalSectors32	SdFatStructs.h	/^  uint32_t totalSectors32;$/;"	m	struct:fat_boot
tp_init	temperature.cpp	/^void tp_init() {$/;"	f
tran_speed	SdInfo.h	/^  unsigned char tran_speed;$/;"	m	struct:CSDV1
tran_speed	SdInfo.h	/^  unsigned char tran_speed;$/;"	m	struct:CSDV2
transpose	vector_3.cpp	/^matrix_3x3 matrix_3x3::transpose(matrix_3x3 original) {$/;"	f	class:matrix_3x3
trapezoid_generator_reset	stepper.cpp	/^FORCE_INLINE void trapezoid_generator_reset() {$/;"	f
travel_acceleration	planner.cpp	/^float travel_acceleration;  \/\/ Travel acceleration mm\/s^2  DEFAULT ACCELERATION for all NON printing moves. M204 MXXXX$/;"	v
truncate	SdBaseFile.cpp	/^bool SdBaseFile::truncate(uint32_t length) {$/;"	f	class:SdBaseFile
type	Sd2Card.h	/^  int type() const {return type_;}$/;"	f	class:Sd2Card
type	Sd2Card.h	/^  void type(uint8_t value) {type_ = value;}$/;"	f	class:Sd2Card
type	SdBaseFile.h	/^  uint8_t type() const {return type_;}$/;"	f	class:SdBaseFile
type	SdFatStructs.h	/^  uint8_t  type;$/;"	m	struct:partitionTable
type_	Sd2Card.h	/^  uint8_t type_;$/;"	m	class:Sd2Card
type_	SdBaseFile.h	/^  uint8_t   type_;          \/\/ type of file see above for values$/;"	m	class:SdBaseFile
unknown_command_error	Marlin_main.cpp	/^void unknown_command_error() {$/;"	f
unscalePID_d	temperature.cpp	/^  float unscalePID_d(float d) { return d * PID_dT; }$/;"	f
unscalePID_i	temperature.cpp	/^  float unscalePID_i(float i) { return i \/ PID_dT; }$/;"	f
updatePID	temperature.cpp	/^void updatePID() {$/;"	f
updateTemperaturesFromRawValues	temperature.cpp	/^static void updateTemperaturesFromRawValues() {$/;"	f	file:
update_endstops	stepper.cpp	/^inline void update_endstops() {$/;"	f
update_software_endstops	Marlin_main.cpp	/^static void update_software_endstops(AxisEnum axis) {$/;"	f	file:
updir	cardreader.cpp	/^void CardReader::updir() {$/;"	f	class:CardReader
usToTicks	servo.cpp	77;"	d	file:
usuallyZero	SdFatStructs.h	/^  uint16_t usuallyZero;$/;"	m	struct:masterBootRecord
v1	SdInfo.h	/^  csd1_t v1;$/;"	m	union:csd_t
v2	SdInfo.h	/^  csd2_t v2;$/;"	m	union:csd_t
valve_pressure	planner.h	/^    unsigned long valve_pressure;$/;"	m	struct:__anon1
vdd_r_curr_max	SdInfo.h	/^  unsigned char vdd_r_curr_max : 3;$/;"	m	struct:CSDV1
vdd_r_curr_min	SdInfo.h	/^  unsigned char vdd_r_curr_min : 3;$/;"	m	struct:CSDV1
vdd_w_cur_max	SdInfo.h	/^  unsigned char vdd_w_cur_max : 3;$/;"	m	struct:CSDV1
vdd_w_curr_min	SdInfo.h	/^  unsigned char vdd_w_curr_min : 3;$/;"	m	struct:CSDV1
vector_3	vector_3.cpp	/^vector_3::vector_3() : x(0), y(0), z(0) { }$/;"	f	class:vector_3
vector_3	vector_3.cpp	/^vector_3::vector_3(float x_, float y_, float z_) : x(x_), y(y_), z(z_) { }$/;"	f	class:vector_3
vector_3	vector_3.h	/^struct vector_3 {$/;"	s
vfat_t	SdFatStructs.h	/^typedef struct directoryVFATEntry vfat_t;$/;"	t	typeref:struct:directoryVFATEntry
vol_	SdBaseFile.h	/^  SdVolume* vol_;           \/\/ volume where file is located$/;"	m	class:SdBaseFile
volume	SdBaseFile.h	/^  SdVolume* volume() const {return vol_;}$/;"	f	class:SdBaseFile
volume	cardreader.h	/^  SdVolume volume;$/;"	m	class:CardReader
volumeLabel	SdFatStructs.h	/^  char     volumeLabel[11];$/;"	m	struct:fat32_boot
volumeLabel	SdFatStructs.h	/^  char     volumeLabel[11];$/;"	m	struct:fat_boot
volumeSerialNumber	SdFatStructs.h	/^  uint32_t volumeSerialNumber;$/;"	m	struct:fat32_boot
volumeSerialNumber	SdFatStructs.h	/^  uint32_t volumeSerialNumber;$/;"	m	struct:fat_boot
volumetric_enabled	Marlin_main.cpp	/^bool volumetric_enabled = false;$/;"	v
volumetric_multiplier	Marlin_main.cpp	/^float volumetric_multiplier[EXTRUDERS] = ARRAY_BY_EXTRUDERS1(1.0);$/;"	v
waitNotBusy	Sd2Card.cpp	/^bool Sd2Card::waitNotBusy(uint16_t timeoutMillis) {$/;"	f	class:Sd2Card
wait_for_unclick	ultralcd.cpp	/^bool wait_for_unclick;$/;"	v
watch_heater_next_ms	temperature.cpp	/^  millis_t watch_heater_next_ms[EXTRUDERS] = { 0 };$/;"	v
watch_target_temp	temperature.cpp	/^  int watch_target_temp[EXTRUDERS] = { 0 };$/;"	v
watch_temp_callback_E0	ultralcd.cpp	/^void watch_temp_callback_E0() {$/;"	f
watch_temp_callback_E0	ultralcd.cpp	/^void watch_temp_callback_E0() {}$/;"	f
watch_temp_callback_E1	ultralcd.cpp	/^void watch_temp_callback_E1() {$/;"	f
watch_temp_callback_E1	ultralcd.cpp	/^void watch_temp_callback_E1() {}$/;"	f
watch_temp_callback_E2	ultralcd.cpp	/^void watch_temp_callback_E2() {$/;"	f
watch_temp_callback_E2	ultralcd.cpp	/^void watch_temp_callback_E2() {}$/;"	f
watch_temp_callback_E3	ultralcd.cpp	/^void watch_temp_callback_E3() {$/;"	f
watch_temp_callback_E3	ultralcd.cpp	/^void watch_temp_callback_E3() {}$/;"	f
watchdog_init	watchdog.cpp	/^void watchdog_init() {$/;"	f
watchdog_reset	watchdog.h	/^inline void watchdog_reset() { wdt_reset(); }$/;"	f
widthFil_to_size_ratio	temperature.cpp	/^  int widthFil_to_size_ratio() {$/;"	f
workDir	cardreader.h	/^  SdFile root, *curDir, workDir, workDirParents[MAX_DIR_DEPTH];$/;"	m	class:CardReader
workDirDepth	cardreader.h	/^  uint8_t workDirDepth;$/;"	m	class:CardReader
workDirParents	cardreader.h	/^  SdFile root, *curDir, workDir, workDirParents[MAX_DIR_DEPTH];$/;"	m	class:CardReader
wp_grp_enable	SdInfo.h	/^  unsigned char wp_grp_enable : 1;$/;"	m	struct:CSDV1
wp_grp_enable	SdInfo.h	/^  unsigned char wp_grp_enable : 1;$/;"	m	struct:CSDV2
wp_grp_size	SdInfo.h	/^  unsigned char wp_grp_size : 7;$/;"	m	struct:CSDV1
wp_grp_size	SdInfo.h	/^  unsigned char wp_grp_size : 7;$/;"	m	struct:CSDV2
write	MarlinSerial.h	/^    FORCE_INLINE void write(const char* str) { while (*str) write(*str++); }$/;"	f	class:MarlinSerial
write	MarlinSerial.h	/^    FORCE_INLINE void write(const uint8_t* buffer, size_t size) { while (size--) write(*buffer++); }$/;"	f	class:MarlinSerial
write	MarlinSerial.h	/^    FORCE_INLINE void write(uint8_t c) {$/;"	f	class:MarlinSerial
write	SdBaseFile.cpp	/^int16_t SdBaseFile::write(const void* buf, uint16_t nbyte) {$/;"	f	class:SdBaseFile
write	SdFile.cpp	/^  size_t SdFile::write(uint8_t b) {$/;"	f	class:SdFile
write	SdFile.cpp	/^  void SdFile::write(uint8_t b) {$/;"	f	class:SdFile
write	SdFile.cpp	/^int16_t SdFile::write(const void* buf, uint16_t nbyte) {$/;"	f	class:SdFile
write	SdFile.cpp	/^void SdFile::write(const char* str) {$/;"	f	class:SdFile
write	servo.cpp	/^void Servo::write(int value) {$/;"	f	class:Servo
writeBlock	Sd2Card.cpp	/^bool Sd2Card::writeBlock(uint32_t blockNumber, const uint8_t* src) {$/;"	f	class:Sd2Card
writeBlock	SdVolume.h	/^  bool writeBlock(uint32_t block, const uint8_t* dst) {$/;"	f	class:SdVolume
writeData	Sd2Card.cpp	/^bool Sd2Card::writeData(const uint8_t* src) {$/;"	f	class:Sd2Card
writeData	Sd2Card.cpp	/^bool Sd2Card::writeData(uint8_t token, const uint8_t* src) {$/;"	f	class:Sd2Card
writeError	SdBaseFile.h	/^  bool writeError;$/;"	m	class:SdBaseFile
writeMicroseconds	servo.cpp	/^void Servo::writeMicroseconds(int value) {$/;"	f	class:Servo
writeStart	Sd2Card.cpp	/^bool Sd2Card::writeStart(uint32_t blockNumber, uint32_t eraseCount) {$/;"	f	class:Sd2Card
writeStop	Sd2Card.cpp	/^bool Sd2Card::writeStop() {$/;"	f	class:Sd2Card
write_P	SdFile.cpp	/^void SdFile::write_P(PGM_P str) {$/;"	f	class:SdFile
write_bl_len_high	SdInfo.h	/^  unsigned char write_bl_len_high : 2;$/;"	m	struct:CSDV1
write_bl_len_high	SdInfo.h	/^  unsigned char write_bl_len_high : 2;$/;"	m	struct:CSDV2
write_bl_len_low	SdInfo.h	/^  unsigned char write_bl_len_low : 2;$/;"	m	struct:CSDV1
write_bl_len_low	SdInfo.h	/^  unsigned char write_bl_len_low : 2;$/;"	m	struct:CSDV2
write_blk_misalign	SdInfo.h	/^  unsigned char write_blk_misalign : 1;$/;"	m	struct:CSDV1
write_blk_misalign	SdInfo.h	/^  unsigned char write_blk_misalign : 1;$/;"	m	struct:CSDV2
write_command	cardreader.cpp	/^void CardReader::write_command(char *buf) {$/;"	f	class:CardReader
write_partial	SdInfo.h	/^  unsigned char write_partial : 1;$/;"	m	struct:CSDV1
write_partial	SdInfo.h	/^  unsigned char write_partial : 1;$/;"	m	struct:CSDV2
writeln_P	SdFile.cpp	/^void SdFile::writeln_P(PGM_P str) {$/;"	f	class:SdFile
x	vector_3.h	/^  float x, y, z;$/;"	m	struct:vector_3
x_home_dir	Marlin_main.cpp	/^static int x_home_dir(int extruder) {$/;"	f	file:
x_home_pos	Marlin_main.cpp	/^static float x_home_pos(int extruder) {$/;"	f	file:
xy_travel_speed	Marlin_main.cpp	/^int xy_travel_speed = XY_TRAVEL_SPEED;$/;"	v
y	vector_3.h	/^  float x, y, z;$/;"	m	struct:vector_3
z	vector_3.h	/^  float x, y, z;$/;"	m	struct:vector_3
z_endstop_adj	Marlin_main.cpp	/^float z_endstop_adj = 0;$/;"	v
z_probe_is_active	stepper.cpp	/^  volatile bool z_probe_is_active = false;$/;"	v
zprobe_zoffset	Marlin_main.cpp	/^float zprobe_zoffset = Z_PROBE_OFFSET_FROM_EXTRUDER;$/;"	v
~SdBaseFile	SdBaseFile.h	/^  ~SdBaseFile() {if (isOpen()) close();}$/;"	f	class:SdBaseFile
